{"ast":null,"code":"'use strict';\n\nconst log = require('npmlog');\n\nconst execFile = require('child_process').execFile;\n\nconst fs = require('fs');\n\nconst path = require('path').win32;\n\nconst logWithPrefix = require('./util').logWithPrefix;\n\nconst regSearchKeys = require('./util').regSearchKeys;\n\nfunction findVisualStudio(nodeSemver, configMsvsVersion, callback) {\n  const finder = new VisualStudioFinder(nodeSemver, configMsvsVersion, callback);\n  finder.findVisualStudio();\n}\n\nfunction VisualStudioFinder(nodeSemver, configMsvsVersion, callback) {\n  this.nodeSemver = nodeSemver;\n  this.configMsvsVersion = configMsvsVersion;\n  this.callback = callback;\n  this.errorLog = [];\n  this.validVersions = [];\n}\n\nVisualStudioFinder.prototype = {\n  log: logWithPrefix(log, 'find VS'),\n  regSearchKeys: regSearchKeys,\n  // Logs a message at verbose level, but also saves it to be displayed later\n  // at error level if an error occurs. This should help diagnose the problem.\n  addLog: function addLog(message) {\n    this.log.verbose(message);\n    this.errorLog.push(message);\n  },\n  findVisualStudio: function findVisualStudio() {\n    this.configVersionYear = null;\n    this.configPath = null;\n\n    if (this.configMsvsVersion) {\n      this.addLog('msvs_version was set from command line or npm config');\n\n      if (this.configMsvsVersion.match(/^\\d{4}$/)) {\n        this.configVersionYear = parseInt(this.configMsvsVersion, 10);\n        this.addLog(`- looking for Visual Studio version ${this.configVersionYear}`);\n      } else {\n        this.configPath = path.resolve(this.configMsvsVersion);\n        this.addLog(`- looking for Visual Studio installed in \"${this.configPath}\"`);\n      }\n    } else {\n      this.addLog('msvs_version not set from command line or npm config');\n    }\n\n    if (process.env.VCINSTALLDIR) {\n      this.envVcInstallDir = path.resolve(process.env.VCINSTALLDIR, '..');\n      this.addLog('running in VS Command Prompt, installation path is:\\n' + `\"${this.envVcInstallDir}\"\\n- will only use this version`);\n    } else {\n      this.addLog('VCINSTALLDIR not set, not running in VS Command Prompt');\n    }\n\n    this.findVisualStudio2017OrNewer(info => {\n      if (info) {\n        return this.succeed(info);\n      }\n\n      this.findVisualStudio2015(info => {\n        if (info) {\n          return this.succeed(info);\n        }\n\n        this.findVisualStudio2013(info => {\n          if (info) {\n            return this.succeed(info);\n          }\n\n          this.fail();\n        });\n      });\n    });\n  },\n  succeed: function succeed(info) {\n    this.log.info(`using VS${info.versionYear} (${info.version}) found at:` + `\\n\"${info.path}\"` + '\\nrun with --verbose for detailed information');\n    process.nextTick(this.callback.bind(null, null, info));\n  },\n  fail: function fail() {\n    if (this.configMsvsVersion && this.envVcInstallDir) {\n      this.errorLog.push('msvs_version does not match this VS Command Prompt or the', 'installation cannot be used.');\n    } else if (this.configMsvsVersion) {\n      // If msvs_version was specified but finding VS failed, print what would\n      // have been accepted\n      this.errorLog.push('');\n\n      if (this.validVersions) {\n        this.errorLog.push('valid versions for msvs_version:');\n        this.validVersions.forEach(version => {\n          this.errorLog.push(`- \"${version}\"`);\n        });\n      } else {\n        this.errorLog.push('no valid versions for msvs_version were found');\n      }\n    }\n\n    const errorLog = this.errorLog.join('\\n'); // For Windows 80 col console, use up to the column before the one marked\n    // with X (total 79 chars including logger prefix, 62 chars usable here):\n    //                                                               X\n\n    const infoLog = ['**************************************************************', 'You need to install the latest version of Visual Studio', 'including the \"Desktop development with C++\" workload.', 'For more information consult the documentation at:', 'https://github.com/nodejs/node-gyp#on-windows', '**************************************************************'].join('\\n');\n    this.log.error(`\\n${errorLog}\\n\\n${infoLog}\\n`);\n    process.nextTick(this.callback.bind(null, new Error('Could not find any Visual Studio installation to use')));\n  },\n  // Invoke the PowerShell script to get information about Visual Studio 2017\n  // or newer installations\n  findVisualStudio2017OrNewer: function findVisualStudio2017OrNewer(cb) {\n    var ps = path.join(process.env.SystemRoot, 'System32', 'WindowsPowerShell', 'v1.0', 'powershell.exe');\n    var csFile = path.join(__dirname, 'Find-VisualStudio.cs');\n    var psArgs = ['-ExecutionPolicy', 'Unrestricted', '-NoProfile', '-Command', '&{Add-Type -Path \\'' + csFile + '\\';' + '[VisualStudioConfiguration.Main]::PrintJson()}'];\n    this.log.silly('Running', ps, psArgs);\n    var child = execFile(ps, psArgs, {\n      encoding: 'utf8'\n    }, (err, stdout, stderr) => {\n      this.parseData(err, stdout, stderr, cb);\n    });\n    child.stdin.end();\n  },\n  // Parse the output of the PowerShell script and look for an installation\n  // of Visual Studio 2017 or newer to use\n  parseData: function parseData(err, stdout, stderr, cb) {\n    this.log.silly('PS stderr = %j', stderr);\n\n    const failPowershell = () => {\n      this.addLog('could not use PowerShell to find Visual Studio 2017 or newer, try re-running with \\'--loglevel silly\\' for more details');\n      cb(null);\n    };\n\n    if (err) {\n      this.log.silly('PS err = %j', err && (err.stack || err));\n      return failPowershell();\n    }\n\n    var vsInfo;\n\n    try {\n      vsInfo = JSON.parse(stdout);\n    } catch (e) {\n      this.log.silly('PS stdout = %j', stdout);\n      this.log.silly(e);\n      return failPowershell();\n    }\n\n    if (!Array.isArray(vsInfo)) {\n      this.log.silly('PS stdout = %j', stdout);\n      return failPowershell();\n    }\n\n    vsInfo = vsInfo.map(info => {\n      this.log.silly(`processing installation: \"${info.path}\"`);\n      info.path = path.resolve(info.path);\n      var ret = this.getVersionInfo(info);\n      ret.path = info.path;\n      ret.msBuild = this.getMSBuild(info, ret.versionYear);\n      ret.toolset = this.getToolset(info, ret.versionYear);\n      ret.sdk = this.getSDK(info);\n      return ret;\n    });\n    this.log.silly('vsInfo:', vsInfo); // Remove future versions or errors parsing version number\n\n    vsInfo = vsInfo.filter(info => {\n      if (info.versionYear) {\n        return true;\n      }\n\n      this.addLog(`unknown version \"${info.version}\" found at \"${info.path}\"`);\n      return false;\n    }); // Sort to place newer versions first\n\n    vsInfo.sort((a, b) => b.versionYear - a.versionYear);\n\n    for (var i = 0; i < vsInfo.length; ++i) {\n      const info = vsInfo[i];\n      this.addLog(`checking VS${info.versionYear} (${info.version}) found ` + `at:\\n\"${info.path}\"`);\n\n      if (info.msBuild) {\n        this.addLog('- found \"Visual Studio C++ core features\"');\n      } else {\n        this.addLog('- \"Visual Studio C++ core features\" missing');\n        continue;\n      }\n\n      if (info.toolset) {\n        this.addLog(`- found VC++ toolset: ${info.toolset}`);\n      } else {\n        this.addLog('- missing any VC++ toolset');\n        continue;\n      }\n\n      if (info.sdk) {\n        this.addLog(`- found Windows SDK: ${info.sdk}`);\n      } else {\n        this.addLog('- missing any Windows SDK');\n        continue;\n      }\n\n      if (!this.checkConfigVersion(info.versionYear, info.path)) {\n        continue;\n      }\n\n      return cb(info);\n    }\n\n    this.addLog('could not find a version of Visual Studio 2017 or newer to use');\n    cb(null);\n  },\n  // Helper - process version information\n  getVersionInfo: function getVersionInfo(info) {\n    const match = /^(\\d+)\\.(\\d+)\\..*/.exec(info.version);\n\n    if (!match) {\n      this.log.silly('- failed to parse version:', info.version);\n      return {};\n    }\n\n    this.log.silly('- version match = %j', match);\n    var ret = {\n      version: info.version,\n      versionMajor: parseInt(match[1], 10),\n      versionMinor: parseInt(match[2], 10)\n    };\n\n    if (ret.versionMajor === 15) {\n      ret.versionYear = 2017;\n      return ret;\n    }\n\n    if (ret.versionMajor === 16) {\n      ret.versionYear = 2019;\n      return ret;\n    }\n\n    if (ret.versionMajor === 17) {\n      ret.versionYear = 2022;\n      return ret;\n    }\n\n    this.log.silly('- unsupported version:', ret.versionMajor);\n    return {};\n  },\n  // Helper - process MSBuild information\n  getMSBuild: function getMSBuild(info, versionYear) {\n    const pkg = 'Microsoft.VisualStudio.VC.MSBuild.Base';\n    const msbuildPath = path.join(info.path, 'MSBuild', 'Current', 'Bin', 'MSBuild.exe');\n\n    if (info.packages.indexOf(pkg) !== -1) {\n      this.log.silly('- found VC.MSBuild.Base');\n\n      if (versionYear === 2017) {\n        return path.join(info.path, 'MSBuild', '15.0', 'Bin', 'MSBuild.exe');\n      }\n\n      if (versionYear === 2019) {\n        return msbuildPath;\n      }\n    } // visual studio 2022 don't has msbuild pkg\n\n\n    if (fs.existsSync(msbuildPath)) {\n      return msbuildPath;\n    }\n\n    return null;\n  },\n  // Helper - process toolset information\n  getToolset: function getToolset(info, versionYear) {\n    const pkg = 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64';\n    const express = 'Microsoft.VisualStudio.WDExpress';\n\n    if (info.packages.indexOf(pkg) !== -1) {\n      this.log.silly('- found VC.Tools.x86.x64');\n    } else if (info.packages.indexOf(express) !== -1) {\n      this.log.silly('- found Visual Studio Express (looking for toolset)');\n    } else {\n      return null;\n    }\n\n    if (versionYear === 2017) {\n      return 'v141';\n    } else if (versionYear === 2019) {\n      return 'v142';\n    } else if (versionYear === 2022) {\n      return 'v143';\n    }\n\n    this.log.silly('- invalid versionYear:', versionYear);\n    return null;\n  },\n  // Helper - process Windows SDK information\n  getSDK: function getSDK(info) {\n    const win8SDK = 'Microsoft.VisualStudio.Component.Windows81SDK';\n    const win10SDKPrefix = 'Microsoft.VisualStudio.Component.Windows10SDK.';\n    var Win10SDKVer = 0;\n    info.packages.forEach(pkg => {\n      if (!pkg.startsWith(win10SDKPrefix)) {\n        return;\n      }\n\n      const parts = pkg.split('.');\n\n      if (parts.length > 5 && parts[5] !== 'Desktop') {\n        this.log.silly('- ignoring non-Desktop Win10SDK:', pkg);\n        return;\n      }\n\n      const foundSdkVer = parseInt(parts[4], 10);\n\n      if (isNaN(foundSdkVer)) {\n        // Microsoft.VisualStudio.Component.Windows10SDK.IpOverUsb\n        this.log.silly('- failed to parse Win10SDK number:', pkg);\n        return;\n      }\n\n      this.log.silly('- found Win10SDK:', foundSdkVer);\n      Win10SDKVer = Math.max(Win10SDKVer, foundSdkVer);\n    });\n\n    if (Win10SDKVer !== 0) {\n      return `10.0.${Win10SDKVer}.0`;\n    } else if (info.packages.indexOf(win8SDK) !== -1) {\n      this.log.silly('- found Win8SDK');\n      return '8.1';\n    }\n\n    return null;\n  },\n  // Find an installation of Visual Studio 2015 to use\n  findVisualStudio2015: function findVisualStudio2015(cb) {\n    return this.findOldVS({\n      version: '14.0',\n      versionMajor: 14,\n      versionMinor: 0,\n      versionYear: 2015,\n      toolset: 'v140'\n    }, cb);\n  },\n  // Find an installation of Visual Studio 2013 to use\n  findVisualStudio2013: function findVisualStudio2013(cb) {\n    if (this.nodeSemver.major >= 9) {\n      this.addLog('not looking for VS2013 as it is only supported up to Node.js 8');\n      return cb(null);\n    }\n\n    return this.findOldVS({\n      version: '12.0',\n      versionMajor: 12,\n      versionMinor: 0,\n      versionYear: 2013,\n      toolset: 'v120'\n    }, cb);\n  },\n  // Helper - common code for VS2013 and VS2015\n  findOldVS: function findOldVS(info, cb) {\n    const regVC7 = ['HKLM\\\\Software\\\\Microsoft\\\\VisualStudio\\\\SxS\\\\VC7', 'HKLM\\\\Software\\\\Wow6432Node\\\\Microsoft\\\\VisualStudio\\\\SxS\\\\VC7'];\n    const regMSBuild = 'HKLM\\\\Software\\\\Microsoft\\\\MSBuild\\\\ToolsVersions';\n    this.addLog(`looking for Visual Studio ${info.versionYear}`);\n    this.regSearchKeys(regVC7, info.version, [], (err, res) => {\n      if (err) {\n        this.addLog('- not found');\n        return cb(null);\n      }\n\n      const vsPath = path.resolve(res, '..');\n      this.addLog(`- found in \"${vsPath}\"`);\n      const msBuildRegOpts = process.arch === 'ia32' ? [] : ['/reg:32'];\n      this.regSearchKeys([`${regMSBuild}\\\\${info.version}`], 'MSBuildToolsPath', msBuildRegOpts, (err, res) => {\n        if (err) {\n          this.addLog('- could not find MSBuild in registry for this version');\n          return cb(null);\n        }\n\n        const msBuild = path.join(res, 'MSBuild.exe');\n        this.addLog(`- MSBuild in \"${msBuild}\"`);\n\n        if (!this.checkConfigVersion(info.versionYear, vsPath)) {\n          return cb(null);\n        }\n\n        info.path = vsPath;\n        info.msBuild = msBuild;\n        info.sdk = null;\n        cb(info);\n      });\n    });\n  },\n  // After finding a usable version of Visual Studio:\n  // - add it to validVersions to be displayed at the end if a specific\n  //   version was requested and not found;\n  // - check if this is the version that was requested.\n  // - check if this matches the Visual Studio Command Prompt\n  checkConfigVersion: function checkConfigVersion(versionYear, vsPath) {\n    this.validVersions.push(versionYear);\n    this.validVersions.push(vsPath);\n\n    if (this.configVersionYear && this.configVersionYear !== versionYear) {\n      this.addLog('- msvs_version does not match this version');\n      return false;\n    }\n\n    if (this.configPath && path.relative(this.configPath, vsPath) !== '') {\n      this.addLog('- msvs_version does not point to this installation');\n      return false;\n    }\n\n    if (this.envVcInstallDir && path.relative(this.envVcInstallDir, vsPath) !== '') {\n      this.addLog('- does not match this Visual Studio Command Prompt');\n      return false;\n    }\n\n    return true;\n  }\n};\nmodule.exports = findVisualStudio;\nmodule.exports.test = {\n  VisualStudioFinder: VisualStudioFinder,\n  findVisualStudio: findVisualStudio\n};","map":{"version":3,"names":["log","require","execFile","fs","path","win32","logWithPrefix","regSearchKeys","findVisualStudio","nodeSemver","configMsvsVersion","callback","finder","VisualStudioFinder","errorLog","validVersions","prototype","addLog","message","verbose","push","configVersionYear","configPath","match","parseInt","resolve","process","env","VCINSTALLDIR","envVcInstallDir","findVisualStudio2017OrNewer","info","succeed","findVisualStudio2015","findVisualStudio2013","fail","versionYear","version","nextTick","bind","forEach","join","infoLog","error","Error","cb","ps","SystemRoot","csFile","__dirname","psArgs","silly","child","encoding","err","stdout","stderr","parseData","stdin","end","failPowershell","stack","vsInfo","JSON","parse","e","Array","isArray","map","ret","getVersionInfo","msBuild","getMSBuild","toolset","getToolset","sdk","getSDK","filter","sort","a","b","i","length","checkConfigVersion","exec","versionMajor","versionMinor","pkg","msbuildPath","packages","indexOf","existsSync","express","win8SDK","win10SDKPrefix","Win10SDKVer","startsWith","parts","split","foundSdkVer","isNaN","Math","max","findOldVS","major","regVC7","regMSBuild","res","vsPath","msBuildRegOpts","arch","relative","module","exports","test"],"sources":["C:/Users/Kamen/ML/AlgoTrader/node_modules/node-gyp/lib/find-visualstudio.js"],"sourcesContent":["'use strict'\n\nconst log = require('npmlog')\nconst execFile = require('child_process').execFile\nconst fs = require('fs')\nconst path = require('path').win32\nconst logWithPrefix = require('./util').logWithPrefix\nconst regSearchKeys = require('./util').regSearchKeys\n\nfunction findVisualStudio (nodeSemver, configMsvsVersion, callback) {\n  const finder = new VisualStudioFinder(nodeSemver, configMsvsVersion,\n    callback)\n  finder.findVisualStudio()\n}\n\nfunction VisualStudioFinder (nodeSemver, configMsvsVersion, callback) {\n  this.nodeSemver = nodeSemver\n  this.configMsvsVersion = configMsvsVersion\n  this.callback = callback\n  this.errorLog = []\n  this.validVersions = []\n}\n\nVisualStudioFinder.prototype = {\n  log: logWithPrefix(log, 'find VS'),\n\n  regSearchKeys: regSearchKeys,\n\n  // Logs a message at verbose level, but also saves it to be displayed later\n  // at error level if an error occurs. This should help diagnose the problem.\n  addLog: function addLog (message) {\n    this.log.verbose(message)\n    this.errorLog.push(message)\n  },\n\n  findVisualStudio: function findVisualStudio () {\n    this.configVersionYear = null\n    this.configPath = null\n    if (this.configMsvsVersion) {\n      this.addLog('msvs_version was set from command line or npm config')\n      if (this.configMsvsVersion.match(/^\\d{4}$/)) {\n        this.configVersionYear = parseInt(this.configMsvsVersion, 10)\n        this.addLog(\n          `- looking for Visual Studio version ${this.configVersionYear}`)\n      } else {\n        this.configPath = path.resolve(this.configMsvsVersion)\n        this.addLog(\n          `- looking for Visual Studio installed in \"${this.configPath}\"`)\n      }\n    } else {\n      this.addLog('msvs_version not set from command line or npm config')\n    }\n\n    if (process.env.VCINSTALLDIR) {\n      this.envVcInstallDir =\n        path.resolve(process.env.VCINSTALLDIR, '..')\n      this.addLog('running in VS Command Prompt, installation path is:\\n' +\n        `\"${this.envVcInstallDir}\"\\n- will only use this version`)\n    } else {\n      this.addLog('VCINSTALLDIR not set, not running in VS Command Prompt')\n    }\n\n    this.findVisualStudio2017OrNewer((info) => {\n      if (info) {\n        return this.succeed(info)\n      }\n      this.findVisualStudio2015((info) => {\n        if (info) {\n          return this.succeed(info)\n        }\n        this.findVisualStudio2013((info) => {\n          if (info) {\n            return this.succeed(info)\n          }\n          this.fail()\n        })\n      })\n    })\n  },\n\n  succeed: function succeed (info) {\n    this.log.info(`using VS${info.versionYear} (${info.version}) found at:` +\n                  `\\n\"${info.path}\"` +\n                  '\\nrun with --verbose for detailed information')\n    process.nextTick(this.callback.bind(null, null, info))\n  },\n\n  fail: function fail () {\n    if (this.configMsvsVersion && this.envVcInstallDir) {\n      this.errorLog.push(\n        'msvs_version does not match this VS Command Prompt or the',\n        'installation cannot be used.')\n    } else if (this.configMsvsVersion) {\n      // If msvs_version was specified but finding VS failed, print what would\n      // have been accepted\n      this.errorLog.push('')\n      if (this.validVersions) {\n        this.errorLog.push('valid versions for msvs_version:')\n        this.validVersions.forEach((version) => {\n          this.errorLog.push(`- \"${version}\"`)\n        })\n      } else {\n        this.errorLog.push('no valid versions for msvs_version were found')\n      }\n    }\n\n    const errorLog = this.errorLog.join('\\n')\n\n    // For Windows 80 col console, use up to the column before the one marked\n    // with X (total 79 chars including logger prefix, 62 chars usable here):\n    //                                                               X\n    const infoLog = [\n      '**************************************************************',\n      'You need to install the latest version of Visual Studio',\n      'including the \"Desktop development with C++\" workload.',\n      'For more information consult the documentation at:',\n      'https://github.com/nodejs/node-gyp#on-windows',\n      '**************************************************************'\n    ].join('\\n')\n\n    this.log.error(`\\n${errorLog}\\n\\n${infoLog}\\n`)\n    process.nextTick(this.callback.bind(null, new Error(\n      'Could not find any Visual Studio installation to use')))\n  },\n\n  // Invoke the PowerShell script to get information about Visual Studio 2017\n  // or newer installations\n  findVisualStudio2017OrNewer: function findVisualStudio2017OrNewer (cb) {\n    var ps = path.join(process.env.SystemRoot, 'System32',\n      'WindowsPowerShell', 'v1.0', 'powershell.exe')\n    var csFile = path.join(__dirname, 'Find-VisualStudio.cs')\n    var psArgs = [\n      '-ExecutionPolicy',\n      'Unrestricted',\n      '-NoProfile',\n      '-Command',\n      '&{Add-Type -Path \\'' + csFile + '\\';' + '[VisualStudioConfiguration.Main]::PrintJson()}'\n    ]\n\n    this.log.silly('Running', ps, psArgs)\n    var child = execFile(ps, psArgs, { encoding: 'utf8' },\n      (err, stdout, stderr) => {\n        this.parseData(err, stdout, stderr, cb)\n      })\n    child.stdin.end()\n  },\n\n  // Parse the output of the PowerShell script and look for an installation\n  // of Visual Studio 2017 or newer to use\n  parseData: function parseData (err, stdout, stderr, cb) {\n    this.log.silly('PS stderr = %j', stderr)\n\n    const failPowershell = () => {\n      this.addLog(\n        'could not use PowerShell to find Visual Studio 2017 or newer, try re-running with \\'--loglevel silly\\' for more details')\n      cb(null)\n    }\n\n    if (err) {\n      this.log.silly('PS err = %j', err && (err.stack || err))\n      return failPowershell()\n    }\n\n    var vsInfo\n    try {\n      vsInfo = JSON.parse(stdout)\n    } catch (e) {\n      this.log.silly('PS stdout = %j', stdout)\n      this.log.silly(e)\n      return failPowershell()\n    }\n\n    if (!Array.isArray(vsInfo)) {\n      this.log.silly('PS stdout = %j', stdout)\n      return failPowershell()\n    }\n\n    vsInfo = vsInfo.map((info) => {\n      this.log.silly(`processing installation: \"${info.path}\"`)\n      info.path = path.resolve(info.path)\n      var ret = this.getVersionInfo(info)\n      ret.path = info.path\n      ret.msBuild = this.getMSBuild(info, ret.versionYear)\n      ret.toolset = this.getToolset(info, ret.versionYear)\n      ret.sdk = this.getSDK(info)\n      return ret\n    })\n    this.log.silly('vsInfo:', vsInfo)\n\n    // Remove future versions or errors parsing version number\n    vsInfo = vsInfo.filter((info) => {\n      if (info.versionYear) {\n        return true\n      }\n      this.addLog(`unknown version \"${info.version}\" found at \"${info.path}\"`)\n      return false\n    })\n\n    // Sort to place newer versions first\n    vsInfo.sort((a, b) => b.versionYear - a.versionYear)\n\n    for (var i = 0; i < vsInfo.length; ++i) {\n      const info = vsInfo[i]\n      this.addLog(`checking VS${info.versionYear} (${info.version}) found ` +\n                  `at:\\n\"${info.path}\"`)\n\n      if (info.msBuild) {\n        this.addLog('- found \"Visual Studio C++ core features\"')\n      } else {\n        this.addLog('- \"Visual Studio C++ core features\" missing')\n        continue\n      }\n\n      if (info.toolset) {\n        this.addLog(`- found VC++ toolset: ${info.toolset}`)\n      } else {\n        this.addLog('- missing any VC++ toolset')\n        continue\n      }\n\n      if (info.sdk) {\n        this.addLog(`- found Windows SDK: ${info.sdk}`)\n      } else {\n        this.addLog('- missing any Windows SDK')\n        continue\n      }\n\n      if (!this.checkConfigVersion(info.versionYear, info.path)) {\n        continue\n      }\n\n      return cb(info)\n    }\n\n    this.addLog(\n      'could not find a version of Visual Studio 2017 or newer to use')\n    cb(null)\n  },\n\n  // Helper - process version information\n  getVersionInfo: function getVersionInfo (info) {\n    const match = /^(\\d+)\\.(\\d+)\\..*/.exec(info.version)\n    if (!match) {\n      this.log.silly('- failed to parse version:', info.version)\n      return {}\n    }\n    this.log.silly('- version match = %j', match)\n    var ret = {\n      version: info.version,\n      versionMajor: parseInt(match[1], 10),\n      versionMinor: parseInt(match[2], 10)\n    }\n    if (ret.versionMajor === 15) {\n      ret.versionYear = 2017\n      return ret\n    }\n    if (ret.versionMajor === 16) {\n      ret.versionYear = 2019\n      return ret\n    }\n    if (ret.versionMajor === 17) {\n      ret.versionYear = 2022\n      return ret\n    }\n    this.log.silly('- unsupported version:', ret.versionMajor)\n    return {}\n  },\n\n  // Helper - process MSBuild information\n  getMSBuild: function getMSBuild (info, versionYear) {\n    const pkg = 'Microsoft.VisualStudio.VC.MSBuild.Base'\n    const msbuildPath = path.join(info.path, 'MSBuild', 'Current', 'Bin', 'MSBuild.exe')\n    if (info.packages.indexOf(pkg) !== -1) {\n      this.log.silly('- found VC.MSBuild.Base')\n      if (versionYear === 2017) {\n        return path.join(info.path, 'MSBuild', '15.0', 'Bin', 'MSBuild.exe')\n      }\n      if (versionYear === 2019) {\n        return msbuildPath\n      }\n    }\n    // visual studio 2022 don't has msbuild pkg\n    if (fs.existsSync(msbuildPath)) {\n      return msbuildPath\n    }\n    return null\n  },\n\n  // Helper - process toolset information\n  getToolset: function getToolset (info, versionYear) {\n    const pkg = 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64'\n    const express = 'Microsoft.VisualStudio.WDExpress'\n\n    if (info.packages.indexOf(pkg) !== -1) {\n      this.log.silly('- found VC.Tools.x86.x64')\n    } else if (info.packages.indexOf(express) !== -1) {\n      this.log.silly('- found Visual Studio Express (looking for toolset)')\n    } else {\n      return null\n    }\n\n    if (versionYear === 2017) {\n      return 'v141'\n    } else if (versionYear === 2019) {\n      return 'v142'\n    } else if (versionYear === 2022) {\n      return 'v143'\n    }\n    this.log.silly('- invalid versionYear:', versionYear)\n    return null\n  },\n\n  // Helper - process Windows SDK information\n  getSDK: function getSDK (info) {\n    const win8SDK = 'Microsoft.VisualStudio.Component.Windows81SDK'\n    const win10SDKPrefix = 'Microsoft.VisualStudio.Component.Windows10SDK.'\n\n    var Win10SDKVer = 0\n    info.packages.forEach((pkg) => {\n      if (!pkg.startsWith(win10SDKPrefix)) {\n        return\n      }\n      const parts = pkg.split('.')\n      if (parts.length > 5 && parts[5] !== 'Desktop') {\n        this.log.silly('- ignoring non-Desktop Win10SDK:', pkg)\n        return\n      }\n      const foundSdkVer = parseInt(parts[4], 10)\n      if (isNaN(foundSdkVer)) {\n        // Microsoft.VisualStudio.Component.Windows10SDK.IpOverUsb\n        this.log.silly('- failed to parse Win10SDK number:', pkg)\n        return\n      }\n      this.log.silly('- found Win10SDK:', foundSdkVer)\n      Win10SDKVer = Math.max(Win10SDKVer, foundSdkVer)\n    })\n\n    if (Win10SDKVer !== 0) {\n      return `10.0.${Win10SDKVer}.0`\n    } else if (info.packages.indexOf(win8SDK) !== -1) {\n      this.log.silly('- found Win8SDK')\n      return '8.1'\n    }\n    return null\n  },\n\n  // Find an installation of Visual Studio 2015 to use\n  findVisualStudio2015: function findVisualStudio2015 (cb) {\n    return this.findOldVS({\n      version: '14.0',\n      versionMajor: 14,\n      versionMinor: 0,\n      versionYear: 2015,\n      toolset: 'v140'\n    }, cb)\n  },\n\n  // Find an installation of Visual Studio 2013 to use\n  findVisualStudio2013: function findVisualStudio2013 (cb) {\n    if (this.nodeSemver.major >= 9) {\n      this.addLog(\n        'not looking for VS2013 as it is only supported up to Node.js 8')\n      return cb(null)\n    }\n    return this.findOldVS({\n      version: '12.0',\n      versionMajor: 12,\n      versionMinor: 0,\n      versionYear: 2013,\n      toolset: 'v120'\n    }, cb)\n  },\n\n  // Helper - common code for VS2013 and VS2015\n  findOldVS: function findOldVS (info, cb) {\n    const regVC7 = ['HKLM\\\\Software\\\\Microsoft\\\\VisualStudio\\\\SxS\\\\VC7',\n      'HKLM\\\\Software\\\\Wow6432Node\\\\Microsoft\\\\VisualStudio\\\\SxS\\\\VC7']\n    const regMSBuild = 'HKLM\\\\Software\\\\Microsoft\\\\MSBuild\\\\ToolsVersions'\n\n    this.addLog(`looking for Visual Studio ${info.versionYear}`)\n    this.regSearchKeys(regVC7, info.version, [], (err, res) => {\n      if (err) {\n        this.addLog('- not found')\n        return cb(null)\n      }\n\n      const vsPath = path.resolve(res, '..')\n      this.addLog(`- found in \"${vsPath}\"`)\n\n      const msBuildRegOpts = process.arch === 'ia32' ? [] : ['/reg:32']\n      this.regSearchKeys([`${regMSBuild}\\\\${info.version}`],\n        'MSBuildToolsPath', msBuildRegOpts, (err, res) => {\n          if (err) {\n            this.addLog(\n              '- could not find MSBuild in registry for this version')\n            return cb(null)\n          }\n\n          const msBuild = path.join(res, 'MSBuild.exe')\n          this.addLog(`- MSBuild in \"${msBuild}\"`)\n\n          if (!this.checkConfigVersion(info.versionYear, vsPath)) {\n            return cb(null)\n          }\n\n          info.path = vsPath\n          info.msBuild = msBuild\n          info.sdk = null\n          cb(info)\n        })\n    })\n  },\n\n  // After finding a usable version of Visual Studio:\n  // - add it to validVersions to be displayed at the end if a specific\n  //   version was requested and not found;\n  // - check if this is the version that was requested.\n  // - check if this matches the Visual Studio Command Prompt\n  checkConfigVersion: function checkConfigVersion (versionYear, vsPath) {\n    this.validVersions.push(versionYear)\n    this.validVersions.push(vsPath)\n\n    if (this.configVersionYear && this.configVersionYear !== versionYear) {\n      this.addLog('- msvs_version does not match this version')\n      return false\n    }\n    if (this.configPath &&\n        path.relative(this.configPath, vsPath) !== '') {\n      this.addLog('- msvs_version does not point to this installation')\n      return false\n    }\n    if (this.envVcInstallDir &&\n        path.relative(this.envVcInstallDir, vsPath) !== '') {\n      this.addLog('- does not match this Visual Studio Command Prompt')\n      return false\n    }\n\n    return true\n  }\n}\n\nmodule.exports = findVisualStudio\nmodule.exports.test = {\n  VisualStudioFinder: VisualStudioFinder,\n  findVisualStudio: findVisualStudio\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}