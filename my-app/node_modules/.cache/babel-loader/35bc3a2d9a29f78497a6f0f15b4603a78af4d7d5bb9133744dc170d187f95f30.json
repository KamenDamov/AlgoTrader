{"ast":null,"code":"'use strict';\n\n// eslint-disable-next-line\nvar Native = require('pg-native');\nvar TypeOverrides = require('../type-overrides');\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar ConnectionParameters = require('../connection-parameters');\nvar NativeQuery = require('./query');\nvar Client = module.exports = function (config) {\n  EventEmitter.call(this);\n  config = config || {};\n  this._Promise = config.Promise || global.Promise;\n  this._types = new TypeOverrides(config.types);\n  this.native = new Native({\n    types: this._types\n  });\n  this._queryQueue = [];\n  this._ending = false;\n  this._connecting = false;\n  this._connected = false;\n  this._queryable = true;\n\n  // keep these on the object for legacy reasons\n  // for the time being. TODO: deprecate all this jazz\n  var cp = this.connectionParameters = new ConnectionParameters(config);\n  this.user = cp.user;\n\n  // \"hiding\" the password so it doesn't show up in stack traces\n  // or if the client is console.logged\n  Object.defineProperty(this, 'password', {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value: cp.password\n  });\n  this.database = cp.database;\n  this.host = cp.host;\n  this.port = cp.port;\n\n  // a hash to hold named queries\n  this.namedQueries = {};\n};\nClient.Query = NativeQuery;\nutil.inherits(Client, EventEmitter);\nClient.prototype._errorAllQueries = function (err) {\n  const enqueueError = query => {\n    process.nextTick(() => {\n      query.native = this.native;\n      query.handleError(err);\n    });\n  };\n  if (this._hasActiveQuery()) {\n    enqueueError(this._activeQuery);\n    this._activeQuery = null;\n  }\n  this._queryQueue.forEach(enqueueError);\n  this._queryQueue.length = 0;\n};\n\n// connect to the backend\n// pass an optional callback to be called once connected\n// or with an error if there was a connection error\nClient.prototype._connect = function (cb) {\n  var self = this;\n  if (this._connecting) {\n    process.nextTick(() => cb(new Error('Client has already been connected. You cannot reuse a client.')));\n    return;\n  }\n  this._connecting = true;\n  this.connectionParameters.getLibpqConnectionString(function (err, conString) {\n    if (err) return cb(err);\n    self.native.connect(conString, function (err) {\n      if (err) {\n        self.native.end();\n        return cb(err);\n      }\n\n      // set internal states to connected\n      self._connected = true;\n\n      // handle connection errors from the native layer\n      self.native.on('error', function (err) {\n        self._queryable = false;\n        self._errorAllQueries(err);\n        self.emit('error', err);\n      });\n      self.native.on('notification', function (msg) {\n        self.emit('notification', {\n          channel: msg.relname,\n          payload: msg.extra\n        });\n      });\n\n      // signal we are connected now\n      self.emit('connect');\n      self._pulseQueryQueue(true);\n      cb();\n    });\n  });\n};\nClient.prototype.connect = function (callback) {\n  if (callback) {\n    this._connect(callback);\n    return;\n  }\n  return new this._Promise((resolve, reject) => {\n    this._connect(error => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n\n// send a query to the server\n// this method is highly overloaded to take\n// 1) string query, optional array of parameters, optional function callback\n// 2) object query with {\n//    string query\n//    optional array values,\n//    optional function callback instead of as a separate parameter\n//    optional string name to name & cache the query plan\n//    optional string rowMode = 'array' for an array of results\n//  }\nClient.prototype.query = function (config, values, callback) {\n  var query;\n  var result;\n  var readTimeout;\n  var readTimeoutTimer;\n  var queryCallback;\n  if (config === null || config === undefined) {\n    throw new TypeError('Client was passed a null or undefined query');\n  } else if (typeof config.submit === 'function') {\n    readTimeout = config.query_timeout || this.connectionParameters.query_timeout;\n    result = query = config;\n    // accept query(new Query(...), (err, res) => { }) style\n    if (typeof values === 'function') {\n      config.callback = values;\n    }\n  } else {\n    readTimeout = this.connectionParameters.query_timeout;\n    query = new NativeQuery(config, values, callback);\n    if (!query.callback) {\n      let resolveOut, rejectOut;\n      result = new this._Promise((resolve, reject) => {\n        resolveOut = resolve;\n        rejectOut = reject;\n      });\n      query.callback = (err, res) => err ? rejectOut(err) : resolveOut(res);\n    }\n  }\n  if (readTimeout) {\n    queryCallback = query.callback;\n    readTimeoutTimer = setTimeout(() => {\n      var error = new Error('Query read timeout');\n      process.nextTick(() => {\n        query.handleError(error, this.connection);\n      });\n      queryCallback(error);\n\n      // we already returned an error,\n      // just do nothing if query completes\n      query.callback = () => {};\n\n      // Remove from queue\n      var index = this._queryQueue.indexOf(query);\n      if (index > -1) {\n        this._queryQueue.splice(index, 1);\n      }\n      this._pulseQueryQueue();\n    }, readTimeout);\n    query.callback = (err, res) => {\n      clearTimeout(readTimeoutTimer);\n      queryCallback(err, res);\n    };\n  }\n  if (!this._queryable) {\n    query.native = this.native;\n    process.nextTick(() => {\n      query.handleError(new Error('Client has encountered a connection error and is not queryable'));\n    });\n    return result;\n  }\n  if (this._ending) {\n    query.native = this.native;\n    process.nextTick(() => {\n      query.handleError(new Error('Client was closed and is not queryable'));\n    });\n    return result;\n  }\n  this._queryQueue.push(query);\n  this._pulseQueryQueue();\n  return result;\n};\n\n// disconnect from the backend server\nClient.prototype.end = function (cb) {\n  var self = this;\n  this._ending = true;\n  if (!this._connected) {\n    this.once('connect', this.end.bind(this, cb));\n  }\n  var result;\n  if (!cb) {\n    result = new this._Promise(function (resolve, reject) {\n      cb = err => err ? reject(err) : resolve();\n    });\n  }\n  this.native.end(function () {\n    self._errorAllQueries(new Error('Connection terminated'));\n    process.nextTick(() => {\n      self.emit('end');\n      if (cb) cb();\n    });\n  });\n  return result;\n};\nClient.prototype._hasActiveQuery = function () {\n  return this._activeQuery && this._activeQuery.state !== 'error' && this._activeQuery.state !== 'end';\n};\nClient.prototype._pulseQueryQueue = function (initialConnection) {\n  if (!this._connected) {\n    return;\n  }\n  if (this._hasActiveQuery()) {\n    return;\n  }\n  var query = this._queryQueue.shift();\n  if (!query) {\n    if (!initialConnection) {\n      this.emit('drain');\n    }\n    return;\n  }\n  this._activeQuery = query;\n  query.submit(this);\n  var self = this;\n  query.once('_done', function () {\n    self._pulseQueryQueue();\n  });\n};\n\n// attempt to cancel an in-progress query\nClient.prototype.cancel = function (query) {\n  if (this._activeQuery === query) {\n    this.native.cancel(function () {});\n  } else if (this._queryQueue.indexOf(query) !== -1) {\n    this._queryQueue.splice(this._queryQueue.indexOf(query), 1);\n  }\n};\nClient.prototype.ref = function () {};\nClient.prototype.unref = function () {};\nClient.prototype.setTypeParser = function (oid, format, parseFn) {\n  return this._types.setTypeParser(oid, format, parseFn);\n};\nClient.prototype.getTypeParser = function (oid, format) {\n  return this._types.getTypeParser(oid, format);\n};","map":{"version":3,"names":["Native","require","TypeOverrides","EventEmitter","util","ConnectionParameters","NativeQuery","Client","module","exports","config","call","_Promise","Promise","global","_types","types","native","_queryQueue","_ending","_connecting","_connected","_queryable","cp","connectionParameters","user","Object","defineProperty","configurable","enumerable","writable","value","password","database","host","port","namedQueries","Query","inherits","prototype","_errorAllQueries","err","enqueueError","query","process","nextTick","handleError","_hasActiveQuery","_activeQuery","forEach","length","_connect","cb","self","Error","getLibpqConnectionString","conString","connect","end","on","emit","msg","channel","relname","payload","extra","_pulseQueryQueue","callback","resolve","reject","error","values","result","readTimeout","readTimeoutTimer","queryCallback","undefined","TypeError","submit","query_timeout","resolveOut","rejectOut","res","setTimeout","connection","index","indexOf","splice","clearTimeout","push","once","bind","state","initialConnection","shift","cancel","ref","unref","setTypeParser","oid","format","parseFn","getTypeParser"],"sources":["C:/Users/Kamen/ML/AlgoTrader/node_modules/pg/lib/native/client.js"],"sourcesContent":["'use strict'\n\n// eslint-disable-next-line\nvar Native = require('pg-native')\nvar TypeOverrides = require('../type-overrides')\nvar EventEmitter = require('events').EventEmitter\nvar util = require('util')\nvar ConnectionParameters = require('../connection-parameters')\n\nvar NativeQuery = require('./query')\n\nvar Client = (module.exports = function (config) {\n  EventEmitter.call(this)\n  config = config || {}\n\n  this._Promise = config.Promise || global.Promise\n  this._types = new TypeOverrides(config.types)\n\n  this.native = new Native({\n    types: this._types,\n  })\n\n  this._queryQueue = []\n  this._ending = false\n  this._connecting = false\n  this._connected = false\n  this._queryable = true\n\n  // keep these on the object for legacy reasons\n  // for the time being. TODO: deprecate all this jazz\n  var cp = (this.connectionParameters = new ConnectionParameters(config))\n  this.user = cp.user\n\n  // \"hiding\" the password so it doesn't show up in stack traces\n  // or if the client is console.logged\n  Object.defineProperty(this, 'password', {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value: cp.password,\n  })\n  this.database = cp.database\n  this.host = cp.host\n  this.port = cp.port\n\n  // a hash to hold named queries\n  this.namedQueries = {}\n})\n\nClient.Query = NativeQuery\n\nutil.inherits(Client, EventEmitter)\n\nClient.prototype._errorAllQueries = function (err) {\n  const enqueueError = (query) => {\n    process.nextTick(() => {\n      query.native = this.native\n      query.handleError(err)\n    })\n  }\n\n  if (this._hasActiveQuery()) {\n    enqueueError(this._activeQuery)\n    this._activeQuery = null\n  }\n\n  this._queryQueue.forEach(enqueueError)\n  this._queryQueue.length = 0\n}\n\n// connect to the backend\n// pass an optional callback to be called once connected\n// or with an error if there was a connection error\nClient.prototype._connect = function (cb) {\n  var self = this\n\n  if (this._connecting) {\n    process.nextTick(() => cb(new Error('Client has already been connected. You cannot reuse a client.')))\n    return\n  }\n\n  this._connecting = true\n\n  this.connectionParameters.getLibpqConnectionString(function (err, conString) {\n    if (err) return cb(err)\n    self.native.connect(conString, function (err) {\n      if (err) {\n        self.native.end()\n        return cb(err)\n      }\n\n      // set internal states to connected\n      self._connected = true\n\n      // handle connection errors from the native layer\n      self.native.on('error', function (err) {\n        self._queryable = false\n        self._errorAllQueries(err)\n        self.emit('error', err)\n      })\n\n      self.native.on('notification', function (msg) {\n        self.emit('notification', {\n          channel: msg.relname,\n          payload: msg.extra,\n        })\n      })\n\n      // signal we are connected now\n      self.emit('connect')\n      self._pulseQueryQueue(true)\n\n      cb()\n    })\n  })\n}\n\nClient.prototype.connect = function (callback) {\n  if (callback) {\n    this._connect(callback)\n    return\n  }\n\n  return new this._Promise((resolve, reject) => {\n    this._connect((error) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve()\n      }\n    })\n  })\n}\n\n// send a query to the server\n// this method is highly overloaded to take\n// 1) string query, optional array of parameters, optional function callback\n// 2) object query with {\n//    string query\n//    optional array values,\n//    optional function callback instead of as a separate parameter\n//    optional string name to name & cache the query plan\n//    optional string rowMode = 'array' for an array of results\n//  }\nClient.prototype.query = function (config, values, callback) {\n  var query\n  var result\n  var readTimeout\n  var readTimeoutTimer\n  var queryCallback\n\n  if (config === null || config === undefined) {\n    throw new TypeError('Client was passed a null or undefined query')\n  } else if (typeof config.submit === 'function') {\n    readTimeout = config.query_timeout || this.connectionParameters.query_timeout\n    result = query = config\n    // accept query(new Query(...), (err, res) => { }) style\n    if (typeof values === 'function') {\n      config.callback = values\n    }\n  } else {\n    readTimeout = this.connectionParameters.query_timeout\n    query = new NativeQuery(config, values, callback)\n    if (!query.callback) {\n      let resolveOut, rejectOut\n      result = new this._Promise((resolve, reject) => {\n        resolveOut = resolve\n        rejectOut = reject\n      })\n      query.callback = (err, res) => (err ? rejectOut(err) : resolveOut(res))\n    }\n  }\n\n  if (readTimeout) {\n    queryCallback = query.callback\n\n    readTimeoutTimer = setTimeout(() => {\n      var error = new Error('Query read timeout')\n\n      process.nextTick(() => {\n        query.handleError(error, this.connection)\n      })\n\n      queryCallback(error)\n\n      // we already returned an error,\n      // just do nothing if query completes\n      query.callback = () => {}\n\n      // Remove from queue\n      var index = this._queryQueue.indexOf(query)\n      if (index > -1) {\n        this._queryQueue.splice(index, 1)\n      }\n\n      this._pulseQueryQueue()\n    }, readTimeout)\n\n    query.callback = (err, res) => {\n      clearTimeout(readTimeoutTimer)\n      queryCallback(err, res)\n    }\n  }\n\n  if (!this._queryable) {\n    query.native = this.native\n    process.nextTick(() => {\n      query.handleError(new Error('Client has encountered a connection error and is not queryable'))\n    })\n    return result\n  }\n\n  if (this._ending) {\n    query.native = this.native\n    process.nextTick(() => {\n      query.handleError(new Error('Client was closed and is not queryable'))\n    })\n    return result\n  }\n\n  this._queryQueue.push(query)\n  this._pulseQueryQueue()\n  return result\n}\n\n// disconnect from the backend server\nClient.prototype.end = function (cb) {\n  var self = this\n\n  this._ending = true\n\n  if (!this._connected) {\n    this.once('connect', this.end.bind(this, cb))\n  }\n  var result\n  if (!cb) {\n    result = new this._Promise(function (resolve, reject) {\n      cb = (err) => (err ? reject(err) : resolve())\n    })\n  }\n  this.native.end(function () {\n    self._errorAllQueries(new Error('Connection terminated'))\n\n    process.nextTick(() => {\n      self.emit('end')\n      if (cb) cb()\n    })\n  })\n  return result\n}\n\nClient.prototype._hasActiveQuery = function () {\n  return this._activeQuery && this._activeQuery.state !== 'error' && this._activeQuery.state !== 'end'\n}\n\nClient.prototype._pulseQueryQueue = function (initialConnection) {\n  if (!this._connected) {\n    return\n  }\n  if (this._hasActiveQuery()) {\n    return\n  }\n  var query = this._queryQueue.shift()\n  if (!query) {\n    if (!initialConnection) {\n      this.emit('drain')\n    }\n    return\n  }\n  this._activeQuery = query\n  query.submit(this)\n  var self = this\n  query.once('_done', function () {\n    self._pulseQueryQueue()\n  })\n}\n\n// attempt to cancel an in-progress query\nClient.prototype.cancel = function (query) {\n  if (this._activeQuery === query) {\n    this.native.cancel(function () {})\n  } else if (this._queryQueue.indexOf(query) !== -1) {\n    this._queryQueue.splice(this._queryQueue.indexOf(query), 1)\n  }\n}\n\nClient.prototype.ref = function () {}\nClient.prototype.unref = function () {}\n\nClient.prototype.setTypeParser = function (oid, format, parseFn) {\n  return this._types.setTypeParser(oid, format, parseFn)\n}\n\nClient.prototype.getTypeParser = function (oid, format) {\n  return this._types.getTypeParser(oid, format)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}