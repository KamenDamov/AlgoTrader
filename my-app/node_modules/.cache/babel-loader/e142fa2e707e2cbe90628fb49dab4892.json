{"ast":null,"code":"'use strict';\n\nconst log = require('npmlog');\n\nconst semver = require('semver');\n\nconst cp = require('child_process');\n\nconst extend = require('util')._extend; // eslint-disable-line\n\n\nconst win = process.platform === 'win32';\n\nconst logWithPrefix = require('./util').logWithPrefix;\n\nconst systemDrive = process.env.SystemDrive || 'C:';\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo();\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`;\nconst foundLocalAppData = process.env.LOCALAPPDATA || username;\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`;\nconst programFilesX86 = process.env['ProgramFiles(x86)'] || `${programFiles} (x86)`;\nconst winDefaultLocationsArray = [];\n\nfor (const majorMinor of ['39', '38', '37', '36']) {\n  if (foundLocalAppData) {\n    winDefaultLocationsArray.push(`${localAppData}\\\\Programs\\\\Python\\\\Python${majorMinor}\\\\python.exe`, `${programFiles}\\\\Python${majorMinor}\\\\python.exe`, `${localAppData}\\\\Programs\\\\Python\\\\Python${majorMinor}-32\\\\python.exe`, `${programFiles}\\\\Python${majorMinor}-32\\\\python.exe`, `${programFilesX86}\\\\Python${majorMinor}-32\\\\python.exe`);\n  } else {\n    winDefaultLocationsArray.push(`${programFiles}\\\\Python${majorMinor}\\\\python.exe`, `${programFiles}\\\\Python${majorMinor}-32\\\\python.exe`, `${programFilesX86}\\\\Python${majorMinor}-32\\\\python.exe`);\n  }\n}\n\nfunction getOsUserInfo() {\n  try {\n    return require('os').userInfo().username;\n  } catch (e) {}\n}\n\nfunction PythonFinder(configPython, callback) {\n  this.callback = callback;\n  this.configPython = configPython;\n  this.errorLog = [];\n}\n\nPythonFinder.prototype = {\n  log: logWithPrefix(log, 'find Python'),\n  argsExecutable: ['-c', 'import sys; print(sys.executable);'],\n  argsVersion: ['-c', 'import sys; print(\"%s.%s.%s\" % sys.version_info[:3]);'],\n  semverRange: '>=3.6.0',\n  // These can be overridden for testing:\n  execFile: cp.execFile,\n  env: process.env,\n  win: win,\n  pyLauncher: 'py.exe',\n  winDefaultLocations: winDefaultLocationsArray,\n  // Logs a message at verbose level, but also saves it to be displayed later\n  // at error level if an error occurs. This should help diagnose the problem.\n  addLog: function addLog(message) {\n    this.log.verbose(message);\n    this.errorLog.push(message);\n  },\n  // Find Python by trying a sequence of possibilities.\n  // Ignore errors, keep trying until Python is found.\n  findPython: function findPython() {\n    const SKIP = 0;\n    const FAIL = 1;\n    var toCheck = getChecks.apply(this);\n\n    function getChecks() {\n      if (this.env.NODE_GYP_FORCE_PYTHON) {\n        return [{\n          before: () => {\n            this.addLog('checking Python explicitly set from NODE_GYP_FORCE_PYTHON');\n            this.addLog('- process.env.NODE_GYP_FORCE_PYTHON is ' + `\"${this.env.NODE_GYP_FORCE_PYTHON}\"`);\n          },\n          check: this.checkCommand,\n          arg: this.env.NODE_GYP_FORCE_PYTHON\n        }];\n      }\n\n      var checks = [{\n        before: () => {\n          if (!this.configPython) {\n            this.addLog('Python is not set from command line or npm configuration');\n            return SKIP;\n          }\n\n          this.addLog('checking Python explicitly set from command line or ' + 'npm configuration');\n          this.addLog('- \"--python=\" or \"npm config get python\" is ' + `\"${this.configPython}\"`);\n        },\n        check: this.checkCommand,\n        arg: this.configPython\n      }, {\n        before: () => {\n          if (!this.env.PYTHON) {\n            this.addLog('Python is not set from environment variable ' + 'PYTHON');\n            return SKIP;\n          }\n\n          this.addLog('checking Python explicitly set from environment ' + 'variable PYTHON');\n          this.addLog(`- process.env.PYTHON is \"${this.env.PYTHON}\"`);\n        },\n        check: this.checkCommand,\n        arg: this.env.PYTHON\n      }, {\n        before: () => {\n          this.addLog('checking if \"python3\" can be used');\n        },\n        check: this.checkCommand,\n        arg: 'python3'\n      }, {\n        before: () => {\n          this.addLog('checking if \"python\" can be used');\n        },\n        check: this.checkCommand,\n        arg: 'python'\n      }];\n\n      if (this.win) {\n        for (var i = 0; i < this.winDefaultLocations.length; ++i) {\n          const location = this.winDefaultLocations[i];\n          checks.push({\n            before: () => {\n              this.addLog('checking if Python is ' + `${location}`);\n            },\n            check: this.checkExecPath,\n            arg: location\n          });\n        }\n\n        checks.push({\n          before: () => {\n            this.addLog('checking if the py launcher can be used to find Python 3');\n          },\n          check: this.checkPyLauncher\n        });\n      }\n\n      return checks;\n    }\n\n    function runChecks(err) {\n      this.log.silly('runChecks: err = %j', err && err.stack || err);\n      const check = toCheck.shift();\n\n      if (!check) {\n        return this.fail();\n      }\n\n      const before = check.before.apply(this);\n\n      if (before === SKIP) {\n        return runChecks.apply(this);\n      }\n\n      if (before === FAIL) {\n        return this.fail();\n      }\n\n      const args = [runChecks.bind(this)];\n\n      if (check.arg) {\n        args.unshift(check.arg);\n      }\n\n      check.check.apply(this, args);\n    }\n\n    runChecks.apply(this);\n  },\n  // Check if command is a valid Python to use.\n  // Will exit the Python finder on success.\n  // If on Windows, run in a CMD shell to support BAT/CMD launchers.\n  checkCommand: function checkCommand(command, errorCallback) {\n    var exec = command;\n    var args = this.argsExecutable;\n    var shell = false;\n\n    if (this.win) {\n      // Arguments have to be manually quoted\n      exec = `\"${exec}\"`;\n      args = args.map(a => `\"${a}\"`);\n      shell = true;\n    }\n\n    this.log.verbose(`- executing \"${command}\" to get executable path`);\n    this.run(exec, args, shell, function (err, execPath) {\n      // Possible outcomes:\n      // - Error: not in PATH, not executable or execution fails\n      // - Gibberish: the next command to check version will fail\n      // - Absolute path to executable\n      if (err) {\n        this.addLog(`- \"${command}\" is not in PATH or produced an error`);\n        return errorCallback(err);\n      }\n\n      this.addLog(`- executable path is \"${execPath}\"`);\n      this.checkExecPath(execPath, errorCallback);\n    }.bind(this));\n  },\n  // Check if the py launcher can find a valid Python to use.\n  // Will exit the Python finder on success.\n  // Distributions of Python on Windows by default install with the \"py.exe\"\n  // Python launcher which is more likely to exist than the Python executable\n  // being in the $PATH.\n  // Because the Python launcher supports Python 2 and Python 3, we should\n  // explicitly request a Python 3 version. This is done by supplying \"-3\" as\n  // the first command line argument. Since \"py.exe -3\" would be an invalid\n  // executable for \"execFile\", we have to use the launcher to figure out\n  // where the actual \"python.exe\" executable is located.\n  checkPyLauncher: function checkPyLauncher(errorCallback) {\n    this.log.verbose(`- executing \"${this.pyLauncher}\" to get Python 3 executable path`);\n    this.run(this.pyLauncher, ['-3', ...this.argsExecutable], false, function (err, execPath) {\n      // Possible outcomes: same as checkCommand\n      if (err) {\n        this.addLog(`- \"${this.pyLauncher}\" is not in PATH or produced an error`);\n        return errorCallback(err);\n      }\n\n      this.addLog(`- executable path is \"${execPath}\"`);\n      this.checkExecPath(execPath, errorCallback);\n    }.bind(this));\n  },\n  // Check if a Python executable is the correct version to use.\n  // Will exit the Python finder on success.\n  checkExecPath: function checkExecPath(execPath, errorCallback) {\n    this.log.verbose(`- executing \"${execPath}\" to get version`);\n    this.run(execPath, this.argsVersion, false, function (err, version) {\n      // Possible outcomes:\n      // - Error: executable can not be run (likely meaning the command wasn't\n      //   a Python executable and the previous command produced gibberish)\n      // - Gibberish: somehow the last command produced an executable path,\n      //   this will fail when verifying the version\n      // - Version of the Python executable\n      if (err) {\n        this.addLog(`- \"${execPath}\" could not be run`);\n        return errorCallback(err);\n      }\n\n      this.addLog(`- version is \"${version}\"`);\n      const range = new semver.Range(this.semverRange);\n      var valid = false;\n\n      try {\n        valid = range.test(version);\n      } catch (err) {\n        this.log.silly('range.test() threw:\\n%s', err.stack);\n        this.addLog(`- \"${execPath}\" does not have a valid version`);\n        this.addLog('- is it a Python executable?');\n        return errorCallback(err);\n      }\n\n      if (!valid) {\n        this.addLog(`- version is ${version} - should be ${this.semverRange}`);\n        this.addLog('- THIS VERSION OF PYTHON IS NOT SUPPORTED');\n        return errorCallback(new Error(`Found unsupported Python version ${version}`));\n      }\n\n      this.succeed(execPath, version);\n    }.bind(this));\n  },\n  // Run an executable or shell command, trimming the output.\n  run: function run(exec, args, shell, callback) {\n    var env = extend({}, this.env);\n    env.TERM = 'dumb';\n    const opts = {\n      env: env,\n      shell: shell\n    };\n    this.log.silly('execFile: exec = %j', exec);\n    this.log.silly('execFile: args = %j', args);\n    this.log.silly('execFile: opts = %j', opts);\n\n    try {\n      this.execFile(exec, args, opts, execFileCallback.bind(this));\n    } catch (err) {\n      this.log.silly('execFile: threw:\\n%s', err.stack);\n      return callback(err);\n    }\n\n    function execFileCallback(err, stdout, stderr) {\n      this.log.silly('execFile result: err = %j', err && err.stack || err);\n      this.log.silly('execFile result: stdout = %j', stdout);\n      this.log.silly('execFile result: stderr = %j', stderr);\n\n      if (err) {\n        return callback(err);\n      }\n\n      const execPath = stdout.trim();\n      callback(null, execPath);\n    }\n  },\n  succeed: function succeed(execPath, version) {\n    this.log.info(`using Python version ${version} found at \"${execPath}\"`);\n    process.nextTick(this.callback.bind(null, null, execPath));\n  },\n  fail: function fail() {\n    const errorLog = this.errorLog.join('\\n');\n    const pathExample = this.win ? 'C:\\\\Path\\\\To\\\\python.exe' : '/path/to/pythonexecutable'; // For Windows 80 col console, use up to the column before the one marked\n    // with X (total 79 chars including logger prefix, 58 chars usable here):\n    //                                                           X\n\n    const info = ['**********************************************************', 'You need to install the latest version of Python.', 'Node-gyp should be able to find and use Python. If not,', 'you can try one of the following options:', `- Use the switch --python=\"${pathExample}\"`, '  (accepted by both node-gyp and npm)', '- Set the environment variable PYTHON', '- Set the npm configuration variable python:', `  npm config set python \"${pathExample}\"`, 'For more information consult the documentation at:', 'https://github.com/nodejs/node-gyp#installation', '**********************************************************'].join('\\n');\n    this.log.error(`\\n${errorLog}\\n\\n${info}\\n`);\n    process.nextTick(this.callback.bind(null, new Error('Could not find any Python installation to use')));\n  }\n};\n\nfunction findPython(configPython, callback) {\n  var finder = new PythonFinder(configPython, callback);\n  finder.findPython();\n}\n\nmodule.exports = findPython;\nmodule.exports.test = {\n  PythonFinder: PythonFinder,\n  findPython: findPython\n};","map":{"version":3,"names":["log","require","semver","cp","extend","_extend","win","process","platform","logWithPrefix","systemDrive","env","SystemDrive","username","USERNAME","USER","getOsUserInfo","localAppData","LOCALAPPDATA","foundLocalAppData","programFiles","ProgramW6432","ProgramFiles","programFilesX86","winDefaultLocationsArray","majorMinor","push","userInfo","e","PythonFinder","configPython","callback","errorLog","prototype","argsExecutable","argsVersion","semverRange","execFile","pyLauncher","winDefaultLocations","addLog","message","verbose","findPython","SKIP","FAIL","toCheck","getChecks","apply","NODE_GYP_FORCE_PYTHON","before","check","checkCommand","arg","checks","PYTHON","i","length","location","checkExecPath","checkPyLauncher","runChecks","err","silly","stack","shift","fail","args","bind","unshift","command","errorCallback","exec","shell","map","a","run","execPath","version","range","Range","valid","test","Error","succeed","TERM","opts","execFileCallback","stdout","stderr","trim","info","nextTick","join","pathExample","error","finder","module","exports"],"sources":["C:/Users/Kamen/ML/AlgoTrader/node_modules/node-gyp/lib/find-python.js"],"sourcesContent":["'use strict'\n\nconst log = require('npmlog')\nconst semver = require('semver')\nconst cp = require('child_process')\nconst extend = require('util')._extend // eslint-disable-line\nconst win = process.platform === 'win32'\nconst logWithPrefix = require('./util').logWithPrefix\n\nconst systemDrive = process.env.SystemDrive || 'C:'\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\nconst programFilesX86 = process.env['ProgramFiles(x86)'] || `${programFiles} (x86)`\n\nconst winDefaultLocationsArray = []\nfor (const majorMinor of ['39', '38', '37', '36']) {\n  if (foundLocalAppData) {\n    winDefaultLocationsArray.push(\n      `${localAppData}\\\\Programs\\\\Python\\\\Python${majorMinor}\\\\python.exe`,\n      `${programFiles}\\\\Python${majorMinor}\\\\python.exe`,\n      `${localAppData}\\\\Programs\\\\Python\\\\Python${majorMinor}-32\\\\python.exe`,\n      `${programFiles}\\\\Python${majorMinor}-32\\\\python.exe`,\n      `${programFilesX86}\\\\Python${majorMinor}-32\\\\python.exe`\n    )\n  } else {\n    winDefaultLocationsArray.push(\n      `${programFiles}\\\\Python${majorMinor}\\\\python.exe`,\n      `${programFiles}\\\\Python${majorMinor}-32\\\\python.exe`,\n      `${programFilesX86}\\\\Python${majorMinor}-32\\\\python.exe`\n    )\n  }\n}\n\nfunction getOsUserInfo () {\n  try {\n    return require('os').userInfo().username\n  } catch (e) {}\n}\n\nfunction PythonFinder (configPython, callback) {\n  this.callback = callback\n  this.configPython = configPython\n  this.errorLog = []\n}\n\nPythonFinder.prototype = {\n  log: logWithPrefix(log, 'find Python'),\n  argsExecutable: ['-c', 'import sys; print(sys.executable);'],\n  argsVersion: ['-c', 'import sys; print(\"%s.%s.%s\" % sys.version_info[:3]);'],\n  semverRange: '>=3.6.0',\n\n  // These can be overridden for testing:\n  execFile: cp.execFile,\n  env: process.env,\n  win: win,\n  pyLauncher: 'py.exe',\n  winDefaultLocations: winDefaultLocationsArray,\n\n  // Logs a message at verbose level, but also saves it to be displayed later\n  // at error level if an error occurs. This should help diagnose the problem.\n  addLog: function addLog (message) {\n    this.log.verbose(message)\n    this.errorLog.push(message)\n  },\n\n  // Find Python by trying a sequence of possibilities.\n  // Ignore errors, keep trying until Python is found.\n  findPython: function findPython () {\n    const SKIP = 0; const FAIL = 1\n    var toCheck = getChecks.apply(this)\n\n    function getChecks () {\n      if (this.env.NODE_GYP_FORCE_PYTHON) {\n        return [{\n          before: () => {\n            this.addLog(\n              'checking Python explicitly set from NODE_GYP_FORCE_PYTHON')\n            this.addLog('- process.env.NODE_GYP_FORCE_PYTHON is ' +\n              `\"${this.env.NODE_GYP_FORCE_PYTHON}\"`)\n          },\n          check: this.checkCommand,\n          arg: this.env.NODE_GYP_FORCE_PYTHON\n        }]\n      }\n\n      var checks = [\n        {\n          before: () => {\n            if (!this.configPython) {\n              this.addLog(\n                'Python is not set from command line or npm configuration')\n              return SKIP\n            }\n            this.addLog('checking Python explicitly set from command line or ' +\n              'npm configuration')\n            this.addLog('- \"--python=\" or \"npm config get python\" is ' +\n              `\"${this.configPython}\"`)\n          },\n          check: this.checkCommand,\n          arg: this.configPython\n        },\n        {\n          before: () => {\n            if (!this.env.PYTHON) {\n              this.addLog('Python is not set from environment variable ' +\n                'PYTHON')\n              return SKIP\n            }\n            this.addLog('checking Python explicitly set from environment ' +\n              'variable PYTHON')\n            this.addLog(`- process.env.PYTHON is \"${this.env.PYTHON}\"`)\n          },\n          check: this.checkCommand,\n          arg: this.env.PYTHON\n        },\n        {\n          before: () => { this.addLog('checking if \"python3\" can be used') },\n          check: this.checkCommand,\n          arg: 'python3'\n        },\n        {\n          before: () => { this.addLog('checking if \"python\" can be used') },\n          check: this.checkCommand,\n          arg: 'python'\n        }\n      ]\n\n      if (this.win) {\n        for (var i = 0; i < this.winDefaultLocations.length; ++i) {\n          const location = this.winDefaultLocations[i]\n          checks.push({\n            before: () => {\n              this.addLog('checking if Python is ' +\n                `${location}`)\n            },\n            check: this.checkExecPath,\n            arg: location\n          })\n        }\n        checks.push({\n          before: () => {\n            this.addLog(\n              'checking if the py launcher can be used to find Python 3')\n          },\n          check: this.checkPyLauncher\n        })\n      }\n\n      return checks\n    }\n\n    function runChecks (err) {\n      this.log.silly('runChecks: err = %j', (err && err.stack) || err)\n\n      const check = toCheck.shift()\n      if (!check) {\n        return this.fail()\n      }\n\n      const before = check.before.apply(this)\n      if (before === SKIP) {\n        return runChecks.apply(this)\n      }\n      if (before === FAIL) {\n        return this.fail()\n      }\n\n      const args = [runChecks.bind(this)]\n      if (check.arg) {\n        args.unshift(check.arg)\n      }\n      check.check.apply(this, args)\n    }\n\n    runChecks.apply(this)\n  },\n\n  // Check if command is a valid Python to use.\n  // Will exit the Python finder on success.\n  // If on Windows, run in a CMD shell to support BAT/CMD launchers.\n  checkCommand: function checkCommand (command, errorCallback) {\n    var exec = command\n    var args = this.argsExecutable\n    var shell = false\n    if (this.win) {\n      // Arguments have to be manually quoted\n      exec = `\"${exec}\"`\n      args = args.map(a => `\"${a}\"`)\n      shell = true\n    }\n\n    this.log.verbose(`- executing \"${command}\" to get executable path`)\n    this.run(exec, args, shell, function (err, execPath) {\n      // Possible outcomes:\n      // - Error: not in PATH, not executable or execution fails\n      // - Gibberish: the next command to check version will fail\n      // - Absolute path to executable\n      if (err) {\n        this.addLog(`- \"${command}\" is not in PATH or produced an error`)\n        return errorCallback(err)\n      }\n      this.addLog(`- executable path is \"${execPath}\"`)\n      this.checkExecPath(execPath, errorCallback)\n    }.bind(this))\n  },\n\n  // Check if the py launcher can find a valid Python to use.\n  // Will exit the Python finder on success.\n  // Distributions of Python on Windows by default install with the \"py.exe\"\n  // Python launcher which is more likely to exist than the Python executable\n  // being in the $PATH.\n  // Because the Python launcher supports Python 2 and Python 3, we should\n  // explicitly request a Python 3 version. This is done by supplying \"-3\" as\n  // the first command line argument. Since \"py.exe -3\" would be an invalid\n  // executable for \"execFile\", we have to use the launcher to figure out\n  // where the actual \"python.exe\" executable is located.\n  checkPyLauncher: function checkPyLauncher (errorCallback) {\n    this.log.verbose(\n      `- executing \"${this.pyLauncher}\" to get Python 3 executable path`)\n    this.run(this.pyLauncher, ['-3', ...this.argsExecutable], false,\n      function (err, execPath) {\n      // Possible outcomes: same as checkCommand\n        if (err) {\n          this.addLog(\n            `- \"${this.pyLauncher}\" is not in PATH or produced an error`)\n          return errorCallback(err)\n        }\n        this.addLog(`- executable path is \"${execPath}\"`)\n        this.checkExecPath(execPath, errorCallback)\n      }.bind(this))\n  },\n\n  // Check if a Python executable is the correct version to use.\n  // Will exit the Python finder on success.\n  checkExecPath: function checkExecPath (execPath, errorCallback) {\n    this.log.verbose(`- executing \"${execPath}\" to get version`)\n    this.run(execPath, this.argsVersion, false, function (err, version) {\n      // Possible outcomes:\n      // - Error: executable can not be run (likely meaning the command wasn't\n      //   a Python executable and the previous command produced gibberish)\n      // - Gibberish: somehow the last command produced an executable path,\n      //   this will fail when verifying the version\n      // - Version of the Python executable\n      if (err) {\n        this.addLog(`- \"${execPath}\" could not be run`)\n        return errorCallback(err)\n      }\n      this.addLog(`- version is \"${version}\"`)\n\n      const range = new semver.Range(this.semverRange)\n      var valid = false\n      try {\n        valid = range.test(version)\n      } catch (err) {\n        this.log.silly('range.test() threw:\\n%s', err.stack)\n        this.addLog(`- \"${execPath}\" does not have a valid version`)\n        this.addLog('- is it a Python executable?')\n        return errorCallback(err)\n      }\n\n      if (!valid) {\n        this.addLog(`- version is ${version} - should be ${this.semverRange}`)\n        this.addLog('- THIS VERSION OF PYTHON IS NOT SUPPORTED')\n        return errorCallback(new Error(\n          `Found unsupported Python version ${version}`))\n      }\n      this.succeed(execPath, version)\n    }.bind(this))\n  },\n\n  // Run an executable or shell command, trimming the output.\n  run: function run (exec, args, shell, callback) {\n    var env = extend({}, this.env)\n    env.TERM = 'dumb'\n    const opts = { env: env, shell: shell }\n\n    this.log.silly('execFile: exec = %j', exec)\n    this.log.silly('execFile: args = %j', args)\n    this.log.silly('execFile: opts = %j', opts)\n    try {\n      this.execFile(exec, args, opts, execFileCallback.bind(this))\n    } catch (err) {\n      this.log.silly('execFile: threw:\\n%s', err.stack)\n      return callback(err)\n    }\n\n    function execFileCallback (err, stdout, stderr) {\n      this.log.silly('execFile result: err = %j', (err && err.stack) || err)\n      this.log.silly('execFile result: stdout = %j', stdout)\n      this.log.silly('execFile result: stderr = %j', stderr)\n      if (err) {\n        return callback(err)\n      }\n      const execPath = stdout.trim()\n      callback(null, execPath)\n    }\n  },\n\n  succeed: function succeed (execPath, version) {\n    this.log.info(`using Python version ${version} found at \"${execPath}\"`)\n    process.nextTick(this.callback.bind(null, null, execPath))\n  },\n\n  fail: function fail () {\n    const errorLog = this.errorLog.join('\\n')\n\n    const pathExample = this.win ? 'C:\\\\Path\\\\To\\\\python.exe'\n      : '/path/to/pythonexecutable'\n    // For Windows 80 col console, use up to the column before the one marked\n    // with X (total 79 chars including logger prefix, 58 chars usable here):\n    //                                                           X\n    const info = [\n      '**********************************************************',\n      'You need to install the latest version of Python.',\n      'Node-gyp should be able to find and use Python. If not,',\n      'you can try one of the following options:',\n      `- Use the switch --python=\"${pathExample}\"`,\n      '  (accepted by both node-gyp and npm)',\n      '- Set the environment variable PYTHON',\n      '- Set the npm configuration variable python:',\n      `  npm config set python \"${pathExample}\"`,\n      'For more information consult the documentation at:',\n      'https://github.com/nodejs/node-gyp#installation',\n      '**********************************************************'\n    ].join('\\n')\n\n    this.log.error(`\\n${errorLog}\\n\\n${info}\\n`)\n    process.nextTick(this.callback.bind(null, new Error(\n      'Could not find any Python installation to use')))\n  }\n}\n\nfunction findPython (configPython, callback) {\n  var finder = new PythonFinder(configPython, callback)\n  finder.findPython()\n}\n\nmodule.exports = findPython\nmodule.exports.test = {\n  PythonFinder: PythonFinder,\n  findPython: findPython\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}