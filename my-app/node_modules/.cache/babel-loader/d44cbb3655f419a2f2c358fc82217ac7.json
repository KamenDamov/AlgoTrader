{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst util = require('util');\n\nconst chmod = util.promisify(fs.chmod);\nconst unlink = util.promisify(fs.unlink);\nconst stat = util.promisify(fs.stat);\n\nconst move = require('@npmcli/move-file');\n\nconst pinflight = require('promise-inflight');\n\nmodule.exports = moveFile;\n\nfunction moveFile(src, dest) {\n  const isWindows = global.__CACACHE_TEST_FAKE_WINDOWS__ || process.platform === 'win32'; // This isn't quite an fs.rename -- the assumption is that\n  // if `dest` already exists, and we get certain errors while\n  // trying to move it, we should just not bother.\n  //\n  // In the case of cache corruption, users will receive an\n  // EINTEGRITY error elsewhere, and can remove the offending\n  // content their own way.\n  //\n  // Note that, as the name suggests, this strictly only supports file moves.\n\n  return new Promise((resolve, reject) => {\n    fs.link(src, dest, err => {\n      if (err) {\n        if (isWindows && err.code === 'EPERM') {\n          // XXX This is a really weird way to handle this situation, as it\n          // results in the src file being deleted even though the dest\n          // might not exist.  Since we pretty much always write files to\n          // deterministic locations based on content hash, this is likely\n          // ok (or at worst, just ends in a future cache miss).  But it would\n          // be worth investigating at some time in the future if this is\n          // really what we want to do here.\n          return resolve();\n        } else if (err.code === 'EEXIST' || err.code === 'EBUSY') {\n          // file already exists, so whatever\n          return resolve();\n        } else return reject(err);\n      } else return resolve();\n    });\n  }).then(() => {\n    // content should never change for any reason, so make it read-only\n    return Promise.all([unlink(src), !isWindows && chmod(dest, '0444')]);\n  }).catch(() => {\n    return pinflight('cacache-move-file:' + dest, () => {\n      return stat(dest).catch(err => {\n        if (err.code !== 'ENOENT') {\n          // Something else is wrong here. Bail bail bail\n          throw err;\n        } // file doesn't already exist! let's try a rename -> copy fallback\n        // only delete if it successfully copies\n\n\n        return move(src, dest);\n      });\n    });\n  });\n}","map":{"version":3,"names":["fs","require","util","chmod","promisify","unlink","stat","move","pinflight","module","exports","moveFile","src","dest","isWindows","global","__CACACHE_TEST_FAKE_WINDOWS__","process","platform","Promise","resolve","reject","link","err","code","then","all","catch"],"sources":["C:/Users/Kamen/ML/AlgoTrader/node_modules/cacache/lib/util/move-file.js"],"sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst util = require('util')\nconst chmod = util.promisify(fs.chmod)\nconst unlink = util.promisify(fs.unlink)\nconst stat = util.promisify(fs.stat)\nconst move = require('@npmcli/move-file')\nconst pinflight = require('promise-inflight')\n\nmodule.exports = moveFile\n\nfunction moveFile (src, dest) {\n  const isWindows = global.__CACACHE_TEST_FAKE_WINDOWS__ ||\n    process.platform === 'win32'\n\n  // This isn't quite an fs.rename -- the assumption is that\n  // if `dest` already exists, and we get certain errors while\n  // trying to move it, we should just not bother.\n  //\n  // In the case of cache corruption, users will receive an\n  // EINTEGRITY error elsewhere, and can remove the offending\n  // content their own way.\n  //\n  // Note that, as the name suggests, this strictly only supports file moves.\n  return new Promise((resolve, reject) => {\n    fs.link(src, dest, (err) => {\n      if (err) {\n        if (isWindows && err.code === 'EPERM') {\n          // XXX This is a really weird way to handle this situation, as it\n          // results in the src file being deleted even though the dest\n          // might not exist.  Since we pretty much always write files to\n          // deterministic locations based on content hash, this is likely\n          // ok (or at worst, just ends in a future cache miss).  But it would\n          // be worth investigating at some time in the future if this is\n          // really what we want to do here.\n          return resolve()\n        } else if (err.code === 'EEXIST' || err.code === 'EBUSY') {\n          // file already exists, so whatever\n          return resolve()\n        } else\n          return reject(err)\n      } else\n        return resolve()\n    })\n  })\n    .then(() => {\n      // content should never change for any reason, so make it read-only\n      return Promise.all([\n        unlink(src),\n        !isWindows && chmod(dest, '0444'),\n      ])\n    })\n    .catch(() => {\n      return pinflight('cacache-move-file:' + dest, () => {\n        return stat(dest).catch((err) => {\n          if (err.code !== 'ENOENT') {\n            // Something else is wrong here. Bail bail bail\n            throw err\n          }\n          // file doesn't already exist! let's try a rename -> copy fallback\n          // only delete if it successfully copies\n          return move(src, dest)\n        })\n      })\n    })\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,KAAK,GAAGD,IAAI,CAACE,SAAL,CAAeJ,EAAE,CAACG,KAAlB,CAAd;AACA,MAAME,MAAM,GAAGH,IAAI,CAACE,SAAL,CAAeJ,EAAE,CAACK,MAAlB,CAAf;AACA,MAAMC,IAAI,GAAGJ,IAAI,CAACE,SAAL,CAAeJ,EAAE,CAACM,IAAlB,CAAb;;AACA,MAAMC,IAAI,GAAGN,OAAO,CAAC,mBAAD,CAApB;;AACA,MAAMO,SAAS,GAAGP,OAAO,CAAC,kBAAD,CAAzB;;AAEAQ,MAAM,CAACC,OAAP,GAAiBC,QAAjB;;AAEA,SAASA,QAAT,CAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;EAC5B,MAAMC,SAAS,GAAGC,MAAM,CAACC,6BAAP,IAChBC,OAAO,CAACC,QAAR,KAAqB,OADvB,CAD4B,CAI5B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtCrB,EAAE,CAACsB,IAAH,CAAQV,GAAR,EAAaC,IAAb,EAAoBU,GAAD,IAAS;MAC1B,IAAIA,GAAJ,EAAS;QACP,IAAIT,SAAS,IAAIS,GAAG,CAACC,IAAJ,KAAa,OAA9B,EAAuC;UACrC;UACA;UACA;UACA;UACA;UACA;UACA;UACA,OAAOJ,OAAO,EAAd;QACD,CATD,MASO,IAAIG,GAAG,CAACC,IAAJ,KAAa,QAAb,IAAyBD,GAAG,CAACC,IAAJ,KAAa,OAA1C,EAAmD;UACxD;UACA,OAAOJ,OAAO,EAAd;QACD,CAHM,MAIL,OAAOC,MAAM,CAACE,GAAD,CAAb;MACH,CAfD,MAgBE,OAAOH,OAAO,EAAd;IACH,CAlBD;EAmBD,CApBM,EAqBJK,IArBI,CAqBC,MAAM;IACV;IACA,OAAON,OAAO,CAACO,GAAR,CAAY,CACjBrB,MAAM,CAACO,GAAD,CADW,EAEjB,CAACE,SAAD,IAAcX,KAAK,CAACU,IAAD,EAAO,MAAP,CAFF,CAAZ,CAAP;EAID,CA3BI,EA4BJc,KA5BI,CA4BE,MAAM;IACX,OAAOnB,SAAS,CAAC,uBAAuBK,IAAxB,EAA8B,MAAM;MAClD,OAAOP,IAAI,CAACO,IAAD,CAAJ,CAAWc,KAAX,CAAkBJ,GAAD,IAAS;QAC/B,IAAIA,GAAG,CAACC,IAAJ,KAAa,QAAjB,EAA2B;UACzB;UACA,MAAMD,GAAN;QACD,CAJ8B,CAK/B;QACA;;;QACA,OAAOhB,IAAI,CAACK,GAAD,EAAMC,IAAN,CAAX;MACD,CARM,CAAP;IASD,CAVe,CAAhB;EAWD,CAxCI,CAAP;AAyCD"},"metadata":{},"sourceType":"script"}