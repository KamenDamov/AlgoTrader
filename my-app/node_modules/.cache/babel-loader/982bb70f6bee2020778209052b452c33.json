{"ast":null,"code":"'use strict';\n\nvar DATE_TIME = /(\\d{1,})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,})?.*?( BC)?$/;\nvar DATE = /^(\\d{1,})-(\\d{2})-(\\d{2})( BC)?$/;\nvar TIME_ZONE = /([Z+-])(\\d{2})?:?(\\d{2})?:?(\\d{2})?/;\nvar INFINITY = /^-?infinity$/;\nmodule.exports = function parseDate(isoDate) {\n  if (INFINITY.test(isoDate)) {\n    // Capitalize to Infinity before passing to Number\n    return Number(isoDate.replace('i', 'I'));\n  }\n  var matches = DATE_TIME.exec(isoDate);\n  if (!matches) {\n    // Force YYYY-MM-DD dates to be parsed as local time\n    return getDate(isoDate) || null;\n  }\n  var isBC = !!matches[8];\n  var year = parseInt(matches[1], 10);\n  if (isBC) {\n    year = bcYearToNegativeYear(year);\n  }\n  var month = parseInt(matches[2], 10) - 1;\n  var day = matches[3];\n  var hour = parseInt(matches[4], 10);\n  var minute = parseInt(matches[5], 10);\n  var second = parseInt(matches[6], 10);\n  var ms = matches[7];\n  ms = ms ? 1000 * parseFloat(ms) : 0;\n  var date;\n  var offset = timeZoneOffset(isoDate);\n  if (offset != null) {\n    date = new Date(Date.UTC(year, month, day, hour, minute, second, ms));\n\n    // Account for years from 0 to 99 being interpreted as 1900-1999\n    // by Date.UTC / the multi-argument form of the Date constructor\n    if (is0To99(year)) {\n      date.setUTCFullYear(year);\n    }\n    if (offset !== 0) {\n      date.setTime(date.getTime() - offset);\n    }\n  } else {\n    date = new Date(year, month, day, hour, minute, second, ms);\n    if (is0To99(year)) {\n      date.setFullYear(year);\n    }\n  }\n  return date;\n};\nfunction getDate(isoDate) {\n  var matches = DATE.exec(isoDate);\n  if (!matches) {\n    return;\n  }\n  var year = parseInt(matches[1], 10);\n  var isBC = !!matches[4];\n  if (isBC) {\n    year = bcYearToNegativeYear(year);\n  }\n  var month = parseInt(matches[2], 10) - 1;\n  var day = matches[3];\n  // YYYY-MM-DD will be parsed as local time\n  var date = new Date(year, month, day);\n  if (is0To99(year)) {\n    date.setFullYear(year);\n  }\n  return date;\n}\n\n// match timezones:\n// Z (UTC)\n// -05\n// +06:30\nfunction timeZoneOffset(isoDate) {\n  if (isoDate.endsWith('+00')) {\n    return 0;\n  }\n  var zone = TIME_ZONE.exec(isoDate.split(' ')[1]);\n  if (!zone) return;\n  var type = zone[1];\n  if (type === 'Z') {\n    return 0;\n  }\n  var sign = type === '-' ? -1 : 1;\n  var offset = parseInt(zone[2], 10) * 3600 + parseInt(zone[3] || 0, 10) * 60 + parseInt(zone[4] || 0, 10);\n  return offset * sign * 1000;\n}\nfunction bcYearToNegativeYear(year) {\n  // Account for numerical difference between representations of BC years\n  // See: https://github.com/bendrucker/postgres-date/issues/5\n  return -(year - 1);\n}\nfunction is0To99(num) {\n  return num >= 0 && num < 100;\n}","map":null,"metadata":{},"sourceType":"script"}