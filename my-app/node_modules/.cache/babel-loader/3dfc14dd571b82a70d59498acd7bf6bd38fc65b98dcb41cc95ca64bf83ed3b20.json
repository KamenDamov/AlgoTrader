{"ast":null,"code":"'use strict';\n\nconst crypto = require('crypto');\nfunction startSession(mechanisms) {\n  if (mechanisms.indexOf('SCRAM-SHA-256') === -1) {\n    throw new Error('SASL: Only mechanism SCRAM-SHA-256 is currently supported');\n  }\n  const clientNonce = crypto.randomBytes(18).toString('base64');\n  return {\n    mechanism: 'SCRAM-SHA-256',\n    clientNonce,\n    response: 'n,,n=*,r=' + clientNonce,\n    message: 'SASLInitialResponse'\n  };\n}\nfunction continueSession(session, password, serverData) {\n  if (session.message !== 'SASLInitialResponse') {\n    throw new Error('SASL: Last message was not SASLInitialResponse');\n  }\n  if (typeof password !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a string');\n  }\n  if (password === '') {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a non-empty string');\n  }\n  if (typeof serverData !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: serverData must be a string');\n  }\n  const sv = parseServerFirstMessage(serverData);\n  if (!sv.nonce.startsWith(session.clientNonce)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce');\n  } else if (sv.nonce.length === session.clientNonce.length) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce is too short');\n  }\n  var saltBytes = Buffer.from(sv.salt, 'base64');\n  var saltedPassword = crypto.pbkdf2Sync(password, saltBytes, sv.iteration, 32, 'sha256');\n  var clientKey = hmacSha256(saltedPassword, 'Client Key');\n  var storedKey = sha256(clientKey);\n  var clientFirstMessageBare = 'n=*,r=' + session.clientNonce;\n  var serverFirstMessage = 'r=' + sv.nonce + ',s=' + sv.salt + ',i=' + sv.iteration;\n  var clientFinalMessageWithoutProof = 'c=biws,r=' + sv.nonce;\n  var authMessage = clientFirstMessageBare + ',' + serverFirstMessage + ',' + clientFinalMessageWithoutProof;\n  var clientSignature = hmacSha256(storedKey, authMessage);\n  var clientProofBytes = xorBuffers(clientKey, clientSignature);\n  var clientProof = clientProofBytes.toString('base64');\n  var serverKey = hmacSha256(saltedPassword, 'Server Key');\n  var serverSignatureBytes = hmacSha256(serverKey, authMessage);\n  session.message = 'SASLResponse';\n  session.serverSignature = serverSignatureBytes.toString('base64');\n  session.response = clientFinalMessageWithoutProof + ',p=' + clientProof;\n}\nfunction finalizeSession(session, serverData) {\n  if (session.message !== 'SASLResponse') {\n    throw new Error('SASL: Last message was not SASLResponse');\n  }\n  if (typeof serverData !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: serverData must be a string');\n  }\n  const {\n    serverSignature\n  } = parseServerFinalMessage(serverData);\n  if (serverSignature !== session.serverSignature) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature does not match');\n  }\n}\n\n/**\n * printable       = %x21-2B / %x2D-7E\n *                   ;; Printable ASCII except \",\".\n *                   ;; Note that any \"printable\" is also\n *                   ;; a valid \"value\".\n */\nfunction isPrintableChars(text) {\n  if (typeof text !== 'string') {\n    throw new TypeError('SASL: text must be a string');\n  }\n  return text.split('').map((_, i) => text.charCodeAt(i)).every(c => c >= 0x21 && c <= 0x2b || c >= 0x2d && c <= 0x7e);\n}\n\n/**\n * base64-char     = ALPHA / DIGIT / \"/\" / \"+\"\n *\n * base64-4        = 4base64-char\n *\n * base64-3        = 3base64-char \"=\"\n *\n * base64-2        = 2base64-char \"==\"\n *\n * base64          = *base64-4 [base64-3 / base64-2]\n */\nfunction isBase64(text) {\n  return /^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.test(text);\n}\nfunction parseAttributePairs(text) {\n  if (typeof text !== 'string') {\n    throw new TypeError('SASL: attribute pairs text must be a string');\n  }\n  return new Map(text.split(',').map(attrValue => {\n    if (!/^.=/.test(attrValue)) {\n      throw new Error('SASL: Invalid attribute pair entry');\n    }\n    const name = attrValue[0];\n    const value = attrValue.substring(2);\n    return [name, value];\n  }));\n}\nfunction parseServerFirstMessage(data) {\n  const attrPairs = parseAttributePairs(data);\n  const nonce = attrPairs.get('r');\n  if (!nonce) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing');\n  } else if (!isPrintableChars(nonce)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce must only contain printable characters');\n  }\n  const salt = attrPairs.get('s');\n  if (!salt) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing');\n  } else if (!isBase64(salt)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: salt must be base64');\n  }\n  const iterationText = attrPairs.get('i');\n  if (!iterationText) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: iteration missing');\n  } else if (!/^[1-9][0-9]*$/.test(iterationText)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: invalid iteration count');\n  }\n  const iteration = parseInt(iterationText, 10);\n  return {\n    nonce,\n    salt,\n    iteration\n  };\n}\nfunction parseServerFinalMessage(serverData) {\n  const attrPairs = parseAttributePairs(serverData);\n  const serverSignature = attrPairs.get('v');\n  if (!serverSignature) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature is missing');\n  } else if (!isBase64(serverSignature)) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature must be base64');\n  }\n  return {\n    serverSignature\n  };\n}\nfunction xorBuffers(a, b) {\n  if (!Buffer.isBuffer(a)) {\n    throw new TypeError('first argument must be a Buffer');\n  }\n  if (!Buffer.isBuffer(b)) {\n    throw new TypeError('second argument must be a Buffer');\n  }\n  if (a.length !== b.length) {\n    throw new Error('Buffer lengths must match');\n  }\n  if (a.length === 0) {\n    throw new Error('Buffers cannot be empty');\n  }\n  return Buffer.from(a.map((_, i) => a[i] ^ b[i]));\n}\nfunction sha256(text) {\n  return crypto.createHash('sha256').update(text).digest();\n}\nfunction hmacSha256(key, msg) {\n  return crypto.createHmac('sha256', key).update(msg).digest();\n}\nmodule.exports = {\n  startSession,\n  continueSession,\n  finalizeSession\n};","map":{"version":3,"names":["crypto","require","startSession","mechanisms","indexOf","Error","clientNonce","randomBytes","toString","mechanism","response","message","continueSession","session","password","serverData","sv","parseServerFirstMessage","nonce","startsWith","length","saltBytes","Buffer","from","salt","saltedPassword","pbkdf2Sync","iteration","clientKey","hmacSha256","storedKey","sha256","clientFirstMessageBare","serverFirstMessage","clientFinalMessageWithoutProof","authMessage","clientSignature","clientProofBytes","xorBuffers","clientProof","serverKey","serverSignatureBytes","serverSignature","finalizeSession","parseServerFinalMessage","isPrintableChars","text","TypeError","split","map","_","i","charCodeAt","every","c","isBase64","test","parseAttributePairs","Map","attrValue","name","value","substring","data","attrPairs","get","iterationText","parseInt","a","b","isBuffer","createHash","update","digest","key","msg","createHmac","module","exports"],"sources":["C:/Users/Kamen/ML/AlgoTrader/node_modules/pg/lib/sasl.js"],"sourcesContent":["'use strict'\nconst crypto = require('crypto')\n\nfunction startSession(mechanisms) {\n  if (mechanisms.indexOf('SCRAM-SHA-256') === -1) {\n    throw new Error('SASL: Only mechanism SCRAM-SHA-256 is currently supported')\n  }\n\n  const clientNonce = crypto.randomBytes(18).toString('base64')\n\n  return {\n    mechanism: 'SCRAM-SHA-256',\n    clientNonce,\n    response: 'n,,n=*,r=' + clientNonce,\n    message: 'SASLInitialResponse',\n  }\n}\n\nfunction continueSession(session, password, serverData) {\n  if (session.message !== 'SASLInitialResponse') {\n    throw new Error('SASL: Last message was not SASLInitialResponse')\n  }\n  if (typeof password !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a string')\n  }\n  if (password === '') {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a non-empty string')\n  }\n  if (typeof serverData !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: serverData must be a string')\n  }\n\n  const sv = parseServerFirstMessage(serverData)\n\n  if (!sv.nonce.startsWith(session.clientNonce)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce')\n  } else if (sv.nonce.length === session.clientNonce.length) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce is too short')\n  }\n\n  var saltBytes = Buffer.from(sv.salt, 'base64')\n\n  var saltedPassword = crypto.pbkdf2Sync(password, saltBytes, sv.iteration, 32, 'sha256')\n\n  var clientKey = hmacSha256(saltedPassword, 'Client Key')\n  var storedKey = sha256(clientKey)\n\n  var clientFirstMessageBare = 'n=*,r=' + session.clientNonce\n  var serverFirstMessage = 'r=' + sv.nonce + ',s=' + sv.salt + ',i=' + sv.iteration\n\n  var clientFinalMessageWithoutProof = 'c=biws,r=' + sv.nonce\n\n  var authMessage = clientFirstMessageBare + ',' + serverFirstMessage + ',' + clientFinalMessageWithoutProof\n\n  var clientSignature = hmacSha256(storedKey, authMessage)\n  var clientProofBytes = xorBuffers(clientKey, clientSignature)\n  var clientProof = clientProofBytes.toString('base64')\n\n  var serverKey = hmacSha256(saltedPassword, 'Server Key')\n  var serverSignatureBytes = hmacSha256(serverKey, authMessage)\n\n  session.message = 'SASLResponse'\n  session.serverSignature = serverSignatureBytes.toString('base64')\n  session.response = clientFinalMessageWithoutProof + ',p=' + clientProof\n}\n\nfunction finalizeSession(session, serverData) {\n  if (session.message !== 'SASLResponse') {\n    throw new Error('SASL: Last message was not SASLResponse')\n  }\n  if (typeof serverData !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: serverData must be a string')\n  }\n\n  const { serverSignature } = parseServerFinalMessage(serverData)\n\n  if (serverSignature !== session.serverSignature) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature does not match')\n  }\n}\n\n/**\n * printable       = %x21-2B / %x2D-7E\n *                   ;; Printable ASCII except \",\".\n *                   ;; Note that any \"printable\" is also\n *                   ;; a valid \"value\".\n */\nfunction isPrintableChars(text) {\n  if (typeof text !== 'string') {\n    throw new TypeError('SASL: text must be a string')\n  }\n  return text\n    .split('')\n    .map((_, i) => text.charCodeAt(i))\n    .every((c) => (c >= 0x21 && c <= 0x2b) || (c >= 0x2d && c <= 0x7e))\n}\n\n/**\n * base64-char     = ALPHA / DIGIT / \"/\" / \"+\"\n *\n * base64-4        = 4base64-char\n *\n * base64-3        = 3base64-char \"=\"\n *\n * base64-2        = 2base64-char \"==\"\n *\n * base64          = *base64-4 [base64-3 / base64-2]\n */\nfunction isBase64(text) {\n  return /^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.test(text)\n}\n\nfunction parseAttributePairs(text) {\n  if (typeof text !== 'string') {\n    throw new TypeError('SASL: attribute pairs text must be a string')\n  }\n\n  return new Map(\n    text.split(',').map((attrValue) => {\n      if (!/^.=/.test(attrValue)) {\n        throw new Error('SASL: Invalid attribute pair entry')\n      }\n      const name = attrValue[0]\n      const value = attrValue.substring(2)\n      return [name, value]\n    })\n  )\n}\n\nfunction parseServerFirstMessage(data) {\n  const attrPairs = parseAttributePairs(data)\n\n  const nonce = attrPairs.get('r')\n  if (!nonce) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing')\n  } else if (!isPrintableChars(nonce)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce must only contain printable characters')\n  }\n  const salt = attrPairs.get('s')\n  if (!salt) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing')\n  } else if (!isBase64(salt)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: salt must be base64')\n  }\n  const iterationText = attrPairs.get('i')\n  if (!iterationText) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: iteration missing')\n  } else if (!/^[1-9][0-9]*$/.test(iterationText)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: invalid iteration count')\n  }\n  const iteration = parseInt(iterationText, 10)\n\n  return {\n    nonce,\n    salt,\n    iteration,\n  }\n}\n\nfunction parseServerFinalMessage(serverData) {\n  const attrPairs = parseAttributePairs(serverData)\n  const serverSignature = attrPairs.get('v')\n  if (!serverSignature) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature is missing')\n  } else if (!isBase64(serverSignature)) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature must be base64')\n  }\n  return {\n    serverSignature,\n  }\n}\n\nfunction xorBuffers(a, b) {\n  if (!Buffer.isBuffer(a)) {\n    throw new TypeError('first argument must be a Buffer')\n  }\n  if (!Buffer.isBuffer(b)) {\n    throw new TypeError('second argument must be a Buffer')\n  }\n  if (a.length !== b.length) {\n    throw new Error('Buffer lengths must match')\n  }\n  if (a.length === 0) {\n    throw new Error('Buffers cannot be empty')\n  }\n  return Buffer.from(a.map((_, i) => a[i] ^ b[i]))\n}\n\nfunction sha256(text) {\n  return crypto.createHash('sha256').update(text).digest()\n}\n\nfunction hmacSha256(key, msg) {\n  return crypto.createHmac('sha256', key).update(msg).digest()\n}\n\nmodule.exports = {\n  startSession,\n  continueSession,\n  finalizeSession,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}