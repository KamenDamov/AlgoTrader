{"ast":null,"code":"\"use strict\";\n\n//binary data writer tuned for encoding binary specific to the postgres binary protocol\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Writer = void 0;\nclass Writer {\n  constructor() {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 256;\n    this.size = size;\n    this.offset = 5;\n    this.headerPosition = 0;\n    this.buffer = Buffer.allocUnsafe(size);\n  }\n  ensure(size) {\n    var remaining = this.buffer.length - this.offset;\n    if (remaining < size) {\n      var oldBuffer = this.buffer;\n      // exponential growth factor of around ~ 1.5\n      // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n      var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size;\n      this.buffer = Buffer.allocUnsafe(newSize);\n      oldBuffer.copy(this.buffer);\n    }\n  }\n  addInt32(num) {\n    this.ensure(4);\n    this.buffer[this.offset++] = num >>> 24 & 0xff;\n    this.buffer[this.offset++] = num >>> 16 & 0xff;\n    this.buffer[this.offset++] = num >>> 8 & 0xff;\n    this.buffer[this.offset++] = num >>> 0 & 0xff;\n    return this;\n  }\n  addInt16(num) {\n    this.ensure(2);\n    this.buffer[this.offset++] = num >>> 8 & 0xff;\n    this.buffer[this.offset++] = num >>> 0 & 0xff;\n    return this;\n  }\n  addCString(string) {\n    if (!string) {\n      this.ensure(1);\n    } else {\n      var len = Buffer.byteLength(string);\n      this.ensure(len + 1); // +1 for null terminator\n      this.buffer.write(string, this.offset, 'utf-8');\n      this.offset += len;\n    }\n    this.buffer[this.offset++] = 0; // null terminator\n    return this;\n  }\n  addString() {\n    let string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var len = Buffer.byteLength(string);\n    this.ensure(len);\n    this.buffer.write(string, this.offset);\n    this.offset += len;\n    return this;\n  }\n  add(otherBuffer) {\n    this.ensure(otherBuffer.length);\n    otherBuffer.copy(this.buffer, this.offset);\n    this.offset += otherBuffer.length;\n    return this;\n  }\n  join(code) {\n    if (code) {\n      this.buffer[this.headerPosition] = code;\n      //length is everything in this packet minus the code\n      const length = this.offset - (this.headerPosition + 1);\n      this.buffer.writeInt32BE(length, this.headerPosition + 1);\n    }\n    return this.buffer.slice(code ? 0 : 5, this.offset);\n  }\n  flush(code) {\n    var result = this.join(code);\n    this.offset = 5;\n    this.headerPosition = 0;\n    this.buffer = Buffer.allocUnsafe(this.size);\n    return result;\n  }\n}\nexports.Writer = Writer;","map":{"version":3,"names":["Writer","constructor","size","arguments","length","undefined","offset","headerPosition","buffer","Buffer","allocUnsafe","ensure","remaining","oldBuffer","newSize","copy","addInt32","num","addInt16","addCString","string","len","byteLength","write","addString","add","otherBuffer","join","code","writeInt32BE","slice","flush","result","exports"],"sources":["C:\\Users\\Kamen\\ML\\AlgoTrader\\node_modules\\pg-protocol\\src\\buffer-writer.ts"],"sourcesContent":["//binary data writer tuned for encoding binary specific to the postgres binary protocol\n\nexport class Writer {\n  private buffer: Buffer\n  private offset: number = 5\n  private headerPosition: number = 0\n  constructor(private size = 256) {\n    this.buffer = Buffer.allocUnsafe(size)\n  }\n\n  private ensure(size: number): void {\n    var remaining = this.buffer.length - this.offset\n    if (remaining < size) {\n      var oldBuffer = this.buffer\n      // exponential growth factor of around ~ 1.5\n      // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n      var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size\n      this.buffer = Buffer.allocUnsafe(newSize)\n      oldBuffer.copy(this.buffer)\n    }\n  }\n\n  public addInt32(num: number): Writer {\n    this.ensure(4)\n    this.buffer[this.offset++] = (num >>> 24) & 0xff\n    this.buffer[this.offset++] = (num >>> 16) & 0xff\n    this.buffer[this.offset++] = (num >>> 8) & 0xff\n    this.buffer[this.offset++] = (num >>> 0) & 0xff\n    return this\n  }\n\n  public addInt16(num: number): Writer {\n    this.ensure(2)\n    this.buffer[this.offset++] = (num >>> 8) & 0xff\n    this.buffer[this.offset++] = (num >>> 0) & 0xff\n    return this\n  }\n\n  public addCString(string: string): Writer {\n    if (!string) {\n      this.ensure(1)\n    } else {\n      var len = Buffer.byteLength(string)\n      this.ensure(len + 1) // +1 for null terminator\n      this.buffer.write(string, this.offset, 'utf-8')\n      this.offset += len\n    }\n\n    this.buffer[this.offset++] = 0 // null terminator\n    return this\n  }\n\n  public addString(string: string = ''): Writer {\n    var len = Buffer.byteLength(string)\n    this.ensure(len)\n    this.buffer.write(string, this.offset)\n    this.offset += len\n    return this\n  }\n\n  public add(otherBuffer: Buffer): Writer {\n    this.ensure(otherBuffer.length)\n    otherBuffer.copy(this.buffer, this.offset)\n    this.offset += otherBuffer.length\n    return this\n  }\n\n  private join(code?: number): Buffer {\n    if (code) {\n      this.buffer[this.headerPosition] = code\n      //length is everything in this packet minus the code\n      const length = this.offset - (this.headerPosition + 1)\n      this.buffer.writeInt32BE(length, this.headerPosition + 1)\n    }\n    return this.buffer.slice(code ? 0 : 5, this.offset)\n  }\n\n  public flush(code?: number): Buffer {\n    var result = this.join(code)\n    this.offset = 5\n    this.headerPosition = 0\n    this.buffer = Buffer.allocUnsafe(this.size)\n    return result\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}