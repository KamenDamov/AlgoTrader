{"ast":null,"code":"'use strict';\n\nconst AggregateError = require('aggregate-error');\n\nmodule.exports = async function (iterable, mapper) {\n  let {\n    concurrency = Infinity,\n    stopOnError = true\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return new Promise((resolve, reject) => {\n    if (typeof mapper !== 'function') {\n      throw new TypeError('Mapper function is required');\n    }\n\n    if (!((Number.isSafeInteger(concurrency) || concurrency === Infinity) && concurrency >= 1)) {\n      throw new TypeError(`Expected \\`concurrency\\` to be an integer from 1 and up or \\`Infinity\\`, got \\`${concurrency}\\` (${typeof concurrency})`);\n    }\n\n    const result = [];\n    const errors = [];\n    const iterator = iterable[Symbol.iterator]();\n    let isRejected = false;\n    let isIterableDone = false;\n    let resolvingCount = 0;\n    let currentIndex = 0;\n\n    const next = () => {\n      if (isRejected) {\n        return;\n      }\n\n      const nextItem = iterator.next();\n      const index = currentIndex;\n      currentIndex++;\n\n      if (nextItem.done) {\n        isIterableDone = true;\n\n        if (resolvingCount === 0) {\n          if (!stopOnError && errors.length !== 0) {\n            reject(new AggregateError(errors));\n          } else {\n            resolve(result);\n          }\n        }\n\n        return;\n      }\n\n      resolvingCount++;\n\n      (async () => {\n        try {\n          const element = await nextItem.value;\n          result[index] = await mapper(element, index);\n          resolvingCount--;\n          next();\n        } catch (error) {\n          if (stopOnError) {\n            isRejected = true;\n            reject(error);\n          } else {\n            errors.push(error);\n            resolvingCount--;\n            next();\n          }\n        }\n      })();\n    };\n\n    for (let i = 0; i < concurrency; i++) {\n      next();\n\n      if (isIterableDone) {\n        break;\n      }\n    }\n  });\n};","map":{"version":3,"names":["AggregateError","require","module","exports","iterable","mapper","concurrency","Infinity","stopOnError","Promise","resolve","reject","TypeError","Number","isSafeInteger","result","errors","iterator","Symbol","isRejected","isIterableDone","resolvingCount","currentIndex","next","nextItem","index","done","length","element","value","error","push","i"],"sources":["C:/Users/Kamen/ML/AlgoTrader/node_modules/p-map/index.js"],"sourcesContent":["'use strict';\nconst AggregateError = require('aggregate-error');\n\nmodule.exports = async (\n\titerable,\n\tmapper,\n\t{\n\t\tconcurrency = Infinity,\n\t\tstopOnError = true\n\t} = {}\n) => {\n\treturn new Promise((resolve, reject) => {\n\t\tif (typeof mapper !== 'function') {\n\t\t\tthrow new TypeError('Mapper function is required');\n\t\t}\n\n\t\tif (!((Number.isSafeInteger(concurrency) || concurrency === Infinity) && concurrency >= 1)) {\n\t\t\tthrow new TypeError(`Expected \\`concurrency\\` to be an integer from 1 and up or \\`Infinity\\`, got \\`${concurrency}\\` (${typeof concurrency})`);\n\t\t}\n\n\t\tconst result = [];\n\t\tconst errors = [];\n\t\tconst iterator = iterable[Symbol.iterator]();\n\t\tlet isRejected = false;\n\t\tlet isIterableDone = false;\n\t\tlet resolvingCount = 0;\n\t\tlet currentIndex = 0;\n\n\t\tconst next = () => {\n\t\t\tif (isRejected) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextItem = iterator.next();\n\t\t\tconst index = currentIndex;\n\t\t\tcurrentIndex++;\n\n\t\t\tif (nextItem.done) {\n\t\t\t\tisIterableDone = true;\n\n\t\t\t\tif (resolvingCount === 0) {\n\t\t\t\t\tif (!stopOnError && errors.length !== 0) {\n\t\t\t\t\t\treject(new AggregateError(errors));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresolvingCount++;\n\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst element = await nextItem.value;\n\t\t\t\t\tresult[index] = await mapper(element, index);\n\t\t\t\t\tresolvingCount--;\n\t\t\t\t\tnext();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (stopOnError) {\n\t\t\t\t\t\tisRejected = true;\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\terrors.push(error);\n\t\t\t\t\t\tresolvingCount--;\n\t\t\t\t\t\tnext();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})();\n\t\t};\n\n\t\tfor (let i = 0; i < concurrency; i++) {\n\t\t\tnext();\n\n\t\t\tif (isIterableDone) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n};\n"],"mappings":"AAAA;;AACA,MAAMA,cAAc,GAAGC,OAAO,CAAC,iBAAD,CAA9B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,gBAChBC,QADgB,EAEhBC,MAFgB,EAOZ;EAAA,IAJJ;IACCC,WAAW,GAAGC,QADf;IAECC,WAAW,GAAG;EAFf,CAII,uEADA,EACA;EACJ,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACvC,IAAI,OAAON,MAAP,KAAkB,UAAtB,EAAkC;MACjC,MAAM,IAAIO,SAAJ,CAAc,6BAAd,CAAN;IACA;;IAED,IAAI,EAAE,CAACC,MAAM,CAACC,aAAP,CAAqBR,WAArB,KAAqCA,WAAW,KAAKC,QAAtD,KAAmED,WAAW,IAAI,CAApF,CAAJ,EAA4F;MAC3F,MAAM,IAAIM,SAAJ,CAAe,kFAAiFN,WAAY,OAAM,OAAOA,WAAY,GAArI,CAAN;IACA;;IAED,MAAMS,MAAM,GAAG,EAAf;IACA,MAAMC,MAAM,GAAG,EAAf;IACA,MAAMC,QAAQ,GAAGb,QAAQ,CAACc,MAAM,CAACD,QAAR,CAAR,EAAjB;IACA,IAAIE,UAAU,GAAG,KAAjB;IACA,IAAIC,cAAc,GAAG,KAArB;IACA,IAAIC,cAAc,GAAG,CAArB;IACA,IAAIC,YAAY,GAAG,CAAnB;;IAEA,MAAMC,IAAI,GAAG,MAAM;MAClB,IAAIJ,UAAJ,EAAgB;QACf;MACA;;MAED,MAAMK,QAAQ,GAAGP,QAAQ,CAACM,IAAT,EAAjB;MACA,MAAME,KAAK,GAAGH,YAAd;MACAA,YAAY;;MAEZ,IAAIE,QAAQ,CAACE,IAAb,EAAmB;QAClBN,cAAc,GAAG,IAAjB;;QAEA,IAAIC,cAAc,KAAK,CAAvB,EAA0B;UACzB,IAAI,CAACb,WAAD,IAAgBQ,MAAM,CAACW,MAAP,KAAkB,CAAtC,EAAyC;YACxChB,MAAM,CAAC,IAAIX,cAAJ,CAAmBgB,MAAnB,CAAD,CAAN;UACA,CAFD,MAEO;YACNN,OAAO,CAACK,MAAD,CAAP;UACA;QACD;;QAED;MACA;;MAEDM,cAAc;;MAEd,CAAC,YAAY;QACZ,IAAI;UACH,MAAMO,OAAO,GAAG,MAAMJ,QAAQ,CAACK,KAA/B;UACAd,MAAM,CAACU,KAAD,CAAN,GAAgB,MAAMpB,MAAM,CAACuB,OAAD,EAAUH,KAAV,CAA5B;UACAJ,cAAc;UACdE,IAAI;QACJ,CALD,CAKE,OAAOO,KAAP,EAAc;UACf,IAAItB,WAAJ,EAAiB;YAChBW,UAAU,GAAG,IAAb;YACAR,MAAM,CAACmB,KAAD,CAAN;UACA,CAHD,MAGO;YACNd,MAAM,CAACe,IAAP,CAAYD,KAAZ;YACAT,cAAc;YACdE,IAAI;UACJ;QACD;MACD,CAhBD;IAiBA,CA1CD;;IA4CA,KAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1B,WAApB,EAAiC0B,CAAC,EAAlC,EAAsC;MACrCT,IAAI;;MAEJ,IAAIH,cAAJ,EAAoB;QACnB;MACA;IACD;EACD,CApEM,CAAP;AAqEA,CA7ED"},"metadata":{},"sourceType":"script"}