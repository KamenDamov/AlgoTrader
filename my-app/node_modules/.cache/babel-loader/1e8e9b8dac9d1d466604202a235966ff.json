{"ast":null,"code":"// Copyright 2012 Iris Couch, all rights reserved.\n//\n// Server routines\nrequire('defaultable')(module, {}, function (module, exports, DEFS, require) {\n  var net = require('net');\n\n  var util = require('util');\n\n  var dgram = require('dgram');\n\n  var events = require('events');\n\n  var Message = require('./message');\n\n  var convenient = require('./convenient');\n\n  module.exports = createServer;\n\n  function createServer(handler) {\n    return new Server(handler);\n  }\n\n  util.inherits(Server, events.EventEmitter);\n\n  function Server(handler) {\n    var self = this;\n    events.EventEmitter.call(self);\n    self.log = console;\n    self.zones = {};\n    if (handler) self.on('request', handler);\n    self.udp = dgram.createSocket('udp4');\n    self.tcp = net.createServer();\n    self.udp.on('close', function () {\n      self.close();\n    });\n    self.tcp.on('close', function () {\n      self.close();\n    });\n    self.udp.on('error', function (er) {\n      self.emit('error', er);\n    });\n    self.tcp.on('error', function (er) {\n      self.emit('error', er);\n    });\n    self.tcp.on('connection', function (connection) {\n      self.on_tcp_connection(connection);\n    });\n    self.udp.on('message', function (msg, rinfo) {\n      self.on_udp(msg, rinfo);\n    });\n    var listening = {\n      'tcp': false,\n      'udp': false\n    };\n    self.udp.once('listening', function () {\n      listening.udp = true;\n      if (listening.tcp) self.emit('listening');\n    });\n    self.tcp.once('listening', function () {\n      listening.tcp = true;\n      if (listening.udp) self.emit('listening');\n    });\n  }\n\n  Server.prototype.zone = function (zone, server, admin, serial, refresh, retry, expire, ttl) {\n    var self = this,\n        record = zone;\n    if (typeof record != 'object') record = {\n      'class': 'IN',\n      'type': 'SOA',\n      'name': zone,\n      'data': {\n        'mname': server,\n        'rname': admin,\n        'serial': convenient.serial(serial),\n        'refresh': convenient.seconds(refresh),\n        'retry': convenient.seconds(retry),\n        'expire': convenient.seconds(expire),\n        'ttl': convenient.seconds(ttl || 0)\n      }\n    };\n    self.zones[record.name] = record;\n    return self;\n  };\n\n  Server.prototype.listen = function (port, ip, callback) {\n    var self = this;\n\n    if (typeof ip === 'function') {\n      callback = ip;\n      ip = null;\n    }\n\n    self.port = port;\n    self.ip = ip || '0.0.0.0';\n    if (typeof callback === 'function') self.on('listening', callback);\n    self.udp.bind(port, ip);\n    self.tcp.listen(port, ip);\n    return self;\n  };\n\n  Server.prototype.close = function () {\n    var self = this;\n    if (self.udp._receiving) self.udp.close();\n    if (self.tcp._handle) self.tcp.close(function () {\n      self.emit('close');\n    });\n  };\n\n  Server.prototype.unref = function () {\n    this.udp.unref();\n    this.tcp.unref();\n  };\n\n  Server.prototype.ref = function () {\n    this.udp.ref();\n    this.tcp.ref();\n  };\n\n  Server.prototype.on_tcp_connection = function (connection) {\n    var self = this;\n    var length = null,\n        bufs = [];\n    connection.type = 'tcp';\n    connection.server = self;\n    connection.on('data', function (data) {\n      bufs.push(data);\n      var bytes_received = bufs.reduce(function (state, buf) {\n        return state + buf.length;\n      }, 0);\n\n      if (length === null && bytes_received >= 2) {\n        var so_far = Buffer.concat(bufs); // Flatten them all together, it's probably not much data.\n\n        length = so_far.readUInt16BE(0);\n        bufs = [so_far.slice(2)];\n      }\n\n      if (length !== null && bytes_received == 2 + length) {\n        // All of the data (plus the 2-byte length prefix) is received.\n        var data = Buffer.concat(bufs),\n            req = new Request(data, connection),\n            res = new Response(data, connection);\n        self.emit('request', req, res);\n      }\n    });\n  };\n\n  Server.prototype.on_udp = function (data, rinfo) {\n    var self = this; // Provide something that feels like a net.Socket, which in turn feels like the http API.\n\n    var connection = {\n      'type': self.udp.type,\n      'remoteAddress': rinfo.address,\n      'remotePort': rinfo.port,\n      'server': self,\n      'send': function () {\n        self.udp.send.apply(self.udp, arguments);\n      },\n      'destroy': function () {},\n      'end': function () {}\n    };\n    var req = new Request(data, connection),\n        res = new Response(data, connection);\n    self.emit('request', req, res);\n  };\n\n  util.inherits(Request, Message);\n\n  function Request(data, connection) {\n    var self = this;\n    Message.call(self, data);\n    self.connection = connection;\n  }\n\n  Request.prototype.toJSON = function () {\n    var self = this;\n    var obj = {};\n    Object.keys(self).forEach(function (key) {\n      if (key != 'connection') obj[key] = self[key];\n    });\n    return obj;\n  };\n\n  util.inherits(Response, Message);\n\n  function Response(data, connection) {\n    var self = this;\n    Message.call(self, data);\n    self.question = self.question || [];\n    self.answer = self.answer || [];\n    self.authority = self.authority || [];\n    self.additional = self.additional || [];\n    self.connection = connection;\n    convenient.init_response(self);\n  }\n\n  Response.prototype.toJSON = Request.prototype.toJSON;\n\n  Response.prototype.end = function (value) {\n    var self = this;\n    var msg = convenient.final_response(self, value),\n        data = msg.toBinary();\n    if (self.connection.type == 'udp4' && data.length > 512) return self.emit('error', 'UDP responses greater than 512 bytes not yet implemented');else if (self.connection.type == 'udp4') self.connection.send(data, 0, data.length, self.connection.remotePort, self.connection.remoteAddress, function (er) {\n      if (er) self.emit('error', er);\n    });else if (self.connection.type == 'tcp') {\n      // Add the data length prefix.\n      var length = data.length;\n      data = Buffer.concat([new Buffer([length >> 8, length & 255]), data]);\n      self.connection.end(data, function (er) {\n        if (er) self.emit('error', er);\n      });\n    } else self.emit('error', new Error('Unknown connection type: ' + self.connection.type));\n  };\n}); // defaultable","map":{"version":3,"names":["require","module","exports","DEFS","net","util","dgram","events","Message","convenient","createServer","handler","Server","inherits","EventEmitter","self","call","log","console","zones","on","udp","createSocket","tcp","close","er","emit","connection","on_tcp_connection","msg","rinfo","on_udp","listening","once","prototype","zone","server","admin","serial","refresh","retry","expire","ttl","record","seconds","name","listen","port","ip","callback","bind","_receiving","_handle","unref","ref","length","bufs","type","data","push","bytes_received","reduce","state","buf","so_far","Buffer","concat","readUInt16BE","slice","req","Request","res","Response","address","send","apply","arguments","toJSON","obj","Object","keys","forEach","key","question","answer","authority","additional","init_response","end","value","final_response","toBinary","remotePort","remoteAddress","Error"],"sources":["C:/Users/Kamen/ML/AlgoTrader/node_modules/hbo-dnsd/server.js"],"sourcesContent":["// Copyright 2012 Iris Couch, all rights reserved.\r\n//\r\n// Server routines\r\n\r\nrequire('defaultable')(module,\r\n  {\r\n  }, function(module, exports, DEFS, require) {\r\n\r\nvar net = require('net')\r\nvar util = require('util')\r\nvar dgram = require('dgram')\r\nvar events = require('events')\r\n\r\nvar Message = require('./message')\r\nvar convenient = require('./convenient')\r\n\r\nmodule.exports = createServer\r\n\r\nfunction createServer(handler) {\r\n  return new Server(handler)\r\n}\r\n\r\n\r\nutil.inherits(Server, events.EventEmitter)\r\nfunction Server (handler) {\r\n  var self = this\r\n  events.EventEmitter.call(self)\r\n\r\n  self.log = console\r\n  self.zones = {}\r\n\r\n  if(handler)\r\n    self.on('request', handler)\r\n\r\n  self.udp = dgram.createSocket('udp4')\r\n  self.tcp = net.createServer()\r\n\r\n  self.udp.on('close', function() { self.close() })\r\n  self.tcp.on('close', function() { self.close() })\r\n\r\n  self.udp.on('error', function(er) { self.emit('error', er) })\r\n  self.tcp.on('error', function(er) { self.emit('error', er) })\r\n\r\n  self.tcp.on('connection', function(connection) { self.on_tcp_connection(connection) })\r\n  self.udp.on('message', function(msg, rinfo) { self.on_udp(msg, rinfo) })\r\n\r\n  var listening = {'tcp':false, 'udp':false}\r\n  self.udp.once('listening', function() {\r\n    listening.udp = true\r\n    if(listening.tcp)\r\n      self.emit('listening')\r\n  })\r\n  self.tcp.once('listening', function() {\r\n    listening.tcp = true\r\n    if(listening.udp)\r\n      self.emit('listening')\r\n  })\r\n}\r\n\r\nServer.prototype.zone = function(zone, server, admin, serial, refresh, retry, expire, ttl) {\r\n  var self = this\r\n    , record = zone\r\n\r\n  if(typeof record != 'object')\r\n    record = { 'class': 'IN'\r\n             , 'type' : 'SOA'\r\n             , 'name' : zone\r\n             , 'data' : { 'mname': server\r\n                        , 'rname': admin\r\n                        , 'serial': convenient.serial(serial)\r\n                        , 'refresh': convenient.seconds(refresh)\r\n                        , 'retry'  : convenient.seconds(retry)\r\n                        , 'expire' : convenient.seconds(expire)\r\n                        , 'ttl'    : convenient.seconds(ttl || 0)\r\n                        }\r\n             }\r\n\r\n  self.zones[record.name] = record\r\n  return self\r\n}\r\n\r\nServer.prototype.listen = function(port, ip, callback) {\r\n  var self = this\r\n\r\n  if(typeof ip === 'function') {\r\n    callback = ip\r\n    ip = null\r\n  }\r\n\r\n  self.port = port\r\n  self.ip   = ip || '0.0.0.0'\r\n\r\n  if(typeof callback === 'function')\r\n    self.on('listening', callback)\r\n\r\n  self.udp.bind(port, ip)\r\n  self.tcp.listen(port, ip)\r\n\r\n  return self\r\n}\r\n\r\nServer.prototype.close = function() {\r\n  var self = this\r\n\r\n  if(self.udp._receiving)\r\n    self.udp.close()\r\n\r\n  if(self.tcp._handle)\r\n    self.tcp.close(function() {\r\n      self.emit('close')\r\n    })\r\n}\r\n\r\nServer.prototype.unref = function() {\r\n  this.udp.unref()\r\n  this.tcp.unref()\r\n}\r\n\r\nServer.prototype.ref = function() {\r\n  this.udp.ref()\r\n  this.tcp.ref()\r\n}\r\n\r\nServer.prototype.on_tcp_connection = function(connection) {\r\n  var self = this\r\n\r\n  var length = null\r\n    , bufs = []\r\n\r\n  connection.type = 'tcp'\r\n  connection.server = self\r\n\r\n  connection.on('data', function(data) {\r\n    bufs.push(data)\r\n    var bytes_received = bufs.reduce(function(state, buf) { return state + buf.length }, 0)\r\n\r\n    if(length === null && bytes_received >= 2) {\r\n      var so_far = Buffer.concat(bufs) // Flatten them all together, it's probably not much data.\r\n      length = so_far.readUInt16BE(0)\r\n      bufs = [ so_far.slice(2) ]\r\n    }\r\n\r\n    if(length !== null && bytes_received == 2 + length) {\r\n      // All of the data (plus the 2-byte length prefix) is received.\r\n      var data = Buffer.concat(bufs)\r\n        , req = new Request(data, connection)\r\n        , res = new Response(data, connection)\r\n\r\n      self.emit('request', req, res)\r\n    }\r\n  })\r\n}\r\n\r\nServer.prototype.on_udp = function(data, rinfo) {\r\n  var self = this\r\n\r\n  // Provide something that feels like a net.Socket, which in turn feels like the http API.\r\n  var connection = { 'type'         : self.udp.type\r\n                   , 'remoteAddress': rinfo.address\r\n                   , 'remotePort'   : rinfo.port\r\n                   , 'server'       : self\r\n                   , 'send'         : function() { self.udp.send.apply(self.udp, arguments) }\r\n                   , 'destroy'      : function() {}\r\n                   , 'end'          : function() {}\r\n                   }\r\n\r\n  var req = new Request(data, connection)\r\n    , res = new Response(data, connection)\r\n\r\n  self.emit('request', req, res)\r\n}\r\n\r\n\r\nutil.inherits(Request, Message)\r\nfunction Request (data, connection) {\r\n  var self = this\r\n  Message.call(self, data)\r\n\r\n  self.connection = connection\r\n}\r\n\r\nRequest.prototype.toJSON = function() {\r\n  var self = this\r\n  var obj = {}\r\n  Object.keys(self).forEach(function(key) {\r\n    if(key != 'connection')\r\n      obj[key] = self[key]\r\n  })\r\n  return obj\r\n}\r\n\r\nutil.inherits(Response, Message)\r\nfunction Response (data, connection) {\r\n  var self = this\r\n  Message.call(self, data)\r\n\r\n  self.question   = self.question   || []\r\n  self.answer     = self.answer     || []\r\n  self.authority  = self.authority  || []\r\n  self.additional = self.additional || []\r\n\r\n  self.connection = connection\r\n\r\n  convenient.init_response(self)\r\n}\r\n\r\nResponse.prototype.toJSON = Request.prototype.toJSON\r\n\r\nResponse.prototype.end = function(value) {\r\n  var self = this\r\n\r\n  var msg = convenient.final_response(self, value)\r\n    , data = msg.toBinary()\r\n\r\n  if(self.connection.type == 'udp4' && data.length > 512)\r\n    return self.emit('error', 'UDP responses greater than 512 bytes not yet implemented')\r\n\r\n  else if(self.connection.type == 'udp4')\r\n    self.connection.send(data, 0, data.length, self.connection.remotePort, self.connection.remoteAddress, function(er) {\r\n      if(er)\r\n        self.emit('error', er)\r\n    })\r\n\r\n  else if(self.connection.type == 'tcp') {\r\n    // Add the data length prefix.\r\n    var length = data.length\r\n    data = Buffer.concat([ new Buffer([length >> 8, length & 255]), data ])\r\n\r\n    self.connection.end(data, function(er) {\r\n      if(er)\r\n        self.emit('error', er)\r\n    })\r\n  }\r\n\r\n  else\r\n    self.emit('error', new Error('Unknown connection type: ' + self.connection.type))\r\n}\r\n\r\n\r\n}) // defaultable\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}