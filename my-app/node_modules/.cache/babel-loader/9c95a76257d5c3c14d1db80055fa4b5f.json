{"ast":null,"code":"const {\n  URL,\n  domainToUnicode\n} = require('url');\n\nconst CHAR_LOWERCASE_A = 97;\nconst CHAR_LOWERCASE_Z = 122;\nconst isWindows = process.platform === 'win32';\n\nclass ERR_INVALID_FILE_URL_HOST extends TypeError {\n  constructor(platform) {\n    super(`File URL host must be \"localhost\" or empty on ${platform}`);\n    this.code = 'ERR_INVALID_FILE_URL_HOST';\n  }\n\n  toString() {\n    return `${this.name} [${this.code}]: ${this.message}`;\n  }\n\n}\n\nclass ERR_INVALID_FILE_URL_PATH extends TypeError {\n  constructor(msg) {\n    super(`File URL path ${msg}`);\n    this.code = 'ERR_INVALID_FILE_URL_PATH';\n  }\n\n  toString() {\n    return `${this.name} [${this.code}]: ${this.message}`;\n  }\n\n}\n\nclass ERR_INVALID_ARG_TYPE extends TypeError {\n  constructor(name, actual) {\n    super(`The \"${name}\" argument must be one of type string or an instance ` + `of URL. Received type ${typeof actual} ${actual}`);\n    this.code = 'ERR_INVALID_ARG_TYPE';\n  }\n\n  toString() {\n    return `${this.name} [${this.code}]: ${this.message}`;\n  }\n\n}\n\nclass ERR_INVALID_URL_SCHEME extends TypeError {\n  constructor(expected) {\n    super(`The URL must be of scheme ${expected}`);\n    this.code = 'ERR_INVALID_URL_SCHEME';\n  }\n\n  toString() {\n    return `${this.name} [${this.code}]: ${this.message}`;\n  }\n\n}\n\nconst isURLInstance = input => {\n  return input != null && input.href && input.origin;\n};\n\nconst getPathFromURLWin32 = url => {\n  const hostname = url.hostname;\n  let pathname = url.pathname;\n\n  for (let n = 0; n < pathname.length; n++) {\n    if (pathname[n] === '%') {\n      const third = pathname.codePointAt(n + 2) | 0x20;\n\n      if (pathname[n + 1] === '2' && third === 102 || pathname[n + 1] === '5' && third === 99) {\n        throw new ERR_INVALID_FILE_URL_PATH('must not include encoded \\\\ or / characters');\n      }\n    }\n  }\n\n  pathname = pathname.replace(/\\//g, '\\\\');\n  pathname = decodeURIComponent(pathname);\n\n  if (hostname !== '') {\n    return `\\\\\\\\${domainToUnicode(hostname)}${pathname}`;\n  }\n\n  const letter = pathname.codePointAt(1) | 0x20;\n  const sep = pathname[2];\n\n  if (letter < CHAR_LOWERCASE_A || letter > CHAR_LOWERCASE_Z || sep !== ':') {\n    throw new ERR_INVALID_FILE_URL_PATH('must be absolute');\n  }\n\n  return pathname.slice(1);\n};\n\nconst getPathFromURLPosix = url => {\n  if (url.hostname !== '') {\n    throw new ERR_INVALID_FILE_URL_HOST(process.platform);\n  }\n\n  const pathname = url.pathname;\n\n  for (let n = 0; n < pathname.length; n++) {\n    if (pathname[n] === '%') {\n      const third = pathname.codePointAt(n + 2) | 0x20;\n\n      if (pathname[n + 1] === '2' && third === 102) {\n        throw new ERR_INVALID_FILE_URL_PATH('must not include encoded / characters');\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname);\n};\n\nconst fileURLToPath = path => {\n  if (typeof path === 'string') {\n    path = new URL(path);\n  } else if (!isURLInstance(path)) {\n    throw new ERR_INVALID_ARG_TYPE('path', ['string', 'URL'], path);\n  }\n\n  if (path.protocol !== 'file:') {\n    throw new ERR_INVALID_URL_SCHEME('file');\n  }\n\n  return isWindows ? getPathFromURLWin32(path) : getPathFromURLPosix(path);\n};\n\nmodule.exports = fileURLToPath;","map":{"version":3,"names":["URL","domainToUnicode","require","CHAR_LOWERCASE_A","CHAR_LOWERCASE_Z","isWindows","process","platform","ERR_INVALID_FILE_URL_HOST","TypeError","constructor","code","toString","name","message","ERR_INVALID_FILE_URL_PATH","msg","ERR_INVALID_ARG_TYPE","actual","ERR_INVALID_URL_SCHEME","expected","isURLInstance","input","href","origin","getPathFromURLWin32","url","hostname","pathname","n","length","third","codePointAt","replace","decodeURIComponent","letter","sep","slice","getPathFromURLPosix","fileURLToPath","path","protocol","module","exports"],"sources":["C:/Users/Kamen/ML/AlgoTrader/node_modules/@npmcli/fs/lib/common/file-url-to-path/polyfill.js"],"sourcesContent":["const { URL, domainToUnicode } = require('url')\n\nconst CHAR_LOWERCASE_A = 97\nconst CHAR_LOWERCASE_Z = 122\n\nconst isWindows = process.platform === 'win32'\n\nclass ERR_INVALID_FILE_URL_HOST extends TypeError {\n  constructor (platform) {\n    super(`File URL host must be \"localhost\" or empty on ${platform}`)\n    this.code = 'ERR_INVALID_FILE_URL_HOST'\n  }\n\n  toString () {\n    return `${this.name} [${this.code}]: ${this.message}`\n  }\n}\n\nclass ERR_INVALID_FILE_URL_PATH extends TypeError {\n  constructor (msg) {\n    super(`File URL path ${msg}`)\n    this.code = 'ERR_INVALID_FILE_URL_PATH'\n  }\n\n  toString () {\n    return `${this.name} [${this.code}]: ${this.message}`\n  }\n}\n\nclass ERR_INVALID_ARG_TYPE extends TypeError {\n  constructor (name, actual) {\n    super(`The \"${name}\" argument must be one of type string or an instance ` +\n      `of URL. Received type ${typeof actual} ${actual}`)\n    this.code = 'ERR_INVALID_ARG_TYPE'\n  }\n\n  toString () {\n    return `${this.name} [${this.code}]: ${this.message}`\n  }\n}\n\nclass ERR_INVALID_URL_SCHEME extends TypeError {\n  constructor (expected) {\n    super(`The URL must be of scheme ${expected}`)\n    this.code = 'ERR_INVALID_URL_SCHEME'\n  }\n\n  toString () {\n    return `${this.name} [${this.code}]: ${this.message}`\n  }\n}\n\nconst isURLInstance = (input) => {\n  return input != null && input.href && input.origin\n}\n\nconst getPathFromURLWin32 = (url) => {\n  const hostname = url.hostname\n  let pathname = url.pathname\n  for (let n = 0; n < pathname.length; n++) {\n    if (pathname[n] === '%') {\n      const third = pathname.codePointAt(n + 2) | 0x20\n      if ((pathname[n + 1] === '2' && third === 102) ||\n        (pathname[n + 1] === '5' && third === 99)) {\n        throw new ERR_INVALID_FILE_URL_PATH('must not include encoded \\\\ or / characters')\n      }\n    }\n  }\n\n  pathname = pathname.replace(/\\//g, '\\\\')\n  pathname = decodeURIComponent(pathname)\n  if (hostname !== '') {\n    return `\\\\\\\\${domainToUnicode(hostname)}${pathname}`\n  }\n\n  const letter = pathname.codePointAt(1) | 0x20\n  const sep = pathname[2]\n  if (letter < CHAR_LOWERCASE_A || letter > CHAR_LOWERCASE_Z ||\n    (sep !== ':')) {\n    throw new ERR_INVALID_FILE_URL_PATH('must be absolute')\n  }\n\n  return pathname.slice(1)\n}\n\nconst getPathFromURLPosix = (url) => {\n  if (url.hostname !== '') {\n    throw new ERR_INVALID_FILE_URL_HOST(process.platform)\n  }\n\n  const pathname = url.pathname\n\n  for (let n = 0; n < pathname.length; n++) {\n    if (pathname[n] === '%') {\n      const third = pathname.codePointAt(n + 2) | 0x20\n      if (pathname[n + 1] === '2' && third === 102) {\n        throw new ERR_INVALID_FILE_URL_PATH('must not include encoded / characters')\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nconst fileURLToPath = (path) => {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isURLInstance(path)) {\n    throw new ERR_INVALID_ARG_TYPE('path', ['string', 'URL'], path)\n  }\n\n  if (path.protocol !== 'file:') {\n    throw new ERR_INVALID_URL_SCHEME('file')\n  }\n\n  return isWindows\n    ? getPathFromURLWin32(path)\n    : getPathFromURLPosix(path)\n}\n\nmodule.exports = fileURLToPath\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}