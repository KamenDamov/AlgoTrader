{"ast":null,"code":"'use strict';\n\nvar url = require('url');\nvar fs = require('fs');\n\n//Parse method copied from https://github.com/brianc/node-postgres\n//Copyright (c) 2010-2014 Brian Carlson (brian.m.carlson@gmail.com)\n//MIT License\n\n//parses a connection string\nfunction parse(str) {\n  //unix socket\n  if (str.charAt(0) === '/') {\n    var config = str.split(' ');\n    return {\n      host: config[0],\n      database: config[1]\n    };\n  }\n\n  // url parse expects spaces encoded as %20\n  var result = url.parse(/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(str) ? encodeURI(str).replace(/\\%25(\\d\\d)/g, '%$1') : str, true);\n  var config = result.query;\n  for (var k in config) {\n    if (Array.isArray(config[k])) {\n      config[k] = config[k][config[k].length - 1];\n    }\n  }\n  var auth = (result.auth || ':').split(':');\n  config.user = auth[0];\n  config.password = auth.splice(1).join(':');\n  config.port = result.port;\n  if (result.protocol == 'socket:') {\n    config.host = decodeURI(result.pathname);\n    config.database = result.query.db;\n    config.client_encoding = result.query.encoding;\n    return config;\n  }\n  if (!config.host) {\n    // Only set the host if there is no equivalent query param.\n    config.host = result.hostname;\n  }\n\n  // If the host is missing it might be a URL-encoded path to a socket.\n  var pathname = result.pathname;\n  if (!config.host && pathname && /^%2f/i.test(pathname)) {\n    var pathnameSplit = pathname.split('/');\n    config.host = decodeURIComponent(pathnameSplit[0]);\n    pathname = pathnameSplit.splice(1).join('/');\n  }\n  // result.pathname is not always guaranteed to have a '/' prefix (e.g. relative urls)\n  // only strip the slash if it is present.\n  if (pathname && pathname.charAt(0) === '/') {\n    pathname = pathname.slice(1) || null;\n  }\n  config.database = pathname && decodeURI(pathname);\n  if (config.ssl === 'true' || config.ssl === '1') {\n    config.ssl = true;\n  }\n  if (config.ssl === '0') {\n    config.ssl = false;\n  }\n  if (config.sslcert || config.sslkey || config.sslrootcert || config.sslmode) {\n    config.ssl = {};\n  }\n  if (config.sslcert) {\n    config.ssl.cert = fs.readFileSync(config.sslcert).toString();\n  }\n  if (config.sslkey) {\n    config.ssl.key = fs.readFileSync(config.sslkey).toString();\n  }\n  if (config.sslrootcert) {\n    config.ssl.ca = fs.readFileSync(config.sslrootcert).toString();\n  }\n  switch (config.sslmode) {\n    case 'disable':\n      {\n        config.ssl = false;\n        break;\n      }\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full':\n      {\n        break;\n      }\n    case 'no-verify':\n      {\n        config.ssl.rejectUnauthorized = false;\n        break;\n      }\n  }\n  return config;\n}\nmodule.exports = parse;\nparse.parse = parse;","map":{"version":3,"names":["url","require","fs","parse","str","charAt","config","split","host","database","result","test","encodeURI","replace","query","k","Array","isArray","length","auth","user","password","splice","join","port","protocol","decodeURI","pathname","db","client_encoding","encoding","hostname","pathnameSplit","decodeURIComponent","slice","ssl","sslcert","sslkey","sslrootcert","sslmode","cert","readFileSync","toString","key","ca","rejectUnauthorized","module","exports"],"sources":["C:/Users/Kamen/ML/AlgoTrader/node_modules/pg-connection-string/index.js"],"sourcesContent":["'use strict'\n\nvar url = require('url')\nvar fs = require('fs')\n\n//Parse method copied from https://github.com/brianc/node-postgres\n//Copyright (c) 2010-2014 Brian Carlson (brian.m.carlson@gmail.com)\n//MIT License\n\n//parses a connection string\nfunction parse(str) {\n  //unix socket\n  if (str.charAt(0) === '/') {\n    var config = str.split(' ')\n    return { host: config[0], database: config[1] }\n  }\n\n  // url parse expects spaces encoded as %20\n  var result = url.parse(\n    / |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(str) ? encodeURI(str).replace(/\\%25(\\d\\d)/g, '%$1') : str,\n    true\n  )\n  var config = result.query\n  for (var k in config) {\n    if (Array.isArray(config[k])) {\n      config[k] = config[k][config[k].length - 1]\n    }\n  }\n\n  var auth = (result.auth || ':').split(':')\n  config.user = auth[0]\n  config.password = auth.splice(1).join(':')\n\n  config.port = result.port\n  if (result.protocol == 'socket:') {\n    config.host = decodeURI(result.pathname)\n    config.database = result.query.db\n    config.client_encoding = result.query.encoding\n    return config\n  }\n  if (!config.host) {\n    // Only set the host if there is no equivalent query param.\n    config.host = result.hostname\n  }\n\n  // If the host is missing it might be a URL-encoded path to a socket.\n  var pathname = result.pathname\n  if (!config.host && pathname && /^%2f/i.test(pathname)) {\n    var pathnameSplit = pathname.split('/')\n    config.host = decodeURIComponent(pathnameSplit[0])\n    pathname = pathnameSplit.splice(1).join('/')\n  }\n  // result.pathname is not always guaranteed to have a '/' prefix (e.g. relative urls)\n  // only strip the slash if it is present.\n  if (pathname && pathname.charAt(0) === '/') {\n    pathname = pathname.slice(1) || null\n  }\n  config.database = pathname && decodeURI(pathname)\n\n  if (config.ssl === 'true' || config.ssl === '1') {\n    config.ssl = true\n  }\n\n  if (config.ssl === '0') {\n    config.ssl = false\n  }\n\n  if (config.sslcert || config.sslkey || config.sslrootcert || config.sslmode) {\n    config.ssl = {}\n  }\n\n  if (config.sslcert) {\n    config.ssl.cert = fs.readFileSync(config.sslcert).toString()\n  }\n\n  if (config.sslkey) {\n    config.ssl.key = fs.readFileSync(config.sslkey).toString()\n  }\n\n  if (config.sslrootcert) {\n    config.ssl.ca = fs.readFileSync(config.sslrootcert).toString()\n  }\n\n  switch (config.sslmode) {\n    case 'disable': {\n      config.ssl = false\n      break\n    }\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full': {\n      break\n    }\n    case 'no-verify': {\n      config.ssl.rejectUnauthorized = false\n      break\n    }\n  }\n\n  return config\n}\n\nmodule.exports = parse\n\nparse.parse = parse\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}