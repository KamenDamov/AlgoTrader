{"ast":null,"code":"const {\n  Request,\n  Response\n} = require('minipass-fetch');\n\nconst Minipass = require('minipass');\n\nconst MinipassCollect = require('minipass-collect');\n\nconst MinipassFlush = require('minipass-flush');\n\nconst MinipassPipeline = require('minipass-pipeline');\n\nconst cacache = require('cacache');\n\nconst url = require('url');\n\nconst CachePolicy = require('./policy.js');\n\nconst cacheKey = require('./key.js');\n\nconst remote = require('../remote.js');\n\nconst hasOwnProperty = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop); // maximum amount of data we will buffer into memory\n// if we'll exceed this, we switch to streaming\n\n\nconst MAX_MEM_SIZE = 5 * 1024 * 1024; // 5MB\n// allow list for request headers that will be written to the cache index\n// note: we will also store any request headers\n// that are named in a response's vary header\n\nconst KEEP_REQUEST_HEADERS = ['accept-charset', 'accept-encoding', 'accept-language', 'accept', 'cache-control']; // allow list for response headers that will be written to the cache index\n// note: we must not store the real response's age header, or when we load\n// a cache policy based on the metadata it will think the cached response\n// is always stale\n\nconst KEEP_RESPONSE_HEADERS = ['cache-control', 'content-encoding', 'content-language', 'content-type', 'date', 'etag', 'expires', 'last-modified', 'location', 'pragma', 'vary']; // return an object containing all metadata to be written to the index\n\nconst getMetadata = (request, response, options) => {\n  const metadata = {\n    time: Date.now(),\n    url: request.url,\n    reqHeaders: {},\n    resHeaders: {}\n  }; // only save the status if it's not a 200 or 304\n\n  if (response.status !== 200 && response.status !== 304) metadata.status = response.status;\n\n  for (const name of KEEP_REQUEST_HEADERS) {\n    if (request.headers.has(name)) metadata.reqHeaders[name] = request.headers.get(name);\n  } // if the request's host header differs from the host in the url\n  // we need to keep it, otherwise it's just noise and we ignore it\n\n\n  const host = request.headers.get('host');\n  const parsedUrl = new url.URL(request.url);\n  if (host && parsedUrl.host !== host) metadata.reqHeaders.host = host; // if the response has a vary header, make sure\n  // we store the relevant request headers too\n\n  if (response.headers.has('vary')) {\n    const vary = response.headers.get('vary'); // a vary of \"*\" means every header causes a different response.\n    // in that scenario, we do not include any additional headers\n    // as the freshness check will always fail anyway and we don't\n    // want to bloat the cache indexes\n\n    if (vary !== '*') {\n      // copy any other request headers that will vary the response\n      const varyHeaders = vary.trim().toLowerCase().split(/\\s*,\\s*/);\n\n      for (const name of varyHeaders) {\n        // explicitly ignore accept-encoding here\n        if (name !== 'accept-encoding' && request.headers.has(name)) metadata.reqHeaders[name] = request.headers.get(name);\n      }\n    }\n  }\n\n  for (const name of KEEP_RESPONSE_HEADERS) {\n    if (response.headers.has(name)) metadata.resHeaders[name] = response.headers.get(name);\n  } // we only store accept-encoding and content-encoding if the user\n  // has disabled automatic compression and decompression in minipass-fetch\n  // since if it's enabled (the default) then the content will have\n  // already been decompressed making the header a lie\n\n\n  if (options.compress === false) {\n    metadata.reqHeaders['accept-encoding'] = request.headers.get('accept-encoding');\n    metadata.resHeaders['content-encoding'] = response.headers.get('content-encoding');\n  }\n\n  return metadata;\n}; // symbols used to hide objects that may be lazily evaluated in a getter\n\n\nconst _request = Symbol('request');\n\nconst _response = Symbol('response');\n\nconst _policy = Symbol('policy');\n\nclass CacheEntry {\n  constructor(_ref) {\n    let {\n      entry,\n      request,\n      response,\n      options\n    } = _ref;\n\n    if (entry) {\n      this.key = entry.key;\n      this.entry = entry; // previous versions of this module didn't write an explicit timestamp in\n      // the metadata, so fall back to the entry's timestamp. we can't use the\n      // entry timestamp to determine staleness because cacache will update it\n      // when it verifies its data\n\n      this.entry.metadata.time = this.entry.metadata.time || this.entry.time;\n    } else this.key = cacheKey(request);\n\n    this.options = options; // these properties are behind getters that lazily evaluate\n\n    this[_request] = request;\n    this[_response] = response;\n    this[_policy] = null;\n  } // returns a CacheEntry instance that satisfies the given request\n  // or undefined if no existing entry satisfies\n\n\n  static async find(request, options) {\n    try {\n      // compacts the index and returns an array of unique entries\n      var matches = await cacache.index.compact(options.cachePath, cacheKey(request), (A, B) => {\n        const entryA = new CacheEntry({\n          entry: A,\n          options\n        });\n        const entryB = new CacheEntry({\n          entry: B,\n          options\n        });\n        return entryA.policy.satisfies(entryB.request);\n      }, {\n        validateEntry: entry => {\n          // if an integrity is null, it needs to have a status specified\n          if (entry.integrity === null) return !!(entry.metadata && entry.metadata.status);\n          return true;\n        }\n      });\n    } catch (err) {\n      // if the compact request fails, ignore the error and return\n      return;\n    } // a cache mode of 'reload' means to behave as though we have no cache\n    // on the way to the network. return undefined to allow cacheFetch to\n    // create a brand new request no matter what.\n\n\n    if (options.cache === 'reload') return; // find the specific entry that satisfies the request\n\n    let match;\n\n    for (const entry of matches) {\n      const _entry = new CacheEntry({\n        entry,\n        options\n      });\n\n      if (_entry.policy.satisfies(request)) {\n        match = _entry;\n        break;\n      }\n    }\n\n    return match;\n  } // if the user made a PUT/POST/PATCH then we invalidate our\n  // cache for the same url by deleting the index entirely\n\n\n  static async invalidate(request, options) {\n    const key = cacheKey(request);\n\n    try {\n      await cacache.rm.entry(options.cachePath, key, {\n        removeFully: true\n      });\n    } catch (err) {// ignore errors\n    }\n  }\n\n  get request() {\n    if (!this[_request]) {\n      this[_request] = new Request(this.entry.metadata.url, {\n        method: 'GET',\n        headers: this.entry.metadata.reqHeaders\n      });\n    }\n\n    return this[_request];\n  }\n\n  get response() {\n    if (!this[_response]) {\n      this[_response] = new Response(null, {\n        url: this.entry.metadata.url,\n        counter: this.options.counter,\n        status: this.entry.metadata.status || 200,\n        headers: { ...this.entry.metadata.resHeaders,\n          'content-length': this.entry.size\n        }\n      });\n    }\n\n    return this[_response];\n  }\n\n  get policy() {\n    if (!this[_policy]) {\n      this[_policy] = new CachePolicy({\n        entry: this.entry,\n        request: this.request,\n        response: this.response,\n        options: this.options\n      });\n    }\n\n    return this[_policy];\n  } // wraps the response in a pipeline that stores the data\n  // in the cache while the user consumes it\n\n\n  async store(status) {\n    // if we got a status other than 200, 301, or 308,\n    // or the CachePolicy forbid storage, append the\n    // cache status header and return it untouched\n    if (this.request.method !== 'GET' || ![200, 301, 308].includes(this.response.status) || !this.policy.storable()) {\n      this.response.headers.set('x-local-cache-status', 'skip');\n      return this.response;\n    }\n\n    const size = this.response.headers.get('content-length');\n    const fitsInMemory = !!size && Number(size) < MAX_MEM_SIZE;\n    const shouldBuffer = this.options.memoize !== false && fitsInMemory;\n    const cacheOpts = {\n      algorithms: this.options.algorithms,\n      metadata: getMetadata(this.request, this.response, this.options),\n      size,\n      memoize: fitsInMemory && this.options.memoize\n    };\n    let body = null; // we only set a body if the status is a 200, redirects are\n    // stored as metadata only\n\n    if (this.response.status === 200) {\n      let cacheWriteResolve, cacheWriteReject;\n      const cacheWritePromise = new Promise((resolve, reject) => {\n        cacheWriteResolve = resolve;\n        cacheWriteReject = reject;\n      });\n      body = new MinipassPipeline(new MinipassFlush({\n        flush() {\n          return cacheWritePromise;\n        }\n\n      }));\n      let abortStream, onResume;\n\n      if (shouldBuffer) {\n        // if the result fits in memory, use a collect stream to gather\n        // the response and write it to cacache while also passing it through\n        // to the user\n        onResume = () => {\n          const collector = new MinipassCollect.PassThrough();\n          abortStream = collector;\n          collector.on('collect', data => {\n            // TODO if the cache write fails, log a warning but return the response anyway\n            cacache.put(this.options.cachePath, this.key, data, cacheOpts).then(cacheWriteResolve, cacheWriteReject);\n          });\n          body.unshift(collector);\n          body.unshift(this.response.body);\n        };\n      } else {\n        // if it does not fit in memory, create a tee stream and use\n        // that to pipe to both the cache and the user simultaneously\n        onResume = () => {\n          const tee = new Minipass();\n          const cacheStream = cacache.put.stream(this.options.cachePath, this.key, cacheOpts);\n          abortStream = cacheStream;\n          tee.pipe(cacheStream); // TODO if the cache write fails, log a warning but return the response anyway\n\n          cacheStream.promise().then(cacheWriteResolve, cacheWriteReject);\n          body.unshift(tee);\n          body.unshift(this.response.body);\n        };\n      }\n\n      body.once('resume', onResume);\n      body.once('end', () => body.removeListener('resume', onResume));\n      this.response.body.on('error', err => {\n        // the abortStream will either be a MinipassCollect if we buffer\n        // or a cacache write stream, either way be sure to listen for\n        // errors from the actual response and avoid writing data that we\n        // know to be invalid to the cache\n        abortStream.destroy(err);\n      });\n    } else await cacache.index.insert(this.options.cachePath, this.key, null, cacheOpts); // note: we do not set the x-local-cache-hash header because we do not know\n    // the hash value until after the write to the cache completes, which doesn't\n    // happen until after the response has been sent and it's too late to write\n    // the header anyway\n\n\n    this.response.headers.set('x-local-cache', encodeURIComponent(this.options.cachePath));\n    this.response.headers.set('x-local-cache-key', encodeURIComponent(this.key));\n    this.response.headers.set('x-local-cache-mode', shouldBuffer ? 'buffer' : 'stream');\n    this.response.headers.set('x-local-cache-status', status);\n    this.response.headers.set('x-local-cache-time', new Date().toISOString());\n    const newResponse = new Response(body, {\n      url: this.response.url,\n      status: this.response.status,\n      headers: this.response.headers,\n      counter: this.options.counter\n    });\n    return newResponse;\n  } // use the cached data to create a response and return it\n\n\n  async respond(method, options, status) {\n    let response;\n    const size = Number(this.response.headers.get('content-length'));\n    const fitsInMemory = !!size && size < MAX_MEM_SIZE;\n    const shouldBuffer = this.options.memoize !== false && fitsInMemory;\n\n    if (method === 'HEAD' || [301, 308].includes(this.response.status)) {\n      // if the request is a HEAD, or the response is a redirect,\n      // then the metadata in the entry already includes everything\n      // we need to build a response\n      response = this.response;\n    } else {\n      // we're responding with a full cached response, so create a body\n      // that reads from cacache and attach it to a new Response\n      const body = new Minipass();\n\n      const removeOnResume = () => body.removeListener('resume', onResume);\n\n      let onResume;\n\n      if (shouldBuffer) {\n        onResume = async () => {\n          removeOnResume();\n\n          try {\n            const content = await cacache.get.byDigest(this.options.cachePath, this.entry.integrity, {\n              memoize: this.options.memoize\n            });\n            body.end(content);\n          } catch (err) {\n            if (err.code === 'EINTEGRITY') await cacache.rm.content(this.options.cachePath, this.entry.integrity, {\n              memoize: this.options.memoize\n            });\n            if (err.code === 'ENOENT' || err.code === 'EINTEGRITY') await CacheEntry.invalidate(this.request, this.options);\n            body.emit('error', err);\n          }\n        };\n      } else {\n        onResume = () => {\n          const cacheStream = cacache.get.stream.byDigest(this.options.cachePath, this.entry.integrity, {\n            memoize: this.options.memoize\n          });\n          cacheStream.on('error', async err => {\n            cacheStream.pause();\n            if (err.code === 'EINTEGRITY') await cacache.rm.content(this.options.cachePath, this.entry.integrity, {\n              memoize: this.options.memoize\n            });\n            if (err.code === 'ENOENT' || err.code === 'EINTEGRITY') await CacheEntry.invalidate(this.request, this.options);\n            body.emit('error', err);\n            cacheStream.resume();\n          });\n          cacheStream.pipe(body);\n        };\n      }\n\n      body.once('resume', onResume);\n      body.once('end', removeOnResume);\n      response = new Response(body, {\n        url: this.entry.metadata.url,\n        counter: options.counter,\n        status: 200,\n        headers: { ...this.policy.responseHeaders()\n        }\n      });\n    }\n\n    response.headers.set('x-local-cache', encodeURIComponent(this.options.cachePath));\n    response.headers.set('x-local-cache-hash', encodeURIComponent(this.entry.integrity));\n    response.headers.set('x-local-cache-key', encodeURIComponent(this.key));\n    response.headers.set('x-local-cache-mode', shouldBuffer ? 'buffer' : 'stream');\n    response.headers.set('x-local-cache-status', status);\n    response.headers.set('x-local-cache-time', new Date(this.entry.metadata.time).toUTCString());\n    return response;\n  } // use the provided request along with this cache entry to\n  // revalidate the stored response. returns a response, either\n  // from the cache or from the update\n\n\n  async revalidate(request, options) {\n    const revalidateRequest = new Request(request, {\n      headers: this.policy.revalidationHeaders(request)\n    });\n\n    try {\n      // NOTE: be sure to remove the headers property from the\n      // user supplied options, since we have already defined\n      // them on the new request object. if they're still in the\n      // options then those will overwrite the ones from the policy\n      var response = await remote(revalidateRequest, { ...options,\n        headers: undefined\n      });\n    } catch (err) {\n      // if the network fetch fails, return the stale\n      // cached response unless it has a cache-control\n      // of 'must-revalidate'\n      if (!this.policy.mustRevalidate) return this.respond(request.method, options, 'stale');\n      throw err;\n    }\n\n    if (this.policy.revalidated(revalidateRequest, response)) {\n      // we got a 304, write a new index to the cache and respond from cache\n      const metadata = getMetadata(request, response, options); // 304 responses do not include headers that are specific to the response data\n      // since they do not include a body, so we copy values for headers that were\n      // in the old cache entry to the new one, if the new metadata does not already\n      // include that header\n\n      for (const name of KEEP_RESPONSE_HEADERS) {\n        if (!hasOwnProperty(metadata.resHeaders, name) && hasOwnProperty(this.entry.metadata.resHeaders, name)) metadata.resHeaders[name] = this.entry.metadata.resHeaders[name];\n      }\n\n      try {\n        await cacache.index.insert(options.cachePath, this.key, this.entry.integrity, {\n          size: this.entry.size,\n          metadata\n        });\n      } catch (err) {// if updating the cache index fails, we ignore it and\n        // respond anyway\n      }\n\n      return this.respond(request.method, options, 'revalidated');\n    } // if we got a modified response, create a new entry based on it\n\n\n    const newEntry = new CacheEntry({\n      request,\n      response,\n      options\n    }); // respond with the new entry while writing it to the cache\n\n    return newEntry.store('updated');\n  }\n\n}\n\nmodule.exports = CacheEntry;","map":{"version":3,"names":["Request","Response","require","Minipass","MinipassCollect","MinipassFlush","MinipassPipeline","cacache","url","CachePolicy","cacheKey","remote","hasOwnProperty","obj","prop","Object","prototype","call","MAX_MEM_SIZE","KEEP_REQUEST_HEADERS","KEEP_RESPONSE_HEADERS","getMetadata","request","response","options","metadata","time","Date","now","reqHeaders","resHeaders","status","name","headers","has","get","host","parsedUrl","URL","vary","varyHeaders","trim","toLowerCase","split","compress","_request","Symbol","_response","_policy","CacheEntry","constructor","entry","key","find","matches","index","compact","cachePath","A","B","entryA","entryB","policy","satisfies","validateEntry","integrity","err","cache","match","_entry","invalidate","rm","removeFully","method","counter","size","store","includes","storable","set","fitsInMemory","Number","shouldBuffer","memoize","cacheOpts","algorithms","body","cacheWriteResolve","cacheWriteReject","cacheWritePromise","Promise","resolve","reject","flush","abortStream","onResume","collector","PassThrough","on","data","put","then","unshift","tee","cacheStream","stream","pipe","promise","once","removeListener","destroy","insert","encodeURIComponent","toISOString","newResponse","respond","removeOnResume","content","byDigest","end","code","emit","pause","resume","responseHeaders","toUTCString","revalidate","revalidateRequest","revalidationHeaders","undefined","mustRevalidate","revalidated","newEntry","module","exports"],"sources":["C:/Users/Kamen/ML/AlgoTrader/node_modules/make-fetch-happen/lib/cache/entry.js"],"sourcesContent":["const { Request, Response } = require('minipass-fetch')\nconst Minipass = require('minipass')\nconst MinipassCollect = require('minipass-collect')\nconst MinipassFlush = require('minipass-flush')\nconst MinipassPipeline = require('minipass-pipeline')\nconst cacache = require('cacache')\nconst url = require('url')\n\nconst CachePolicy = require('./policy.js')\nconst cacheKey = require('./key.js')\nconst remote = require('../remote.js')\n\nconst hasOwnProperty = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)\n\n// maximum amount of data we will buffer into memory\n// if we'll exceed this, we switch to streaming\nconst MAX_MEM_SIZE = 5 * 1024 * 1024 // 5MB\n\n// allow list for request headers that will be written to the cache index\n// note: we will also store any request headers\n// that are named in a response's vary header\nconst KEEP_REQUEST_HEADERS = [\n  'accept-charset',\n  'accept-encoding',\n  'accept-language',\n  'accept',\n  'cache-control',\n]\n\n// allow list for response headers that will be written to the cache index\n// note: we must not store the real response's age header, or when we load\n// a cache policy based on the metadata it will think the cached response\n// is always stale\nconst KEEP_RESPONSE_HEADERS = [\n  'cache-control',\n  'content-encoding',\n  'content-language',\n  'content-type',\n  'date',\n  'etag',\n  'expires',\n  'last-modified',\n  'location',\n  'pragma',\n  'vary',\n]\n\n// return an object containing all metadata to be written to the index\nconst getMetadata = (request, response, options) => {\n  const metadata = {\n    time: Date.now(),\n    url: request.url,\n    reqHeaders: {},\n    resHeaders: {},\n  }\n\n  // only save the status if it's not a 200 or 304\n  if (response.status !== 200 && response.status !== 304)\n    metadata.status = response.status\n\n  for (const name of KEEP_REQUEST_HEADERS) {\n    if (request.headers.has(name))\n      metadata.reqHeaders[name] = request.headers.get(name)\n  }\n\n  // if the request's host header differs from the host in the url\n  // we need to keep it, otherwise it's just noise and we ignore it\n  const host = request.headers.get('host')\n  const parsedUrl = new url.URL(request.url)\n  if (host && parsedUrl.host !== host)\n    metadata.reqHeaders.host = host\n\n  // if the response has a vary header, make sure\n  // we store the relevant request headers too\n  if (response.headers.has('vary')) {\n    const vary = response.headers.get('vary')\n    // a vary of \"*\" means every header causes a different response.\n    // in that scenario, we do not include any additional headers\n    // as the freshness check will always fail anyway and we don't\n    // want to bloat the cache indexes\n    if (vary !== '*') {\n      // copy any other request headers that will vary the response\n      const varyHeaders = vary.trim().toLowerCase().split(/\\s*,\\s*/)\n      for (const name of varyHeaders) {\n        // explicitly ignore accept-encoding here\n        if (name !== 'accept-encoding' && request.headers.has(name))\n          metadata.reqHeaders[name] = request.headers.get(name)\n      }\n    }\n  }\n\n  for (const name of KEEP_RESPONSE_HEADERS) {\n    if (response.headers.has(name))\n      metadata.resHeaders[name] = response.headers.get(name)\n  }\n\n  // we only store accept-encoding and content-encoding if the user\n  // has disabled automatic compression and decompression in minipass-fetch\n  // since if it's enabled (the default) then the content will have\n  // already been decompressed making the header a lie\n  if (options.compress === false) {\n    metadata.reqHeaders['accept-encoding'] = request.headers.get('accept-encoding')\n    metadata.resHeaders['content-encoding'] = response.headers.get('content-encoding')\n  }\n\n  return metadata\n}\n\n// symbols used to hide objects that may be lazily evaluated in a getter\nconst _request = Symbol('request')\nconst _response = Symbol('response')\nconst _policy = Symbol('policy')\n\nclass CacheEntry {\n  constructor ({ entry, request, response, options }) {\n    if (entry) {\n      this.key = entry.key\n      this.entry = entry\n      // previous versions of this module didn't write an explicit timestamp in\n      // the metadata, so fall back to the entry's timestamp. we can't use the\n      // entry timestamp to determine staleness because cacache will update it\n      // when it verifies its data\n      this.entry.metadata.time = this.entry.metadata.time || this.entry.time\n    } else\n      this.key = cacheKey(request)\n\n    this.options = options\n\n    // these properties are behind getters that lazily evaluate\n    this[_request] = request\n    this[_response] = response\n    this[_policy] = null\n  }\n\n  // returns a CacheEntry instance that satisfies the given request\n  // or undefined if no existing entry satisfies\n  static async find (request, options) {\n    try {\n      // compacts the index and returns an array of unique entries\n      var matches = await cacache.index.compact(options.cachePath, cacheKey(request), (A, B) => {\n        const entryA = new CacheEntry({ entry: A, options })\n        const entryB = new CacheEntry({ entry: B, options })\n        return entryA.policy.satisfies(entryB.request)\n      }, {\n        validateEntry: (entry) => {\n          // if an integrity is null, it needs to have a status specified\n          if (entry.integrity === null)\n            return !!(entry.metadata && entry.metadata.status)\n\n          return true\n        },\n      })\n    } catch (err) {\n      // if the compact request fails, ignore the error and return\n      return\n    }\n\n    // a cache mode of 'reload' means to behave as though we have no cache\n    // on the way to the network. return undefined to allow cacheFetch to\n    // create a brand new request no matter what.\n    if (options.cache === 'reload')\n      return\n\n    // find the specific entry that satisfies the request\n    let match\n    for (const entry of matches) {\n      const _entry = new CacheEntry({\n        entry,\n        options,\n      })\n\n      if (_entry.policy.satisfies(request)) {\n        match = _entry\n        break\n      }\n    }\n\n    return match\n  }\n\n  // if the user made a PUT/POST/PATCH then we invalidate our\n  // cache for the same url by deleting the index entirely\n  static async invalidate (request, options) {\n    const key = cacheKey(request)\n    try {\n      await cacache.rm.entry(options.cachePath, key, { removeFully: true })\n    } catch (err) {\n      // ignore errors\n    }\n  }\n\n  get request () {\n    if (!this[_request]) {\n      this[_request] = new Request(this.entry.metadata.url, {\n        method: 'GET',\n        headers: this.entry.metadata.reqHeaders,\n      })\n    }\n\n    return this[_request]\n  }\n\n  get response () {\n    if (!this[_response]) {\n      this[_response] = new Response(null, {\n        url: this.entry.metadata.url,\n        counter: this.options.counter,\n        status: this.entry.metadata.status || 200,\n        headers: {\n          ...this.entry.metadata.resHeaders,\n          'content-length': this.entry.size,\n        },\n      })\n    }\n\n    return this[_response]\n  }\n\n  get policy () {\n    if (!this[_policy]) {\n      this[_policy] = new CachePolicy({\n        entry: this.entry,\n        request: this.request,\n        response: this.response,\n        options: this.options,\n      })\n    }\n\n    return this[_policy]\n  }\n\n  // wraps the response in a pipeline that stores the data\n  // in the cache while the user consumes it\n  async store (status) {\n    // if we got a status other than 200, 301, or 308,\n    // or the CachePolicy forbid storage, append the\n    // cache status header and return it untouched\n    if (this.request.method !== 'GET' || ![200, 301, 308].includes(this.response.status) || !this.policy.storable()) {\n      this.response.headers.set('x-local-cache-status', 'skip')\n      return this.response\n    }\n\n    const size = this.response.headers.get('content-length')\n    const fitsInMemory = !!size && Number(size) < MAX_MEM_SIZE\n    const shouldBuffer = this.options.memoize !== false && fitsInMemory\n    const cacheOpts = {\n      algorithms: this.options.algorithms,\n      metadata: getMetadata(this.request, this.response, this.options),\n      size,\n      memoize: fitsInMemory && this.options.memoize,\n    }\n\n    let body = null\n    // we only set a body if the status is a 200, redirects are\n    // stored as metadata only\n    if (this.response.status === 200) {\n      let cacheWriteResolve, cacheWriteReject\n      const cacheWritePromise = new Promise((resolve, reject) => {\n        cacheWriteResolve = resolve\n        cacheWriteReject = reject\n      })\n\n      body = new MinipassPipeline(new MinipassFlush({\n        flush () {\n          return cacheWritePromise\n        },\n      }))\n\n      let abortStream, onResume\n      if (shouldBuffer) {\n        // if the result fits in memory, use a collect stream to gather\n        // the response and write it to cacache while also passing it through\n        // to the user\n        onResume = () => {\n          const collector = new MinipassCollect.PassThrough()\n          abortStream = collector\n          collector.on('collect', (data) => {\n            // TODO if the cache write fails, log a warning but return the response anyway\n            cacache.put(this.options.cachePath, this.key, data, cacheOpts).then(cacheWriteResolve, cacheWriteReject)\n          })\n          body.unshift(collector)\n          body.unshift(this.response.body)\n        }\n      } else {\n        // if it does not fit in memory, create a tee stream and use\n        // that to pipe to both the cache and the user simultaneously\n        onResume = () => {\n          const tee = new Minipass()\n          const cacheStream = cacache.put.stream(this.options.cachePath, this.key, cacheOpts)\n          abortStream = cacheStream\n          tee.pipe(cacheStream)\n          // TODO if the cache write fails, log a warning but return the response anyway\n          cacheStream.promise().then(cacheWriteResolve, cacheWriteReject)\n          body.unshift(tee)\n          body.unshift(this.response.body)\n        }\n      }\n\n      body.once('resume', onResume)\n      body.once('end', () => body.removeListener('resume', onResume))\n      this.response.body.on('error', (err) => {\n        // the abortStream will either be a MinipassCollect if we buffer\n        // or a cacache write stream, either way be sure to listen for\n        // errors from the actual response and avoid writing data that we\n        // know to be invalid to the cache\n        abortStream.destroy(err)\n      })\n    } else\n      await cacache.index.insert(this.options.cachePath, this.key, null, cacheOpts)\n\n    // note: we do not set the x-local-cache-hash header because we do not know\n    // the hash value until after the write to the cache completes, which doesn't\n    // happen until after the response has been sent and it's too late to write\n    // the header anyway\n    this.response.headers.set('x-local-cache', encodeURIComponent(this.options.cachePath))\n    this.response.headers.set('x-local-cache-key', encodeURIComponent(this.key))\n    this.response.headers.set('x-local-cache-mode', shouldBuffer ? 'buffer' : 'stream')\n    this.response.headers.set('x-local-cache-status', status)\n    this.response.headers.set('x-local-cache-time', new Date().toISOString())\n    const newResponse = new Response(body, {\n      url: this.response.url,\n      status: this.response.status,\n      headers: this.response.headers,\n      counter: this.options.counter,\n    })\n    return newResponse\n  }\n\n  // use the cached data to create a response and return it\n  async respond (method, options, status) {\n    let response\n    const size = Number(this.response.headers.get('content-length'))\n    const fitsInMemory = !!size && size < MAX_MEM_SIZE\n    const shouldBuffer = this.options.memoize !== false && fitsInMemory\n    if (method === 'HEAD' || [301, 308].includes(this.response.status)) {\n      // if the request is a HEAD, or the response is a redirect,\n      // then the metadata in the entry already includes everything\n      // we need to build a response\n      response = this.response\n    } else {\n      // we're responding with a full cached response, so create a body\n      // that reads from cacache and attach it to a new Response\n      const body = new Minipass()\n      const removeOnResume = () => body.removeListener('resume', onResume)\n      let onResume\n      if (shouldBuffer) {\n        onResume = async () => {\n          removeOnResume()\n          try {\n            const content = await cacache.get.byDigest(this.options.cachePath, this.entry.integrity, { memoize: this.options.memoize })\n            body.end(content)\n          } catch (err) {\n            if (err.code === 'EINTEGRITY')\n              await cacache.rm.content(this.options.cachePath, this.entry.integrity, { memoize: this.options.memoize })\n            if (err.code === 'ENOENT' || err.code === 'EINTEGRITY')\n              await CacheEntry.invalidate(this.request, this.options)\n            body.emit('error', err)\n          }\n        }\n      } else {\n        onResume = () => {\n          const cacheStream = cacache.get.stream.byDigest(this.options.cachePath, this.entry.integrity, { memoize: this.options.memoize })\n          cacheStream.on('error', async (err) => {\n            cacheStream.pause()\n            if (err.code === 'EINTEGRITY')\n              await cacache.rm.content(this.options.cachePath, this.entry.integrity, { memoize: this.options.memoize })\n            if (err.code === 'ENOENT' || err.code === 'EINTEGRITY')\n              await CacheEntry.invalidate(this.request, this.options)\n            body.emit('error', err)\n            cacheStream.resume()\n          })\n          cacheStream.pipe(body)\n        }\n      }\n\n      body.once('resume', onResume)\n      body.once('end', removeOnResume)\n      response = new Response(body, {\n        url: this.entry.metadata.url,\n        counter: options.counter,\n        status: 200,\n        headers: {\n          ...this.policy.responseHeaders(),\n        },\n      })\n    }\n\n    response.headers.set('x-local-cache', encodeURIComponent(this.options.cachePath))\n    response.headers.set('x-local-cache-hash', encodeURIComponent(this.entry.integrity))\n    response.headers.set('x-local-cache-key', encodeURIComponent(this.key))\n    response.headers.set('x-local-cache-mode', shouldBuffer ? 'buffer' : 'stream')\n    response.headers.set('x-local-cache-status', status)\n    response.headers.set('x-local-cache-time', new Date(this.entry.metadata.time).toUTCString())\n    return response\n  }\n\n  // use the provided request along with this cache entry to\n  // revalidate the stored response. returns a response, either\n  // from the cache or from the update\n  async revalidate (request, options) {\n    const revalidateRequest = new Request(request, {\n      headers: this.policy.revalidationHeaders(request),\n    })\n\n    try {\n      // NOTE: be sure to remove the headers property from the\n      // user supplied options, since we have already defined\n      // them on the new request object. if they're still in the\n      // options then those will overwrite the ones from the policy\n      var response = await remote(revalidateRequest, {\n        ...options,\n        headers: undefined,\n      })\n    } catch (err) {\n      // if the network fetch fails, return the stale\n      // cached response unless it has a cache-control\n      // of 'must-revalidate'\n      if (!this.policy.mustRevalidate)\n        return this.respond(request.method, options, 'stale')\n\n      throw err\n    }\n\n    if (this.policy.revalidated(revalidateRequest, response)) {\n      // we got a 304, write a new index to the cache and respond from cache\n      const metadata = getMetadata(request, response, options)\n      // 304 responses do not include headers that are specific to the response data\n      // since they do not include a body, so we copy values for headers that were\n      // in the old cache entry to the new one, if the new metadata does not already\n      // include that header\n      for (const name of KEEP_RESPONSE_HEADERS) {\n        if (!hasOwnProperty(metadata.resHeaders, name) && hasOwnProperty(this.entry.metadata.resHeaders, name))\n          metadata.resHeaders[name] = this.entry.metadata.resHeaders[name]\n      }\n\n      try {\n        await cacache.index.insert(options.cachePath, this.key, this.entry.integrity, {\n          size: this.entry.size,\n          metadata,\n        })\n      } catch (err) {\n        // if updating the cache index fails, we ignore it and\n        // respond anyway\n      }\n      return this.respond(request.method, options, 'revalidated')\n    }\n\n    // if we got a modified response, create a new entry based on it\n    const newEntry = new CacheEntry({\n      request,\n      response,\n      options,\n    })\n\n    // respond with the new entry while writing it to the cache\n    return newEntry.store('updated')\n  }\n}\n\nmodule.exports = CacheEntry\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}