{"ast":null,"code":"'use strict';\n\nconst util = require('util');\n\nconst fs = require('fs');\n\nconst fsm = require('fs-minipass');\n\nconst ssri = require('ssri');\n\nconst contentPath = require('./path');\n\nconst Pipeline = require('minipass-pipeline');\n\nconst lstat = util.promisify(fs.lstat);\nconst readFile = util.promisify(fs.readFile);\nmodule.exports = read;\nconst MAX_SINGLE_READ_SIZE = 64 * 1024 * 1024;\n\nfunction read(cache, integrity) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    size\n  } = opts;\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    // get size\n    return lstat(cpath).then(stat => ({\n      stat,\n      cpath,\n      sri\n    }));\n  }).then(_ref => {\n    let {\n      stat,\n      cpath,\n      sri\n    } = _ref;\n    if (typeof size === 'number' && stat.size !== size) throw sizeError(size, stat.size);\n    if (stat.size > MAX_SINGLE_READ_SIZE) return readPipeline(cpath, stat.size, sri, new Pipeline()).concat();\n    return readFile(cpath, null).then(data => {\n      if (!ssri.checkData(data, sri)) throw integrityError(sri, cpath);\n      return data;\n    });\n  });\n}\n\nconst readPipeline = (cpath, size, sri, stream) => {\n  stream.push(new fsm.ReadStream(cpath, {\n    size,\n    readSize: MAX_SINGLE_READ_SIZE\n  }), ssri.integrityStream({\n    integrity: sri,\n    size\n  }));\n  return stream;\n};\n\nmodule.exports.sync = readSync;\n\nfunction readSync(cache, integrity) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    size\n  } = opts;\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    const data = fs.readFileSync(cpath);\n    if (typeof size === 'number' && size !== data.length) throw sizeError(size, data.length);\n    if (ssri.checkData(data, sri)) return data;\n    throw integrityError(sri, cpath);\n  });\n}\n\nmodule.exports.stream = readStream;\nmodule.exports.readStream = readStream;\n\nfunction readStream(cache, integrity) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    size\n  } = opts;\n  const stream = new Pipeline();\n  withContentSri(cache, integrity, (cpath, sri) => {\n    // just lstat to ensure it exists\n    return lstat(cpath).then(stat => ({\n      stat,\n      cpath,\n      sri\n    }));\n  }).then(_ref2 => {\n    let {\n      stat,\n      cpath,\n      sri\n    } = _ref2;\n    if (typeof size === 'number' && size !== stat.size) return stream.emit('error', sizeError(size, stat.size));\n    readPipeline(cpath, stat.size, sri, stream);\n  }, er => stream.emit('error', er));\n  return stream;\n}\n\nlet copyFile;\n\nif (fs.copyFile) {\n  module.exports.copy = copy;\n  module.exports.copy.sync = copySync;\n  copyFile = util.promisify(fs.copyFile);\n}\n\nfunction copy(cache, integrity, dest) {\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return copyFile(cpath, dest);\n  });\n}\n\nfunction copySync(cache, integrity, dest) {\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    return fs.copyFileSync(cpath, dest);\n  });\n}\n\nmodule.exports.hasContent = hasContent;\n\nfunction hasContent(cache, integrity) {\n  if (!integrity) return Promise.resolve(false);\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return lstat(cpath).then(stat => ({\n      size: stat.size,\n      sri,\n      stat\n    }));\n  }).catch(err => {\n    if (err.code === 'ENOENT') return false;\n\n    if (err.code === 'EPERM') {\n      /* istanbul ignore else */\n      if (process.platform !== 'win32') throw err;else return false;\n    }\n  });\n}\n\nmodule.exports.hasContent.sync = hasContentSync;\n\nfunction hasContentSync(cache, integrity) {\n  if (!integrity) return false;\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    try {\n      const stat = fs.lstatSync(cpath);\n      return {\n        size: stat.size,\n        sri,\n        stat\n      };\n    } catch (err) {\n      if (err.code === 'ENOENT') return false;\n\n      if (err.code === 'EPERM') {\n        /* istanbul ignore else */\n        if (process.platform !== 'win32') throw err;else return false;\n      }\n    }\n  });\n}\n\nfunction withContentSri(cache, integrity, fn) {\n  const tryFn = () => {\n    const sri = ssri.parse(integrity); // If `integrity` has multiple entries, pick the first digest\n    // with available local data.\n\n    const algo = sri.pickAlgorithm();\n    const digests = sri[algo];\n\n    if (digests.length <= 1) {\n      const cpath = contentPath(cache, digests[0]);\n      return fn(cpath, digests[0]);\n    } else {\n      // Can't use race here because a generic error can happen before\n      // a ENOENT error, and can happen before a valid result\n      return Promise.all(digests.map(meta => {\n        return withContentSri(cache, meta, fn).catch(err => {\n          if (err.code === 'ENOENT') {\n            return Object.assign(new Error('No matching content found for ' + sri.toString()), {\n              code: 'ENOENT'\n            });\n          }\n\n          return err;\n        });\n      })).then(results => {\n        // Return the first non error if it is found\n        const result = results.find(r => !(r instanceof Error));\n        if (result) return result; // Throw the No matching content found error\n\n        const enoentError = results.find(r => r.code === 'ENOENT');\n        if (enoentError) throw enoentError; // Throw generic error\n\n        throw results.find(r => r instanceof Error);\n      });\n    }\n  };\n\n  return new Promise((resolve, reject) => {\n    try {\n      tryFn().then(resolve).catch(reject);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\nfunction withContentSriSync(cache, integrity, fn) {\n  const sri = ssri.parse(integrity); // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n\n  const algo = sri.pickAlgorithm();\n  const digests = sri[algo];\n\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0]);\n    return fn(cpath, digests[0]);\n  } else {\n    let lastErr = null;\n\n    for (const meta of digests) {\n      try {\n        return withContentSriSync(cache, meta, fn);\n      } catch (err) {\n        lastErr = err;\n      }\n    }\n\n    throw lastErr;\n  }\n}\n\nfunction sizeError(expected, found) {\n  const err = new Error(`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`);\n  err.expected = expected;\n  err.found = found;\n  err.code = 'EBADSIZE';\n  return err;\n}\n\nfunction integrityError(sri, path) {\n  const err = new Error(`Integrity verification failed for ${sri} (${path})`);\n  err.code = 'EINTEGRITY';\n  err.sri = sri;\n  err.path = path;\n  return err;\n}","map":{"version":3,"names":["util","require","fs","fsm","ssri","contentPath","Pipeline","lstat","promisify","readFile","module","exports","read","MAX_SINGLE_READ_SIZE","cache","integrity","opts","size","withContentSri","cpath","sri","then","stat","sizeError","readPipeline","concat","data","checkData","integrityError","stream","push","ReadStream","readSize","integrityStream","sync","readSync","withContentSriSync","readFileSync","length","readStream","emit","er","copyFile","copy","copySync","dest","copyFileSync","hasContent","Promise","resolve","catch","err","code","process","platform","hasContentSync","lstatSync","fn","tryFn","parse","algo","pickAlgorithm","digests","all","map","meta","Object","assign","Error","toString","results","result","find","r","enoentError","reject","lastErr","expected","found","path"],"sources":["C:/Users/Kamen/ML/AlgoTrader/node_modules/cacache/lib/content/read.js"],"sourcesContent":["'use strict'\n\nconst util = require('util')\n\nconst fs = require('fs')\nconst fsm = require('fs-minipass')\nconst ssri = require('ssri')\nconst contentPath = require('./path')\nconst Pipeline = require('minipass-pipeline')\n\nconst lstat = util.promisify(fs.lstat)\nconst readFile = util.promisify(fs.readFile)\n\nmodule.exports = read\n\nconst MAX_SINGLE_READ_SIZE = 64 * 1024 * 1024\nfunction read (cache, integrity, opts = {}) {\n  const { size } = opts\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    // get size\n    return lstat(cpath).then(stat => ({ stat, cpath, sri }))\n  }).then(({ stat, cpath, sri }) => {\n    if (typeof size === 'number' && stat.size !== size)\n      throw sizeError(size, stat.size)\n\n    if (stat.size > MAX_SINGLE_READ_SIZE)\n      return readPipeline(cpath, stat.size, sri, new Pipeline()).concat()\n\n    return readFile(cpath, null).then((data) => {\n      if (!ssri.checkData(data, sri))\n        throw integrityError(sri, cpath)\n\n      return data\n    })\n  })\n}\n\nconst readPipeline = (cpath, size, sri, stream) => {\n  stream.push(\n    new fsm.ReadStream(cpath, {\n      size,\n      readSize: MAX_SINGLE_READ_SIZE,\n    }),\n    ssri.integrityStream({\n      integrity: sri,\n      size,\n    })\n  )\n  return stream\n}\n\nmodule.exports.sync = readSync\n\nfunction readSync (cache, integrity, opts = {}) {\n  const { size } = opts\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    const data = fs.readFileSync(cpath)\n    if (typeof size === 'number' && size !== data.length)\n      throw sizeError(size, data.length)\n\n    if (ssri.checkData(data, sri))\n      return data\n\n    throw integrityError(sri, cpath)\n  })\n}\n\nmodule.exports.stream = readStream\nmodule.exports.readStream = readStream\n\nfunction readStream (cache, integrity, opts = {}) {\n  const { size } = opts\n  const stream = new Pipeline()\n  withContentSri(cache, integrity, (cpath, sri) => {\n    // just lstat to ensure it exists\n    return lstat(cpath).then((stat) => ({ stat, cpath, sri }))\n  }).then(({ stat, cpath, sri }) => {\n    if (typeof size === 'number' && size !== stat.size)\n      return stream.emit('error', sizeError(size, stat.size))\n\n    readPipeline(cpath, stat.size, sri, stream)\n  }, er => stream.emit('error', er))\n\n  return stream\n}\n\nlet copyFile\nif (fs.copyFile) {\n  module.exports.copy = copy\n  module.exports.copy.sync = copySync\n  copyFile = util.promisify(fs.copyFile)\n}\n\nfunction copy (cache, integrity, dest) {\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return copyFile(cpath, dest)\n  })\n}\n\nfunction copySync (cache, integrity, dest) {\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    return fs.copyFileSync(cpath, dest)\n  })\n}\n\nmodule.exports.hasContent = hasContent\n\nfunction hasContent (cache, integrity) {\n  if (!integrity)\n    return Promise.resolve(false)\n\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return lstat(cpath).then((stat) => ({ size: stat.size, sri, stat }))\n  }).catch((err) => {\n    if (err.code === 'ENOENT')\n      return false\n\n    if (err.code === 'EPERM') {\n      /* istanbul ignore else */\n      if (process.platform !== 'win32')\n        throw err\n      else\n        return false\n    }\n  })\n}\n\nmodule.exports.hasContent.sync = hasContentSync\n\nfunction hasContentSync (cache, integrity) {\n  if (!integrity)\n    return false\n\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    try {\n      const stat = fs.lstatSync(cpath)\n      return { size: stat.size, sri, stat }\n    } catch (err) {\n      if (err.code === 'ENOENT')\n        return false\n\n      if (err.code === 'EPERM') {\n        /* istanbul ignore else */\n        if (process.platform !== 'win32')\n          throw err\n        else\n          return false\n      }\n    }\n  })\n}\n\nfunction withContentSri (cache, integrity, fn) {\n  const tryFn = () => {\n    const sri = ssri.parse(integrity)\n    // If `integrity` has multiple entries, pick the first digest\n    // with available local data.\n    const algo = sri.pickAlgorithm()\n    const digests = sri[algo]\n\n    if (digests.length <= 1) {\n      const cpath = contentPath(cache, digests[0])\n      return fn(cpath, digests[0])\n    } else {\n      // Can't use race here because a generic error can happen before\n      // a ENOENT error, and can happen before a valid result\n      return Promise\n        .all(digests.map((meta) => {\n          return withContentSri(cache, meta, fn)\n            .catch((err) => {\n              if (err.code === 'ENOENT') {\n                return Object.assign(\n                  new Error('No matching content found for ' + sri.toString()),\n                  { code: 'ENOENT' }\n                )\n              }\n              return err\n            })\n        }))\n        .then((results) => {\n          // Return the first non error if it is found\n          const result = results.find((r) => !(r instanceof Error))\n          if (result)\n            return result\n\n          // Throw the No matching content found error\n          const enoentError = results.find((r) => r.code === 'ENOENT')\n          if (enoentError)\n            throw enoentError\n\n          // Throw generic error\n          throw results.find((r) => r instanceof Error)\n        })\n    }\n  }\n\n  return new Promise((resolve, reject) => {\n    try {\n      tryFn()\n        .then(resolve)\n        .catch(reject)\n    } catch (err) {\n      reject(err)\n    }\n  })\n}\n\nfunction withContentSriSync (cache, integrity, fn) {\n  const sri = ssri.parse(integrity)\n  // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n  const algo = sri.pickAlgorithm()\n  const digests = sri[algo]\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0])\n    return fn(cpath, digests[0])\n  } else {\n    let lastErr = null\n    for (const meta of digests) {\n      try {\n        return withContentSriSync(cache, meta, fn)\n      } catch (err) {\n        lastErr = err\n      }\n    }\n    throw lastErr\n  }\n}\n\nfunction sizeError (expected, found) {\n  const err = new Error(`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`)\n  err.expected = expected\n  err.found = found\n  err.code = 'EBADSIZE'\n  return err\n}\n\nfunction integrityError (sri, path) {\n  const err = new Error(`Integrity verification failed for ${sri} (${path})`)\n  err.code = 'EINTEGRITY'\n  err.sri = sri\n  err.path = path\n  return err\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}