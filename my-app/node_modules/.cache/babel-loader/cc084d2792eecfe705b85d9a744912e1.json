{"ast":null,"code":"/*!\r\n * statuses\r\n * Copyright(c) 2014 Jonathan Ong\r\n * Copyright(c) 2016 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n'use strict';\n/**\r\n * Module dependencies.\r\n * @private\r\n */\n\nvar codes = require('./codes.json');\n/**\r\n * Module exports.\r\n * @public\r\n */\n\n\nmodule.exports = status; // status code to message map\n\nstatus.message = codes; // status message (lower-case) to code map\n\nstatus.code = createMessageToStatusCodeMap(codes); // array of status codes\n\nstatus.codes = createStatusCodeList(codes); // status codes for redirects\n\nstatus.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true\n}; // status codes for empty bodies\n\nstatus.empty = {\n  204: true,\n  205: true,\n  304: true\n}; // status codes for when you should retry the request\n\nstatus.retry = {\n  502: true,\n  503: true,\n  504: true\n};\n/**\r\n * Create a map of message to status code.\r\n * @private\r\n */\n\nfunction createMessageToStatusCodeMap(codes) {\n  var map = {};\n  Object.keys(codes).forEach(function forEachCode(code) {\n    var message = codes[code];\n    var status = Number(code); // populate map\n\n    map[message.toLowerCase()] = status;\n  });\n  return map;\n}\n/**\r\n * Create a list of all status codes.\r\n * @private\r\n */\n\n\nfunction createStatusCodeList(codes) {\n  return Object.keys(codes).map(function mapCode(code) {\n    return Number(code);\n  });\n}\n/**\r\n * Get the status code for given message.\r\n * @private\r\n */\n\n\nfunction getStatusCode(message) {\n  var msg = message.toLowerCase();\n\n  if (!Object.prototype.hasOwnProperty.call(status.code, msg)) {\n    throw new Error('invalid status message: \"' + message + '\"');\n  }\n\n  return status.code[msg];\n}\n/**\r\n * Get the status message for given code.\r\n * @private\r\n */\n\n\nfunction getStatusMessage(code) {\n  if (!Object.prototype.hasOwnProperty.call(status.message, code)) {\n    throw new Error('invalid status code: ' + code);\n  }\n\n  return status.message[code];\n}\n/**\r\n * Get the status code.\r\n *\r\n * Given a number, this will throw if it is not a known status\r\n * code, otherwise the code will be returned. Given a string,\r\n * the string will be parsed for a number and return the code\r\n * if valid, otherwise will lookup the code assuming this is\r\n * the status message.\r\n *\r\n * @param {string|number} code\r\n * @returns {number}\r\n * @public\r\n */\n\n\nfunction status(code) {\n  if (typeof code === 'number') {\n    return getStatusMessage(code);\n  }\n\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string');\n  } // '403'\n\n\n  var n = parseInt(code, 10);\n\n  if (!isNaN(n)) {\n    return getStatusMessage(n);\n  }\n\n  return getStatusCode(code);\n}","map":{"version":3,"names":["codes","require","module","exports","status","message","code","createMessageToStatusCodeMap","createStatusCodeList","redirect","empty","retry","map","Object","keys","forEach","forEachCode","Number","toLowerCase","mapCode","getStatusCode","msg","prototype","hasOwnProperty","call","Error","getStatusMessage","TypeError","n","parseInt","isNaN"],"sources":["C:/Users/Kamen/ML/AlgoTrader/my-app/node_modules/statuses/index.js"],"sourcesContent":["/*!\r\n * statuses\r\n * Copyright(c) 2014 Jonathan Ong\r\n * Copyright(c) 2016 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar codes = require('./codes.json')\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = status\r\n\r\n// status code to message map\r\nstatus.message = codes\r\n\r\n// status message (lower-case) to code map\r\nstatus.code = createMessageToStatusCodeMap(codes)\r\n\r\n// array of status codes\r\nstatus.codes = createStatusCodeList(codes)\r\n\r\n// status codes for redirects\r\nstatus.redirect = {\r\n  300: true,\r\n  301: true,\r\n  302: true,\r\n  303: true,\r\n  305: true,\r\n  307: true,\r\n  308: true\r\n}\r\n\r\n// status codes for empty bodies\r\nstatus.empty = {\r\n  204: true,\r\n  205: true,\r\n  304: true\r\n}\r\n\r\n// status codes for when you should retry the request\r\nstatus.retry = {\r\n  502: true,\r\n  503: true,\r\n  504: true\r\n}\r\n\r\n/**\r\n * Create a map of message to status code.\r\n * @private\r\n */\r\n\r\nfunction createMessageToStatusCodeMap (codes) {\r\n  var map = {}\r\n\r\n  Object.keys(codes).forEach(function forEachCode (code) {\r\n    var message = codes[code]\r\n    var status = Number(code)\r\n\r\n    // populate map\r\n    map[message.toLowerCase()] = status\r\n  })\r\n\r\n  return map\r\n}\r\n\r\n/**\r\n * Create a list of all status codes.\r\n * @private\r\n */\r\n\r\nfunction createStatusCodeList (codes) {\r\n  return Object.keys(codes).map(function mapCode (code) {\r\n    return Number(code)\r\n  })\r\n}\r\n\r\n/**\r\n * Get the status code for given message.\r\n * @private\r\n */\r\n\r\nfunction getStatusCode (message) {\r\n  var msg = message.toLowerCase()\r\n\r\n  if (!Object.prototype.hasOwnProperty.call(status.code, msg)) {\r\n    throw new Error('invalid status message: \"' + message + '\"')\r\n  }\r\n\r\n  return status.code[msg]\r\n}\r\n\r\n/**\r\n * Get the status message for given code.\r\n * @private\r\n */\r\n\r\nfunction getStatusMessage (code) {\r\n  if (!Object.prototype.hasOwnProperty.call(status.message, code)) {\r\n    throw new Error('invalid status code: ' + code)\r\n  }\r\n\r\n  return status.message[code]\r\n}\r\n\r\n/**\r\n * Get the status code.\r\n *\r\n * Given a number, this will throw if it is not a known status\r\n * code, otherwise the code will be returned. Given a string,\r\n * the string will be parsed for a number and return the code\r\n * if valid, otherwise will lookup the code assuming this is\r\n * the status message.\r\n *\r\n * @param {string|number} code\r\n * @returns {number}\r\n * @public\r\n */\r\n\r\nfunction status (code) {\r\n  if (typeof code === 'number') {\r\n    return getStatusMessage(code)\r\n  }\r\n\r\n  if (typeof code !== 'string') {\r\n    throw new TypeError('code must be a number or string')\r\n  }\r\n\r\n  // '403'\r\n  var n = parseInt(code, 10)\r\n  if (!isNaN(n)) {\r\n    return getStatusMessage(n)\r\n  }\r\n\r\n  return getStatusCode(code)\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}