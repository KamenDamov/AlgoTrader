{"ast":null,"code":"// Copyright 2012 Iris Couch, all rights reserved.\n//\n// Parse DNS messages\nvar util = require('util');\n\nvar constants = require('./constants');\n\nmodule.exports = {\n  'id': id,\n  'qr': qr,\n  'aa': aa,\n  'tc': tc,\n  'rd': rd,\n  'ra': ra,\n  'ad': ad,\n  'cd': cd,\n  'rcode': rcode,\n  'opcode': opcode,\n  'record_count': record_count,\n  'record_name': record_name,\n  'record_class': record_class,\n  'record_ttl': record_ttl,\n  'record_type': record_type,\n  'record_data': record_data,\n  'uncompress': uncompress,\n  'sections': sections,\n  'mx': mx,\n  'srv': srv,\n  'soa': soa,\n  'txt': txt\n};\n\nfunction id(msg) {\n  return msg.readUInt16BE(0);\n}\n\nfunction qr(msg) {\n  return msg.readUInt8(2) >> 7;\n}\n\nfunction opcode(msg) {\n  return msg.readUInt8(2) >> 3 & 0x0f;\n}\n\nfunction aa(msg) {\n  return msg.readUInt8(2) >> 2 & 0x01;\n}\n\nfunction tc(msg) {\n  return msg.readUInt8(2) >> 1 & 0x01;\n}\n\nfunction rd(msg) {\n  return msg.readUInt8(2) & 0x01;\n}\n\nfunction ra(msg) {\n  return msg.readUInt8(3) >> 7;\n}\n\nfunction ad(msg) {\n  return msg.readUInt8(3) >> 5 & 0x01;\n}\n\nfunction cd(msg) {\n  return msg.readUInt8(3) >> 4 & 0x01;\n}\n\nfunction rcode(msg) {\n  return msg.readUInt8(3) & 0x0f;\n}\n\nfunction record_count(msg, name) {\n  if (name == 'question') return msg.readUInt16BE(4);else if (name == 'answer') return msg.readUInt16BE(6);else if (name == 'authority') return msg.readUInt16BE(8);else if (name == 'additional') return msg.readUInt16BE(10);else throw new Error('Unknown section name: ' + name);\n}\n\nfunction record_name(msg, section_name, offset) {\n  var rec = record(msg, section_name, offset);\n  return rec.name;\n}\n\nfunction record_class(msg, section_name, offset) {\n  var rec = record(msg, section_name, offset);\n  return rec.class;\n}\n\nfunction record_type(msg, section_name, offset) {\n  var rec = record(msg, section_name, offset);\n  return rec.type;\n}\n\nfunction record_ttl(msg, section_name, offset) {\n  var rec = record(msg, section_name, offset);\n  return rec.ttl;\n}\n\nfunction record_data(msg, section_name, offset) {\n  var rec = record(msg, section_name, offset);\n  return rec.data;\n}\n\nfunction record_class(msg, section_name, offset) {\n  var rec = record(msg, section_name, offset);\n  return rec.class;\n}\n\nfunction record(msg, section_name, offset) {\n  if (typeof offset != 'number' || isNaN(offset) || offset < 0) throw new Error('Offset must be a natural number'); // Support msg being a previously-parsed sections object.\n\n  var sects = Buffer.isBuffer(msg) ? sections(msg) : msg;\n  var records = sects[section_name];\n  if (!records) throw new Error('No such section: \"' + section_name + '\"');\n  var rec = records[offset];\n  if (!rec) throw new Error('Bad offset for section \"' + section_name + '\": ' + offset);\n  return rec;\n}\n\nfunction sections(msg) {\n  // Count the times this message has been parsed, for debugging and testing purposes.\n  if ('__parsed' in msg) msg.__parsed += 1;\n  var position = 12 // First byte of the first section\n  ,\n      result = {\n    'question': [],\n    'answer': [],\n    'authority': [],\n    'additional': []\n  },\n      need = {\n    'question': record_count(msg, 'question'),\n    'answer': record_count(msg, 'answer'),\n    'authority': record_count(msg, 'authority'),\n    'additional': record_count(msg, 'additional')\n  };\n  var states = ['question', 'answer', 'authority', 'additional', 'done'],\n      state = states.shift();\n\n  while (true) {\n    if (state == 'done') return result;else if (result[state].length == need[state]) state = states.shift();else if (!state) throw new Error('Unknown parsing state at position ' + position + ': ' + JSON.stringify(state));else add_record();\n  }\n\n  function add_record() {\n    var record = {};\n    var data = domain_parts(msg, position);\n    record.name = data.parts.join('.');\n    position += data.length;\n    record.type = msg.readUInt16BE(position + 0);\n    record.class = msg.readUInt16BE(position + 2);\n    position += 4;\n\n    if (state != 'question') {\n      record.ttl = msg.readUInt32BE(position + 0);\n      var rdata_len = msg.readUInt16BE(position + 4);\n      position += 6;\n      record.data = msg.slice(position, position + rdata_len);\n      position += rdata_len;\n\n      if (constants.type(record.type) === 'OPT') {\n        // EDNS\n        if (record.name !== '') throw new Error('EDNS record option for non-root domain: ' + record.name);\n        record.udp_size = record.class;\n        delete record.class;\n        record.extended_rcode = record.ttl >> 24;\n        record.edns_version = record.ttl >> 16 & 0xff;\n        record.zero = record.ttl >> 8;\n        delete record.ttl;\n        record.data = Array.prototype.slice.call(record.data);\n      }\n    }\n\n    result[state] = result[state] || [];\n    result[state].push(record);\n  }\n}\n\nfunction mx(msg, data) {\n  return [data.readUInt16BE(0), uncompress(msg, data.slice(2))];\n}\n\nfunction srv(msg, data) {\n  return {\n    'priority': data.readUInt16BE(0),\n    'weight': data.readUInt16BE(2),\n    'port': data.readUInt16BE(4),\n    'target': uncompress(msg, data.slice(6)) // Techncially compression is not allowed in RFC 2782.\n\n  };\n}\n\nfunction soa(msg, data) {\n  var result = domain_parts(msg, data),\n      offset = result.length,\n      mname = result.parts.join('.');\n  result = domain_parts(msg, data.slice(offset));\n  var rname = result.parts.join('.');\n  offset += result.length;\n  return {\n    'mname': mname,\n    'rname': rname //.replace(/\\./, '@')\n    ,\n    'serial': data.readUInt32BE(offset + 0),\n    'refresh': data.readUInt32BE(offset + 4),\n    'retry': data.readUInt32BE(offset + 8),\n    'expire': data.readUInt32BE(offset + 12),\n    'ttl': data.readUInt32BE(offset + 16)\n  };\n}\n\nfunction txt(msg, data) {\n  var parts = [];\n\n  while (data.length) {\n    var len = data.readUInt8(0);\n    parts.push(data.slice(1, 1 + len).toString('ascii'));\n    data = data.slice(1 + len);\n  }\n\n  return parts;\n}\n\nfunction uncompress(msg, offset) {\n  var data = domain_parts(msg, offset);\n  return data.parts.join('.');\n}\n\nfunction domain_parts(msg, offset) {\n  if (Buffer.isBuffer(offset)) {\n    var full_message = msg;\n    msg = offset;\n    offset = 0;\n  }\n\n  if (typeof offset != 'number' || isNaN(offset) || offset < 0 || offset > msg.length) throw new Error('Bad offset: ' + offset);\n  var parts = [],\n      real_length = 0,\n      jumped = false;\n  var i = 0;\n\n  while (true) {\n    if (++i >= 100) throw new Error('Too many iterations uncompressing name');\n    var byte = msg.readUInt8(offset),\n        flags = byte >> 6,\n        len = byte & 0x3f; // 0 - 63\n\n    offset += 1;\n    add_length(1);\n\n    if (flags === 0x03) {\n      offset = (len << 8) + msg.readUInt8(offset);\n      add_length(1);\n      jumped = true; // If processing so far has just been on some given fragment, begin using the full message now.\n\n      msg = full_message || msg;\n    } else if (len == 0) return {\n      'parts': parts,\n      'length': real_length\n    };else {\n      parts.push(msg.toString('ascii', offset, offset + len));\n      offset += len;\n      add_length(len);\n    }\n  }\n\n  function add_length(amount) {\n    if (!jumped) real_length += amount;\n  }\n}","map":{"version":3,"names":["util","require","constants","module","exports","id","qr","aa","tc","rd","ra","ad","cd","rcode","opcode","record_count","record_name","record_class","record_ttl","record_type","record_data","uncompress","sections","mx","srv","soa","txt","msg","readUInt16BE","readUInt8","name","Error","section_name","offset","rec","record","class","type","ttl","data","isNaN","sects","Buffer","isBuffer","records","__parsed","position","result","need","states","state","shift","length","JSON","stringify","add_record","domain_parts","parts","join","readUInt32BE","rdata_len","slice","udp_size","extended_rcode","edns_version","zero","Array","prototype","call","push","mname","rname","len","toString","full_message","real_length","jumped","i","byte","flags","add_length","amount"],"sources":["C:/Users/Kamen/ML/AlgoTrader/node_modules/hbo-dnsd/parse.js"],"sourcesContent":["// Copyright 2012 Iris Couch, all rights reserved.\r\n//\r\n// Parse DNS messages\r\n\r\nvar util = require('util')\r\n\r\nvar constants = require('./constants')\r\n\r\nmodule.exports = { 'id': id\r\n                 , 'qr': qr\r\n                 , 'aa': aa\r\n                 , 'tc': tc\r\n                 , 'rd': rd\r\n                 , 'ra': ra\r\n                 , 'ad': ad\r\n                 , 'cd': cd\r\n                 , 'rcode': rcode\r\n                 , 'opcode': opcode\r\n                 , 'record_count': record_count\r\n                 , 'record_name' : record_name\r\n                 , 'record_class': record_class\r\n                 , 'record_ttl'  : record_ttl\r\n                 , 'record_type' : record_type\r\n                 , 'record_data' : record_data\r\n                 , 'uncompress'  : uncompress\r\n                 , 'sections'    : sections\r\n                 , 'mx': mx\r\n                 , 'srv': srv\r\n                 , 'soa': soa\r\n                 , 'txt': txt\r\n                 }\r\n\r\n\r\nfunction id(msg) {\r\n  return msg.readUInt16BE(0)\r\n}\r\n\r\nfunction qr(msg) {\r\n  return msg.readUInt8(2) >> 7\r\n}\r\n\r\nfunction opcode(msg) {\r\n  return (msg.readUInt8(2) >> 3) & 0x0f\r\n}\r\n\r\nfunction aa(msg) {\r\n  return (msg.readUInt8(2) >> 2) & 0x01\r\n}\r\n\r\nfunction tc(msg) {\r\n  return (msg.readUInt8(2) >> 1) & 0x01\r\n}\r\n\r\nfunction rd(msg) {\r\n  return msg.readUInt8(2) & 0x01\r\n}\r\n\r\nfunction ra(msg) {\r\n  return msg.readUInt8(3) >> 7\r\n}\r\n\r\nfunction ad(msg) {\r\n  return msg.readUInt8(3) >> 5 & 0x01\r\n}\r\n\r\nfunction cd(msg) {\r\n  return msg.readUInt8(3) >> 4 & 0x01\r\n}\r\n\r\nfunction rcode(msg) {\r\n  return msg.readUInt8(3) & 0x0f\r\n}\r\n\r\nfunction record_count(msg, name) {\r\n  if(name == 'question')\r\n    return msg.readUInt16BE(4)\r\n  else if(name == 'answer')\r\n    return msg.readUInt16BE(6)\r\n  else if(name == 'authority')\r\n    return msg.readUInt16BE(8)\r\n  else if(name == 'additional')\r\n    return msg.readUInt16BE(10)\r\n  else\r\n    throw new Error('Unknown section name: ' + name)\r\n}\r\n\r\nfunction record_name(msg, section_name, offset) {\r\n  var rec = record(msg, section_name, offset)\r\n  return rec.name\r\n}\r\n\r\nfunction record_class(msg, section_name, offset) {\r\n  var rec = record(msg, section_name, offset)\r\n  return rec.class\r\n}\r\n\r\nfunction record_type(msg, section_name, offset) {\r\n  var rec = record(msg, section_name, offset)\r\n  return rec.type\r\n}\r\n\r\nfunction record_ttl(msg, section_name, offset) {\r\n  var rec = record(msg, section_name, offset)\r\n  return rec.ttl\r\n}\r\n\r\nfunction record_data(msg, section_name, offset) {\r\n  var rec = record(msg, section_name, offset)\r\n  return rec.data\r\n}\r\n\r\nfunction record_class(msg, section_name, offset) {\r\n  var rec = record(msg, section_name, offset)\r\n  return rec.class\r\n}\r\n\r\nfunction record(msg, section_name, offset) {\r\n  if(typeof offset != 'number' || isNaN(offset) || offset < 0)\r\n    throw new Error('Offset must be a natural number')\r\n\r\n  // Support msg being a previously-parsed sections object.\r\n  var sects = Buffer.isBuffer(msg)\r\n                ? sections(msg)\r\n                : msg\r\n\r\n  var records = sects[section_name]\r\n  if(!records)\r\n    throw new Error('No such section: \"'+section_name+'\"')\r\n\r\n  var rec = records[offset]\r\n  if(!rec)\r\n    throw new Error('Bad offset for section \"'+section_name+'\": ' + offset)\r\n\r\n  return rec\r\n}\r\n\r\nfunction sections(msg) {\r\n  // Count the times this message has been parsed, for debugging and testing purposes.\r\n  if('__parsed' in msg)\r\n    msg.__parsed += 1\r\n\r\n  var position = 12 // First byte of the first section\r\n    , result = {'question':[], 'answer':[], 'authority':[], 'additional':[]}\r\n    , need = { 'question'  : record_count(msg, 'question')\r\n             , 'answer'    : record_count(msg, 'answer')\r\n             , 'authority' : record_count(msg, 'authority')\r\n             , 'additional': record_count(msg, 'additional')\r\n             }\r\n\r\n  var states = ['question', 'answer', 'authority', 'additional', 'done']\r\n    , state = states.shift()\r\n\r\n  while(true) {\r\n    if(state == 'done')\r\n      return result\r\n    else if(result[state].length == need[state])\r\n      state = states.shift()\r\n    else if(!state)\r\n      throw new Error('Unknown parsing state at position '+position+': '+JSON.stringify(state))\r\n    else\r\n      add_record()\r\n  }\r\n\r\n  function add_record() {\r\n    var record = {}\r\n\r\n    var data = domain_parts(msg, position)\r\n    record.name = data.parts.join('.')\r\n    position += data.length\r\n\r\n    record.type  = msg.readUInt16BE(position + 0)\r\n    record.class = msg.readUInt16BE(position + 2)\r\n    position += 4\r\n\r\n    if(state != 'question') {\r\n      record.ttl    = msg.readUInt32BE(position + 0)\r\n      var rdata_len = msg.readUInt16BE(position + 4)\r\n\r\n      position += 6\r\n      record.data = msg.slice(position, position + rdata_len)\r\n\r\n      position += rdata_len\r\n\r\n      if(constants.type(record.type) === 'OPT') {\r\n        // EDNS\r\n        if(record.name !== '')\r\n          throw new Error('EDNS record option for non-root domain: ' + record.name)\r\n\r\n        record.udp_size = record.class\r\n        delete record.class\r\n\r\n        record.extended_rcode = (record.ttl >> 24)\r\n        record.edns_version   = (record.ttl >> 16) & 0xff\r\n        record.zero           = (record.ttl >>  8)\r\n        delete record.ttl\r\n\r\n        record.data = Array.prototype.slice.call(record.data)\r\n      }\r\n    }\r\n\r\n    result[state] = result[state] || []\r\n    result[state].push(record)\r\n  }\r\n}\r\n\r\nfunction mx(msg, data) {\r\n  return [ data.readUInt16BE(0)\r\n         , uncompress(msg, data.slice(2))\r\n         ]\r\n}\r\n\r\nfunction srv(msg, data) {\r\n  return { 'priority': data.readUInt16BE(0)\r\n         , 'weight'  : data.readUInt16BE(2)\r\n         , 'port'    : data.readUInt16BE(4)\r\n         , 'target'  : uncompress(msg, data.slice(6)) // Techncially compression is not allowed in RFC 2782.\r\n         }\r\n}\r\n\r\nfunction soa(msg, data) {\r\n  var result = domain_parts(msg, data)\r\n    , offset = result.length\r\n    , mname = result.parts.join('.')\r\n\r\n  result = domain_parts(msg, data.slice(offset))\r\n  var rname = result.parts.join('.')\r\n  offset += result.length\r\n\r\n  return { 'mname'  : mname\r\n         , 'rname'  : rname //.replace(/\\./, '@')\r\n         , 'serial' : data.readUInt32BE(offset + 0)\r\n         , 'refresh': data.readUInt32BE(offset + 4)\r\n         , 'retry'  : data.readUInt32BE(offset + 8)\r\n         , 'expire' : data.readUInt32BE(offset + 12)\r\n         , 'ttl'    : data.readUInt32BE(offset + 16)\r\n         }\r\n}\r\n\r\nfunction txt(msg, data) {\r\n  var parts = []\r\n  while(data.length) {\r\n    var len = data.readUInt8(0)\r\n    parts.push(data.slice(1, 1+len).toString('ascii'))\r\n    data = data.slice(1+len)\r\n  }\r\n\r\n  return parts\r\n}\r\n\r\nfunction uncompress(msg, offset) {\r\n  var data = domain_parts(msg, offset)\r\n  return data.parts.join('.')\r\n}\r\n\r\nfunction domain_parts(msg, offset) {\r\n  if(Buffer.isBuffer(offset)) {\r\n    var full_message = msg\r\n    msg = offset\r\n    offset = 0\r\n  }\r\n\r\n  if(typeof offset != 'number' || isNaN(offset) || offset < 0 || offset > msg.length)\r\n    throw new Error('Bad offset: ' + offset)\r\n\r\n  var parts = []\r\n    , real_length = 0\r\n    , jumped = false\r\n\r\n  var i = 0\r\n  while(true) {\r\n    if(++i >= 100)\r\n      throw new Error('Too many iterations uncompressing name')\r\n\r\n    var byte = msg.readUInt8(offset)\r\n      , flags = byte >> 6\r\n      , len   = byte & 0x3f // 0 - 63\r\n\r\n    offset += 1\r\n    add_length(1)\r\n\r\n    if(flags === 0x03) {\r\n      offset = (len << 8) + msg.readUInt8(offset)\r\n      add_length(1)\r\n      jumped = true\r\n\r\n      // If processing so far has just been on some given fragment, begin using the full message now.\r\n      msg = full_message || msg\r\n    }\r\n\r\n    else if(len == 0)\r\n      return {'parts':parts, 'length':real_length}\r\n\r\n    else {\r\n      parts.push(msg.toString('ascii', offset, offset + len))\r\n\r\n      offset += len\r\n      add_length(len)\r\n    }\r\n  }\r\n\r\n  function add_length(amount) {\r\n    if(! jumped)\r\n      real_length += amount\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAvB;;AAEAE,MAAM,CAACC,OAAP,GAAiB;EAAE,MAAMC,EAAR;EACE,MAAMC,EADR;EAEE,MAAMC,EAFR;EAGE,MAAMC,EAHR;EAIE,MAAMC,EAJR;EAKE,MAAMC,EALR;EAME,MAAMC,EANR;EAOE,MAAMC,EAPR;EAQE,SAASC,KARX;EASE,UAAUC,MATZ;EAUE,gBAAgBC,YAVlB;EAWE,eAAgBC,WAXlB;EAYE,gBAAgBC,YAZlB;EAaE,cAAgBC,UAblB;EAcE,eAAgBC,WAdlB;EAeE,eAAgBC,WAflB;EAgBE,cAAgBC,UAhBlB;EAiBE,YAAgBC,QAjBlB;EAkBE,MAAMC,EAlBR;EAmBE,OAAOC,GAnBT;EAoBE,OAAOC,GApBT;EAqBE,OAAOC;AArBT,CAAjB;;AAyBA,SAASrB,EAAT,CAAYsB,GAAZ,EAAiB;EACf,OAAOA,GAAG,CAACC,YAAJ,CAAiB,CAAjB,CAAP;AACD;;AAED,SAAStB,EAAT,CAAYqB,GAAZ,EAAiB;EACf,OAAOA,GAAG,CAACE,SAAJ,CAAc,CAAd,KAAoB,CAA3B;AACD;;AAED,SAASf,MAAT,CAAgBa,GAAhB,EAAqB;EACnB,OAAQA,GAAG,CAACE,SAAJ,CAAc,CAAd,KAAoB,CAArB,GAA0B,IAAjC;AACD;;AAED,SAAStB,EAAT,CAAYoB,GAAZ,EAAiB;EACf,OAAQA,GAAG,CAACE,SAAJ,CAAc,CAAd,KAAoB,CAArB,GAA0B,IAAjC;AACD;;AAED,SAASrB,EAAT,CAAYmB,GAAZ,EAAiB;EACf,OAAQA,GAAG,CAACE,SAAJ,CAAc,CAAd,KAAoB,CAArB,GAA0B,IAAjC;AACD;;AAED,SAASpB,EAAT,CAAYkB,GAAZ,EAAiB;EACf,OAAOA,GAAG,CAACE,SAAJ,CAAc,CAAd,IAAmB,IAA1B;AACD;;AAED,SAASnB,EAAT,CAAYiB,GAAZ,EAAiB;EACf,OAAOA,GAAG,CAACE,SAAJ,CAAc,CAAd,KAAoB,CAA3B;AACD;;AAED,SAASlB,EAAT,CAAYgB,GAAZ,EAAiB;EACf,OAAOA,GAAG,CAACE,SAAJ,CAAc,CAAd,KAAoB,CAApB,GAAwB,IAA/B;AACD;;AAED,SAASjB,EAAT,CAAYe,GAAZ,EAAiB;EACf,OAAOA,GAAG,CAACE,SAAJ,CAAc,CAAd,KAAoB,CAApB,GAAwB,IAA/B;AACD;;AAED,SAAShB,KAAT,CAAec,GAAf,EAAoB;EAClB,OAAOA,GAAG,CAACE,SAAJ,CAAc,CAAd,IAAmB,IAA1B;AACD;;AAED,SAASd,YAAT,CAAsBY,GAAtB,EAA2BG,IAA3B,EAAiC;EAC/B,IAAGA,IAAI,IAAI,UAAX,EACE,OAAOH,GAAG,CAACC,YAAJ,CAAiB,CAAjB,CAAP,CADF,KAEK,IAAGE,IAAI,IAAI,QAAX,EACH,OAAOH,GAAG,CAACC,YAAJ,CAAiB,CAAjB,CAAP,CADG,KAEA,IAAGE,IAAI,IAAI,WAAX,EACH,OAAOH,GAAG,CAACC,YAAJ,CAAiB,CAAjB,CAAP,CADG,KAEA,IAAGE,IAAI,IAAI,YAAX,EACH,OAAOH,GAAG,CAACC,YAAJ,CAAiB,EAAjB,CAAP,CADG,KAGH,MAAM,IAAIG,KAAJ,CAAU,2BAA2BD,IAArC,CAAN;AACH;;AAED,SAASd,WAAT,CAAqBW,GAArB,EAA0BK,YAA1B,EAAwCC,MAAxC,EAAgD;EAC9C,IAAIC,GAAG,GAAGC,MAAM,CAACR,GAAD,EAAMK,YAAN,EAAoBC,MAApB,CAAhB;EACA,OAAOC,GAAG,CAACJ,IAAX;AACD;;AAED,SAASb,YAAT,CAAsBU,GAAtB,EAA2BK,YAA3B,EAAyCC,MAAzC,EAAiD;EAC/C,IAAIC,GAAG,GAAGC,MAAM,CAACR,GAAD,EAAMK,YAAN,EAAoBC,MAApB,CAAhB;EACA,OAAOC,GAAG,CAACE,KAAX;AACD;;AAED,SAASjB,WAAT,CAAqBQ,GAArB,EAA0BK,YAA1B,EAAwCC,MAAxC,EAAgD;EAC9C,IAAIC,GAAG,GAAGC,MAAM,CAACR,GAAD,EAAMK,YAAN,EAAoBC,MAApB,CAAhB;EACA,OAAOC,GAAG,CAACG,IAAX;AACD;;AAED,SAASnB,UAAT,CAAoBS,GAApB,EAAyBK,YAAzB,EAAuCC,MAAvC,EAA+C;EAC7C,IAAIC,GAAG,GAAGC,MAAM,CAACR,GAAD,EAAMK,YAAN,EAAoBC,MAApB,CAAhB;EACA,OAAOC,GAAG,CAACI,GAAX;AACD;;AAED,SAASlB,WAAT,CAAqBO,GAArB,EAA0BK,YAA1B,EAAwCC,MAAxC,EAAgD;EAC9C,IAAIC,GAAG,GAAGC,MAAM,CAACR,GAAD,EAAMK,YAAN,EAAoBC,MAApB,CAAhB;EACA,OAAOC,GAAG,CAACK,IAAX;AACD;;AAED,SAAStB,YAAT,CAAsBU,GAAtB,EAA2BK,YAA3B,EAAyCC,MAAzC,EAAiD;EAC/C,IAAIC,GAAG,GAAGC,MAAM,CAACR,GAAD,EAAMK,YAAN,EAAoBC,MAApB,CAAhB;EACA,OAAOC,GAAG,CAACE,KAAX;AACD;;AAED,SAASD,MAAT,CAAgBR,GAAhB,EAAqBK,YAArB,EAAmCC,MAAnC,EAA2C;EACzC,IAAG,OAAOA,MAAP,IAAiB,QAAjB,IAA6BO,KAAK,CAACP,MAAD,CAAlC,IAA8CA,MAAM,GAAG,CAA1D,EACE,MAAM,IAAIF,KAAJ,CAAU,iCAAV,CAAN,CAFuC,CAIzC;;EACA,IAAIU,KAAK,GAAGC,MAAM,CAACC,QAAP,CAAgBhB,GAAhB,IACIL,QAAQ,CAACK,GAAD,CADZ,GAEIA,GAFhB;EAIA,IAAIiB,OAAO,GAAGH,KAAK,CAACT,YAAD,CAAnB;EACA,IAAG,CAACY,OAAJ,EACE,MAAM,IAAIb,KAAJ,CAAU,uBAAqBC,YAArB,GAAkC,GAA5C,CAAN;EAEF,IAAIE,GAAG,GAAGU,OAAO,CAACX,MAAD,CAAjB;EACA,IAAG,CAACC,GAAJ,EACE,MAAM,IAAIH,KAAJ,CAAU,6BAA2BC,YAA3B,GAAwC,KAAxC,GAAgDC,MAA1D,CAAN;EAEF,OAAOC,GAAP;AACD;;AAED,SAASZ,QAAT,CAAkBK,GAAlB,EAAuB;EACrB;EACA,IAAG,cAAcA,GAAjB,EACEA,GAAG,CAACkB,QAAJ,IAAgB,CAAhB;EAEF,IAAIC,QAAQ,GAAG,EAAf,CAAkB;EAAlB;EAAA,IACIC,MAAM,GAAG;IAAC,YAAW,EAAZ;IAAgB,UAAS,EAAzB;IAA6B,aAAY,EAAzC;IAA6C,cAAa;EAA1D,CADb;EAAA,IAEIC,IAAI,GAAG;IAAE,YAAcjC,YAAY,CAACY,GAAD,EAAM,UAAN,CAA5B;IACE,UAAcZ,YAAY,CAACY,GAAD,EAAM,QAAN,CAD5B;IAEE,aAAcZ,YAAY,CAACY,GAAD,EAAM,WAAN,CAF5B;IAGE,cAAcZ,YAAY,CAACY,GAAD,EAAM,YAAN;EAH5B,CAFX;EAQA,IAAIsB,MAAM,GAAG,CAAC,UAAD,EAAa,QAAb,EAAuB,WAAvB,EAAoC,YAApC,EAAkD,MAAlD,CAAb;EAAA,IACIC,KAAK,GAAGD,MAAM,CAACE,KAAP,EADZ;;EAGA,OAAM,IAAN,EAAY;IACV,IAAGD,KAAK,IAAI,MAAZ,EACE,OAAOH,MAAP,CADF,KAEK,IAAGA,MAAM,CAACG,KAAD,CAAN,CAAcE,MAAd,IAAwBJ,IAAI,CAACE,KAAD,CAA/B,EACHA,KAAK,GAAGD,MAAM,CAACE,KAAP,EAAR,CADG,KAEA,IAAG,CAACD,KAAJ,EACH,MAAM,IAAInB,KAAJ,CAAU,uCAAqCe,QAArC,GAA8C,IAA9C,GAAmDO,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAA7D,CAAN,CADG,KAGHK,UAAU;EACb;;EAED,SAASA,UAAT,GAAsB;IACpB,IAAIpB,MAAM,GAAG,EAAb;IAEA,IAAII,IAAI,GAAGiB,YAAY,CAAC7B,GAAD,EAAMmB,QAAN,CAAvB;IACAX,MAAM,CAACL,IAAP,GAAcS,IAAI,CAACkB,KAAL,CAAWC,IAAX,CAAgB,GAAhB,CAAd;IACAZ,QAAQ,IAAIP,IAAI,CAACa,MAAjB;IAEAjB,MAAM,CAACE,IAAP,GAAeV,GAAG,CAACC,YAAJ,CAAiBkB,QAAQ,GAAG,CAA5B,CAAf;IACAX,MAAM,CAACC,KAAP,GAAeT,GAAG,CAACC,YAAJ,CAAiBkB,QAAQ,GAAG,CAA5B,CAAf;IACAA,QAAQ,IAAI,CAAZ;;IAEA,IAAGI,KAAK,IAAI,UAAZ,EAAwB;MACtBf,MAAM,CAACG,GAAP,GAAgBX,GAAG,CAACgC,YAAJ,CAAiBb,QAAQ,GAAG,CAA5B,CAAhB;MACA,IAAIc,SAAS,GAAGjC,GAAG,CAACC,YAAJ,CAAiBkB,QAAQ,GAAG,CAA5B,CAAhB;MAEAA,QAAQ,IAAI,CAAZ;MACAX,MAAM,CAACI,IAAP,GAAcZ,GAAG,CAACkC,KAAJ,CAAUf,QAAV,EAAoBA,QAAQ,GAAGc,SAA/B,CAAd;MAEAd,QAAQ,IAAIc,SAAZ;;MAEA,IAAG1D,SAAS,CAACmC,IAAV,CAAeF,MAAM,CAACE,IAAtB,MAAgC,KAAnC,EAA0C;QACxC;QACA,IAAGF,MAAM,CAACL,IAAP,KAAgB,EAAnB,EACE,MAAM,IAAIC,KAAJ,CAAU,6CAA6CI,MAAM,CAACL,IAA9D,CAAN;QAEFK,MAAM,CAAC2B,QAAP,GAAkB3B,MAAM,CAACC,KAAzB;QACA,OAAOD,MAAM,CAACC,KAAd;QAEAD,MAAM,CAAC4B,cAAP,GAAyB5B,MAAM,CAACG,GAAP,IAAc,EAAvC;QACAH,MAAM,CAAC6B,YAAP,GAAyB7B,MAAM,CAACG,GAAP,IAAc,EAAf,GAAqB,IAA7C;QACAH,MAAM,CAAC8B,IAAP,GAAyB9B,MAAM,CAACG,GAAP,IAAe,CAAxC;QACA,OAAOH,MAAM,CAACG,GAAd;QAEAH,MAAM,CAACI,IAAP,GAAc2B,KAAK,CAACC,SAAN,CAAgBN,KAAhB,CAAsBO,IAAtB,CAA2BjC,MAAM,CAACI,IAAlC,CAAd;MACD;IACF;;IAEDQ,MAAM,CAACG,KAAD,CAAN,GAAgBH,MAAM,CAACG,KAAD,CAAN,IAAiB,EAAjC;IACAH,MAAM,CAACG,KAAD,CAAN,CAAcmB,IAAd,CAAmBlC,MAAnB;EACD;AACF;;AAED,SAASZ,EAAT,CAAYI,GAAZ,EAAiBY,IAAjB,EAAuB;EACrB,OAAO,CAAEA,IAAI,CAACX,YAAL,CAAkB,CAAlB,CAAF,EACEP,UAAU,CAACM,GAAD,EAAMY,IAAI,CAACsB,KAAL,CAAW,CAAX,CAAN,CADZ,CAAP;AAGD;;AAED,SAASrC,GAAT,CAAaG,GAAb,EAAkBY,IAAlB,EAAwB;EACtB,OAAO;IAAE,YAAYA,IAAI,CAACX,YAAL,CAAkB,CAAlB,CAAd;IACE,UAAYW,IAAI,CAACX,YAAL,CAAkB,CAAlB,CADd;IAEE,QAAYW,IAAI,CAACX,YAAL,CAAkB,CAAlB,CAFd;IAGE,UAAYP,UAAU,CAACM,GAAD,EAAMY,IAAI,CAACsB,KAAL,CAAW,CAAX,CAAN,CAHxB,CAG6C;;EAH7C,CAAP;AAKD;;AAED,SAASpC,GAAT,CAAaE,GAAb,EAAkBY,IAAlB,EAAwB;EACtB,IAAIQ,MAAM,GAAGS,YAAY,CAAC7B,GAAD,EAAMY,IAAN,CAAzB;EAAA,IACIN,MAAM,GAAGc,MAAM,CAACK,MADpB;EAAA,IAEIkB,KAAK,GAAGvB,MAAM,CAACU,KAAP,CAAaC,IAAb,CAAkB,GAAlB,CAFZ;EAIAX,MAAM,GAAGS,YAAY,CAAC7B,GAAD,EAAMY,IAAI,CAACsB,KAAL,CAAW5B,MAAX,CAAN,CAArB;EACA,IAAIsC,KAAK,GAAGxB,MAAM,CAACU,KAAP,CAAaC,IAAb,CAAkB,GAAlB,CAAZ;EACAzB,MAAM,IAAIc,MAAM,CAACK,MAAjB;EAEA,OAAO;IAAE,SAAWkB,KAAb;IACE,SAAWC,KADb,CACmB;IADnB;IAEE,UAAWhC,IAAI,CAACoB,YAAL,CAAkB1B,MAAM,GAAG,CAA3B,CAFb;IAGE,WAAWM,IAAI,CAACoB,YAAL,CAAkB1B,MAAM,GAAG,CAA3B,CAHb;IAIE,SAAWM,IAAI,CAACoB,YAAL,CAAkB1B,MAAM,GAAG,CAA3B,CAJb;IAKE,UAAWM,IAAI,CAACoB,YAAL,CAAkB1B,MAAM,GAAG,EAA3B,CALb;IAME,OAAWM,IAAI,CAACoB,YAAL,CAAkB1B,MAAM,GAAG,EAA3B;EANb,CAAP;AAQD;;AAED,SAASP,GAAT,CAAaC,GAAb,EAAkBY,IAAlB,EAAwB;EACtB,IAAIkB,KAAK,GAAG,EAAZ;;EACA,OAAMlB,IAAI,CAACa,MAAX,EAAmB;IACjB,IAAIoB,GAAG,GAAGjC,IAAI,CAACV,SAAL,CAAe,CAAf,CAAV;IACA4B,KAAK,CAACY,IAAN,CAAW9B,IAAI,CAACsB,KAAL,CAAW,CAAX,EAAc,IAAEW,GAAhB,EAAqBC,QAArB,CAA8B,OAA9B,CAAX;IACAlC,IAAI,GAAGA,IAAI,CAACsB,KAAL,CAAW,IAAEW,GAAb,CAAP;EACD;;EAED,OAAOf,KAAP;AACD;;AAED,SAASpC,UAAT,CAAoBM,GAApB,EAAyBM,MAAzB,EAAiC;EAC/B,IAAIM,IAAI,GAAGiB,YAAY,CAAC7B,GAAD,EAAMM,MAAN,CAAvB;EACA,OAAOM,IAAI,CAACkB,KAAL,CAAWC,IAAX,CAAgB,GAAhB,CAAP;AACD;;AAED,SAASF,YAAT,CAAsB7B,GAAtB,EAA2BM,MAA3B,EAAmC;EACjC,IAAGS,MAAM,CAACC,QAAP,CAAgBV,MAAhB,CAAH,EAA4B;IAC1B,IAAIyC,YAAY,GAAG/C,GAAnB;IACAA,GAAG,GAAGM,MAAN;IACAA,MAAM,GAAG,CAAT;EACD;;EAED,IAAG,OAAOA,MAAP,IAAiB,QAAjB,IAA6BO,KAAK,CAACP,MAAD,CAAlC,IAA8CA,MAAM,GAAG,CAAvD,IAA4DA,MAAM,GAAGN,GAAG,CAACyB,MAA5E,EACE,MAAM,IAAIrB,KAAJ,CAAU,iBAAiBE,MAA3B,CAAN;EAEF,IAAIwB,KAAK,GAAG,EAAZ;EAAA,IACIkB,WAAW,GAAG,CADlB;EAAA,IAEIC,MAAM,GAAG,KAFb;EAIA,IAAIC,CAAC,GAAG,CAAR;;EACA,OAAM,IAAN,EAAY;IACV,IAAG,EAAEA,CAAF,IAAO,GAAV,EACE,MAAM,IAAI9C,KAAJ,CAAU,wCAAV,CAAN;IAEF,IAAI+C,IAAI,GAAGnD,GAAG,CAACE,SAAJ,CAAcI,MAAd,CAAX;IAAA,IACI8C,KAAK,GAAGD,IAAI,IAAI,CADpB;IAAA,IAEIN,GAAG,GAAKM,IAAI,GAAG,IAFnB,CAJU,CAMc;;IAExB7C,MAAM,IAAI,CAAV;IACA+C,UAAU,CAAC,CAAD,CAAV;;IAEA,IAAGD,KAAK,KAAK,IAAb,EAAmB;MACjB9C,MAAM,GAAG,CAACuC,GAAG,IAAI,CAAR,IAAa7C,GAAG,CAACE,SAAJ,CAAcI,MAAd,CAAtB;MACA+C,UAAU,CAAC,CAAD,CAAV;MACAJ,MAAM,GAAG,IAAT,CAHiB,CAKjB;;MACAjD,GAAG,GAAG+C,YAAY,IAAI/C,GAAtB;IACD,CAPD,MASK,IAAG6C,GAAG,IAAI,CAAV,EACH,OAAO;MAAC,SAAQf,KAAT;MAAgB,UAASkB;IAAzB,CAAP,CADG,KAGA;MACHlB,KAAK,CAACY,IAAN,CAAW1C,GAAG,CAAC8C,QAAJ,CAAa,OAAb,EAAsBxC,MAAtB,EAA8BA,MAAM,GAAGuC,GAAvC,CAAX;MAEAvC,MAAM,IAAIuC,GAAV;MACAQ,UAAU,CAACR,GAAD,CAAV;IACD;EACF;;EAED,SAASQ,UAAT,CAAoBC,MAApB,EAA4B;IAC1B,IAAG,CAAEL,MAAL,EACED,WAAW,IAAIM,MAAf;EACH;AACF"},"metadata":{},"sourceType":"script"}