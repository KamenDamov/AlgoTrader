{"ast":null,"code":"// Copyright 2012 Timothy J Fontaine <tjfontaine@gmail.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE\n'use strict';\n\nvar assert = require('assert');\n\nvar Heap = function (min) {\n  this.length = 0;\n  this.root = undefined;\n\n  if (min) {\n    this._comparator = this._smallest;\n  } else {\n    this._comparator = this._largest;\n  }\n};\n\nHeap.init = function (obj, key) {\n  obj._parent = null;\n  obj._left = null;\n  obj._right = null;\n  obj._key = key;\n  return obj;\n};\n\nHeap.prototype.count = function (node) {\n  if (!node) return 0;\n  var c = 1;\n  c += this.count(node._left);\n  c += this.count(node._right);\n  return c;\n};\n\nHeap.prototype.insert = function (obj, key) {\n  var insert, node;\n  this.length += 1;\n  node = Heap.init(obj, key);\n\n  if (!this.root) {\n    this.root = node;\n  } else {\n    insert = this._last();\n    node._parent = insert;\n    if (!insert._left) insert._left = node;else insert._right = node;\n\n    this._up(node);\n  }\n\n  this._head();\n\n  return node;\n};\n\nHeap.prototype.pop = function () {\n  var ret, last;\n  if (!this.root) return null;\n  return this.remove(this.root);\n};\n\nHeap.prototype.remove = function (node) {\n  var ret, last;\n  ret = node;\n  last = this._last();\n  if (last._right) last = last._right;else last = last._left;\n  this.length -= 1;\n\n  if (!last) {\n    if (ret == this.root) this.root = null;\n    return ret;\n  }\n\n  if (ret == last) {\n    if (ret._parent._left == node) ret._parent._left = null;else ret._parent._right = null;\n    last = ret._parent;\n    ret._parent = null;\n  } else if (!ret._left && !ret._right) {\n    // we're trying to remove an element without any children and its not the last\n    // move the last under its parent and heap-up\n    if (last._parent._left == last) last._parent._left = null;else last._parent._right = null;\n    if (ret._parent._left == ret) ret._parent._left = last;else ret._parent._right = last;\n    last._parent = ret._parent;\n    ret._parent = null; // TODO in this case we shouldn't later also do a down, but it should only visit once\n\n    this._up(last);\n  } else {\n    this._delete_swap(ret, last);\n  }\n\n  if (ret == this.root) this.root = last;\n\n  this._down(last);\n\n  this._head();\n\n  return ret;\n}; // TODO this probably isn't the most efficient way to ensure that we're always\n// at the root of the tree, but it works for now\n\n\nHeap.prototype._head = function () {\n  if (!this.root) return;\n  var tmp = this.root;\n\n  while (tmp._parent) {\n    tmp = tmp._parent;\n  }\n\n  this.root = tmp;\n}; // TODO is there a more efficient way to store this instead of an array?\n\n\nHeap.prototype._last = function () {\n  var path, pos, mod, insert;\n  pos = this.length;\n  path = [];\n\n  while (pos > 1) {\n    mod = pos % 2;\n    pos = Math.floor(pos / 2);\n    path.push(mod);\n  }\n\n  insert = this.root;\n\n  while (path.length > 1) {\n    pos = path.pop();\n    if (pos === 0) insert = insert._left;else insert = insert._right;\n  }\n\n  return insert;\n};\n\nHeap.prototype._swap = function (a, b) {\n  var cleft, cright, tparent;\n  cleft = b._left;\n  cright = b._right;\n\n  if (a._parent) {\n    if (a._parent._left == a) a._parent._left = b;else a._parent._right = b;\n  }\n\n  b._parent = a._parent;\n  a._parent = b; // This assumes direct descendents\n\n  if (a._left == b) {\n    b._left = a;\n    b._right = a._right;\n    if (b._right) b._right._parent = b;\n  } else {\n    b._right = a;\n    b._left = a._left;\n    if (b._left) b._left._parent = b;\n  }\n\n  a._left = cleft;\n  a._right = cright;\n  if (a._left) a._left._parent = a;\n  if (a._right) a._right._parent = a;\n  assert.notEqual(a._parent, a, \"A shouldn't refer to itself\");\n  assert.notEqual(b._parent, b, \"B shouldn't refer to itself\");\n};\n\nHeap.prototype._delete_swap = function (a, b) {\n  if (a._left != b) b._left = a._left;\n  if (a._right != b) b._right = a._right;\n  if (b._parent._left == b) b._parent._left = null;else b._parent._right = null;\n\n  if (a._parent) {\n    if (a._parent._left == a) a._parent._left = b;else a._parent._right = b;\n  }\n\n  b._parent = a._parent;\n  if (b._left) b._left._parent = b;\n  if (b._right) b._right._parent = b;\n  a._parent = null;\n  a._left = null;\n  a._right = null;\n};\n\nHeap.prototype._smallest = function (heap) {\n  var small = heap;\n\n  if (heap._left && heap._key > heap._left._key) {\n    small = heap._left;\n  }\n\n  if (heap._right && small._key > heap._right._key) {\n    small = heap._right;\n  }\n\n  return small;\n};\n\nHeap.prototype._largest = function (heap) {\n  var large = heap;\n\n  if (heap._left && heap._key < heap._left._key) {\n    large = heap._left;\n  }\n\n  if (heap._right && large._key < heap._right._key) {\n    large = heap._right;\n  }\n\n  return large;\n};\n\nHeap.prototype._up = function (node) {\n  if (!node || !node._parent) return;\n\n  var next = this._comparator(node._parent);\n\n  if (next != node._parent) {\n    this._swap(node._parent, node);\n\n    this._up(node);\n  }\n};\n\nHeap.prototype._down = function (node) {\n  if (!node) return;\n\n  var next = this._comparator(node);\n\n  if (next != node) {\n    this._swap(node, next);\n\n    this._down(node);\n  }\n};\n\nvar util = require('util');\n\nHeap.prototype.print = function (stream) {\n  stream.write('digraph {\\n');\n\n  Heap._print(this.root, stream);\n\n  stream.write('}\\n');\n};\n\nHeap._print = function (heap, stream) {\n  if (!heap) return;\n\n  if (heap._left) {\n    stream.write(util.format('' + heap._key, '->', heap._left._key, '\\n'));\n\n    Heap._print(heap._left, stream);\n  }\n\n  if (heap._right) {\n    stream.write(util.format('' + heap._key, '->', heap._right._key, '\\n'));\n\n    Heap._print(heap._right, stream);\n  }\n};\n\nmodule.exports = Heap;","map":{"version":3,"names":["assert","require","Heap","min","length","root","undefined","_comparator","_smallest","_largest","init","obj","key","_parent","_left","_right","_key","prototype","count","node","c","insert","_last","_up","_head","pop","ret","last","remove","_delete_swap","_down","tmp","path","pos","mod","Math","floor","push","_swap","a","b","cleft","cright","tparent","notEqual","heap","small","large","next","util","print","stream","write","_print","format","module","exports"],"sources":["C:/Users/Kamen/ML/AlgoTrader/node_modules/binaryheap/binaryheap.js"],"sourcesContent":["// Copyright 2012 Timothy J Fontaine <tjfontaine@gmail.com>\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE\r\n\r\n'use strict';\r\n\r\nvar assert = require('assert');\r\n\r\nvar Heap = function(min) {\r\n  this.length = 0;\r\n  this.root = undefined;\r\n  if (min) {\r\n    this._comparator = this._smallest;\r\n  } else {\r\n    this._comparator = this._largest;\r\n  }\r\n};\r\n\r\nHeap.init = function(obj, key) {\r\n  obj._parent = null;\r\n  obj._left = null;\r\n  obj._right = null;\r\n  obj._key = key;\r\n  return obj;\r\n};\r\n\r\nHeap.prototype.count = function (node) {\r\n  if (!node) return 0;\r\n\r\n  var c = 1;\r\n\r\n  c += this.count(node._left);\r\n  c += this.count(node._right);\r\n\r\n  return c;\r\n};\r\n\r\nHeap.prototype.insert = function(obj, key) {\r\n  var insert, node;\r\n\r\n  this.length += 1;\r\n\r\n  node = Heap.init(obj, key);\r\n\r\n  if (!this.root) {\r\n    this.root = node;\r\n  } else {\r\n    insert = this._last();\r\n\r\n    node._parent = insert;\r\n\r\n    if (!insert._left)\r\n      insert._left = node;\r\n    else\r\n      insert._right = node;\r\n\r\n    this._up(node);\r\n  }\r\n\r\n  this._head();\r\n\r\n  return node;\r\n};\r\n\r\nHeap.prototype.pop = function() {\r\n  var ret, last;\r\n\r\n  if (!this.root)\r\n    return null;\r\n\r\n  return this.remove(this.root);\r\n};\r\n\r\nHeap.prototype.remove = function(node) {\r\n  var ret, last;\r\n\r\n  ret = node;\r\n  last = this._last();\r\n\r\n  if (last._right)\r\n    last = last._right;\r\n  else\r\n    last = last._left;\r\n\r\n  this.length -= 1;\r\n\r\n  if (!last) {\r\n    if (ret == this.root)\r\n      this.root = null;\r\n    return ret;\r\n  }\r\n\r\n  if (ret == last) {\r\n    if (ret._parent._left == node)\r\n      ret._parent._left = null;\r\n    else\r\n      ret._parent._right = null;\r\n    last = ret._parent;\r\n    ret._parent = null;\r\n  } else if (!ret._left && !ret._right) {\r\n    // we're trying to remove an element without any children and its not the last\r\n    // move the last under its parent and heap-up\r\n    if (last._parent._left == last) last._parent._left = null;\r\n    else last._parent._right = null;\r\n\r\n    if (ret._parent._left == ret) ret._parent._left = last;\r\n    else ret._parent._right = last;\r\n\r\n    last._parent = ret._parent;\r\n\r\n    ret._parent = null;\r\n\r\n    // TODO in this case we shouldn't later also do a down, but it should only visit once\r\n    this._up(last);\r\n  } else {\r\n    this._delete_swap(ret, last);\r\n  }\r\n\r\n  if (ret == this.root)\r\n    this.root = last;\r\n\r\n  this._down(last);\r\n  this._head();\r\n\r\n  return ret;\r\n};\r\n\r\n// TODO this probably isn't the most efficient way to ensure that we're always\r\n// at the root of the tree, but it works for now\r\nHeap.prototype._head = function() {\r\n  if (!this.root)\r\n    return;\r\n\r\n  var tmp = this.root;\r\n  while (tmp._parent) {\r\n    tmp = tmp._parent;\r\n  }\r\n\r\n  this.root = tmp;\r\n};\r\n\r\n// TODO is there a more efficient way to store this instead of an array?\r\nHeap.prototype._last = function() {\r\n  var path, pos, mod, insert;\r\n\r\n  pos = this.length;\r\n  path = [];\r\n  while (pos > 1) {\r\n    mod = pos % 2;\r\n    pos = Math.floor(pos / 2);\r\n    path.push(mod);\r\n  }\r\n\r\n  insert = this.root;\r\n\r\n  while (path.length > 1) {\r\n    pos = path.pop();\r\n    if (pos === 0)\r\n      insert = insert._left;\r\n    else\r\n      insert = insert._right;\r\n  }\r\n\r\n  return insert;\r\n};\r\n\r\nHeap.prototype._swap = function(a, b) {\r\n  var cleft, cright, tparent;\r\n\r\n  cleft = b._left;\r\n  cright = b._right;\r\n\r\n  if (a._parent) {\r\n    if (a._parent._left == a) a._parent._left = b;\r\n    else a._parent._right = b;\r\n  }\r\n\r\n  b._parent = a._parent;\r\n  a._parent = b;\r\n\r\n  // This assumes direct descendents\r\n  if (a._left == b) {\r\n    b._left = a;\r\n    b._right = a._right;\r\n    if (b._right) b._right._parent = b;\r\n  } else {\r\n    b._right = a;\r\n    b._left = a._left;\r\n    if (b._left) b._left._parent = b;\r\n  }\r\n\r\n  a._left = cleft;\r\n  a._right = cright;\r\n\r\n  if (a._left) a._left._parent = a;\r\n  if (a._right) a._right._parent = a;\r\n\r\n  assert.notEqual(a._parent, a, \"A shouldn't refer to itself\");\r\n  assert.notEqual(b._parent, b, \"B shouldn't refer to itself\");\r\n};\r\n\r\nHeap.prototype._delete_swap = function(a, b) {\r\n  if (a._left != b) b._left = a._left;\r\n  if (a._right != b) b._right = a._right;\r\n\r\n  if (b._parent._left == b) b._parent._left = null;\r\n  else b._parent._right = null;\r\n\r\n  if (a._parent) {\r\n    if (a._parent._left == a) a._parent._left = b;\r\n    else a._parent._right = b;\r\n  }\r\n\r\n  b._parent = a._parent;\r\n\r\n  if (b._left) b._left._parent = b;\r\n  if (b._right) b._right._parent = b;\r\n\r\n  a._parent = null;\r\n  a._left = null;\r\n  a._right = null;\r\n};\r\n\r\nHeap.prototype._smallest = function(heap) {\r\n  var small = heap;\r\n\r\n  if (heap._left && heap._key > heap._left._key) {\r\n    small = heap._left;\r\n  }\r\n\r\n  if (heap._right && small._key > heap._right._key) {\r\n    small = heap._right;\r\n  }\r\n\r\n  return small;\r\n};\r\n\r\nHeap.prototype._largest = function(heap) {\r\n  var large = heap;\r\n\r\n  if (heap._left && heap._key < heap._left._key) {\r\n    large = heap._left;\r\n  }\r\n\r\n  if (heap._right && large._key < heap._right._key) {\r\n    large = heap._right;\r\n  }\r\n\r\n  return large;\r\n};\r\n\r\nHeap.prototype._up = function(node) {\r\n  if (!node || !node._parent)\r\n    return;\r\n\r\n  var next = this._comparator(node._parent);\r\n\r\n  if (next != node._parent) {\r\n    this._swap(node._parent, node);\r\n    this._up(node);\r\n  }\r\n};\r\n\r\nHeap.prototype._down = function(node) {\r\n  if (!node)\r\n    return;\r\n\r\n  var next = this._comparator(node);\r\n  if (next != node) {\r\n    this._swap(node, next);\r\n    this._down(node);\r\n  }\r\n};\r\n\r\nvar util = require('util');\r\n\r\nHeap.prototype.print = function(stream) {\r\n  stream.write('digraph {\\n');\r\n  Heap._print(this.root, stream);\r\n  stream.write('}\\n');\r\n};\r\n\r\nHeap._print = function(heap, stream) {\r\n  if (!heap) return;\r\n\r\n  if (heap._left) {\r\n    stream.write(util.format('' + heap._key, '->', heap._left._key, '\\n'));\r\n    Heap._print(heap._left, stream);\r\n  }\r\n\r\n  if (heap._right) {\r\n    stream.write(util.format('' + heap._key, '->', heap._right._key, '\\n'));\r\n    Heap._print(heap._right, stream);\r\n  }\r\n};\r\n\r\nmodule.exports = Heap;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}